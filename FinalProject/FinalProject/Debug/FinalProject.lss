
FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000027fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001d8  00802000  000027fa  0000288e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006d  008021d8  008021d8  00002a66  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002a66  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00002a98  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000368  00000000  00000000  00002ae0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000ea2d  00000000  00000000  00002e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004838  00000000  00000000  00011875  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000627f  00000000  00000000  000160ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000011ec  00000000  00000000  0001c32c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000300ea  00000000  00000000  0001d518  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000556b  00000000  00000000  0004d602  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000410  00000000  00000000  00052b6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000b42e  00000000  00000000  00052f7d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	04 c1       	rjmp	.+520    	; 0x20a <__ctors_end>
       2:	00 00       	nop
       4:	23 c1       	rjmp	.+582    	; 0x24c <__bad_interrupt>
       6:	00 00       	nop
       8:	21 c1       	rjmp	.+578    	; 0x24c <__bad_interrupt>
       a:	00 00       	nop
       c:	1f c1       	rjmp	.+574    	; 0x24c <__bad_interrupt>
       e:	00 00       	nop
      10:	1d c1       	rjmp	.+570    	; 0x24c <__bad_interrupt>
      12:	00 00       	nop
      14:	1b c1       	rjmp	.+566    	; 0x24c <__bad_interrupt>
      16:	00 00       	nop
      18:	19 c1       	rjmp	.+562    	; 0x24c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	17 c1       	rjmp	.+558    	; 0x24c <__bad_interrupt>
      1e:	00 00       	nop
      20:	15 c1       	rjmp	.+554    	; 0x24c <__bad_interrupt>
      22:	00 00       	nop
      24:	13 c1       	rjmp	.+550    	; 0x24c <__bad_interrupt>
      26:	00 00       	nop
      28:	11 c1       	rjmp	.+546    	; 0x24c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0f c1       	rjmp	.+542    	; 0x24c <__bad_interrupt>
      2e:	00 00       	nop
      30:	0d c1       	rjmp	.+538    	; 0x24c <__bad_interrupt>
      32:	00 00       	nop
      34:	0b c1       	rjmp	.+534    	; 0x24c <__bad_interrupt>
      36:	00 00       	nop
      38:	f1 c2       	rjmp	.+1506   	; 0x61c <__vector_14>
      3a:	00 00       	nop
      3c:	1c c3       	rjmp	.+1592   	; 0x676 <__vector_15>
      3e:	00 00       	nop
      40:	47 c3       	rjmp	.+1678   	; 0x6d0 <__vector_16>
      42:	00 00       	nop
      44:	72 c3       	rjmp	.+1764   	; 0x72a <__vector_17>
      46:	00 00       	nop
      48:	9d c3       	rjmp	.+1850   	; 0x784 <__vector_18>
      4a:	00 00       	nop
      4c:	c8 c3       	rjmp	.+1936   	; 0x7de <__vector_19>
      4e:	00 00       	nop
      50:	f3 c3       	rjmp	.+2022   	; 0x838 <__vector_20>
      52:	00 00       	nop
      54:	1e c4       	rjmp	.+2108   	; 0x892 <__vector_21>
      56:	00 00       	nop
      58:	49 c4       	rjmp	.+2194   	; 0x8ec <__vector_22>
      5a:	00 00       	nop
      5c:	74 c4       	rjmp	.+2280   	; 0x946 <__vector_23>
      5e:	00 00       	nop
      60:	f5 c0       	rjmp	.+490    	; 0x24c <__bad_interrupt>
      62:	00 00       	nop
      64:	f3 c0       	rjmp	.+486    	; 0x24c <__bad_interrupt>
      66:	00 00       	nop
      68:	f1 c0       	rjmp	.+482    	; 0x24c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ef c0       	rjmp	.+478    	; 0x24c <__bad_interrupt>
      6e:	00 00       	nop
      70:	ed c0       	rjmp	.+474    	; 0x24c <__bad_interrupt>
      72:	00 00       	nop
      74:	eb c0       	rjmp	.+470    	; 0x24c <__bad_interrupt>
      76:	00 00       	nop
      78:	e9 c0       	rjmp	.+466    	; 0x24c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e7 c0       	rjmp	.+462    	; 0x24c <__bad_interrupt>
      7e:	00 00       	nop
      80:	e5 c0       	rjmp	.+458    	; 0x24c <__bad_interrupt>
      82:	00 00       	nop
      84:	e3 c0       	rjmp	.+454    	; 0x24c <__bad_interrupt>
      86:	00 00       	nop
      88:	e1 c0       	rjmp	.+450    	; 0x24c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	df c0       	rjmp	.+446    	; 0x24c <__bad_interrupt>
      8e:	00 00       	nop
      90:	dd c0       	rjmp	.+442    	; 0x24c <__bad_interrupt>
      92:	00 00       	nop
      94:	db c0       	rjmp	.+438    	; 0x24c <__bad_interrupt>
      96:	00 00       	nop
      98:	d9 c0       	rjmp	.+434    	; 0x24c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d7 c0       	rjmp	.+430    	; 0x24c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d5 c0       	rjmp	.+426    	; 0x24c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d3 c0       	rjmp	.+422    	; 0x24c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	d1 c0       	rjmp	.+418    	; 0x24c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	cf c0       	rjmp	.+414    	; 0x24c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	cd c0       	rjmp	.+410    	; 0x24c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	cb c0       	rjmp	.+406    	; 0x24c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c9 c0       	rjmp	.+402    	; 0x24c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c6       	rjmp	.+3174   	; 0xd24 <__vector_47>
      be:	00 00       	nop
      c0:	5e c6       	rjmp	.+3260   	; 0xd7e <__vector_48>
      c2:	00 00       	nop
      c4:	89 c6       	rjmp	.+3346   	; 0xdd8 <__vector_49>
      c6:	00 00       	nop
      c8:	b4 c6       	rjmp	.+3432   	; 0xe32 <__vector_50>
      ca:	00 00       	nop
      cc:	df c6       	rjmp	.+3518   	; 0xe8c <__vector_51>
      ce:	00 00       	nop
      d0:	0a c7       	rjmp	.+3604   	; 0xee6 <__vector_52>
      d2:	00 00       	nop
      d4:	35 c7       	rjmp	.+3690   	; 0xf40 <__vector_53>
      d6:	00 00       	nop
      d8:	60 c7       	rjmp	.+3776   	; 0xf9a <__vector_54>
      da:	00 00       	nop
      dc:	8b c7       	rjmp	.+3862   	; 0xff4 <__vector_55>
      de:	00 00       	nop
      e0:	b6 c7       	rjmp	.+3948   	; 0x104e <__vector_56>
      e2:	00 00       	nop
      e4:	b3 c0       	rjmp	.+358    	; 0x24c <__bad_interrupt>
      e6:	00 00       	nop
      e8:	b1 c0       	rjmp	.+354    	; 0x24c <__bad_interrupt>
      ea:	00 00       	nop
      ec:	af c0       	rjmp	.+350    	; 0x24c <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ad c0       	rjmp	.+346    	; 0x24c <__bad_interrupt>
      f2:	00 00       	nop
      f4:	ab c0       	rjmp	.+342    	; 0x24c <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a9 c0       	rjmp	.+338    	; 0x24c <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a7 c0       	rjmp	.+334    	; 0x24c <__bad_interrupt>
      fe:	00 00       	nop
     100:	a5 c0       	rjmp	.+330    	; 0x24c <__bad_interrupt>
     102:	00 00       	nop
     104:	a3 c0       	rjmp	.+326    	; 0x24c <__bad_interrupt>
     106:	00 00       	nop
     108:	a1 c0       	rjmp	.+322    	; 0x24c <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9f c0       	rjmp	.+318    	; 0x24c <__bad_interrupt>
     10e:	00 00       	nop
     110:	9d c0       	rjmp	.+314    	; 0x24c <__bad_interrupt>
     112:	00 00       	nop
     114:	9b c0       	rjmp	.+310    	; 0x24c <__bad_interrupt>
     116:	00 00       	nop
     118:	99 c0       	rjmp	.+306    	; 0x24c <__bad_interrupt>
     11a:	00 00       	nop
     11c:	97 c0       	rjmp	.+302    	; 0x24c <__bad_interrupt>
     11e:	00 00       	nop
     120:	95 c0       	rjmp	.+298    	; 0x24c <__bad_interrupt>
     122:	00 00       	nop
     124:	93 c0       	rjmp	.+294    	; 0x24c <__bad_interrupt>
     126:	00 00       	nop
     128:	91 c0       	rjmp	.+290    	; 0x24c <__bad_interrupt>
     12a:	00 00       	nop
     12c:	8f c0       	rjmp	.+286    	; 0x24c <__bad_interrupt>
     12e:	00 00       	nop
     130:	8d c0       	rjmp	.+282    	; 0x24c <__bad_interrupt>
     132:	00 00       	nop
     134:	35 c4       	rjmp	.+2154   	; 0x9a0 <__vector_77>
     136:	00 00       	nop
     138:	60 c4       	rjmp	.+2240   	; 0x9fa <__vector_78>
     13a:	00 00       	nop
     13c:	8b c4       	rjmp	.+2326   	; 0xa54 <__vector_79>
     13e:	00 00       	nop
     140:	b6 c4       	rjmp	.+2412   	; 0xaae <__vector_80>
     142:	00 00       	nop
     144:	e1 c4       	rjmp	.+2498   	; 0xb08 <__vector_81>
     146:	00 00       	nop
     148:	0c c5       	rjmp	.+2584   	; 0xb62 <__vector_82>
     14a:	00 00       	nop
     14c:	37 c5       	rjmp	.+2670   	; 0xbbc <__vector_83>
     14e:	00 00       	nop
     150:	62 c5       	rjmp	.+2756   	; 0xc16 <__vector_84>
     152:	00 00       	nop
     154:	8d c5       	rjmp	.+2842   	; 0xc70 <__vector_85>
     156:	00 00       	nop
     158:	b8 c5       	rjmp	.+2928   	; 0xcca <__vector_86>
     15a:	00 00       	nop
     15c:	77 c0       	rjmp	.+238    	; 0x24c <__bad_interrupt>
     15e:	00 00       	nop
     160:	75 c0       	rjmp	.+234    	; 0x24c <__bad_interrupt>
     162:	00 00       	nop
     164:	73 c0       	rjmp	.+230    	; 0x24c <__bad_interrupt>
     166:	00 00       	nop
     168:	71 c0       	rjmp	.+226    	; 0x24c <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6f c0       	rjmp	.+222    	; 0x24c <__bad_interrupt>
     16e:	00 00       	nop
     170:	6d c0       	rjmp	.+218    	; 0x24c <__bad_interrupt>
     172:	00 00       	nop
     174:	6b c0       	rjmp	.+214    	; 0x24c <__bad_interrupt>
     176:	00 00       	nop
     178:	69 c0       	rjmp	.+210    	; 0x24c <__bad_interrupt>
     17a:	00 00       	nop
     17c:	67 c0       	rjmp	.+206    	; 0x24c <__bad_interrupt>
     17e:	00 00       	nop
     180:	65 c0       	rjmp	.+202    	; 0x24c <__bad_interrupt>
     182:	00 00       	nop
     184:	63 c0       	rjmp	.+198    	; 0x24c <__bad_interrupt>
     186:	00 00       	nop
     188:	61 c0       	rjmp	.+194    	; 0x24c <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5f c0       	rjmp	.+190    	; 0x24c <__bad_interrupt>
     18e:	00 00       	nop
     190:	5d c0       	rjmp	.+186    	; 0x24c <__bad_interrupt>
     192:	00 00       	nop
     194:	5b c0       	rjmp	.+182    	; 0x24c <__bad_interrupt>
     196:	00 00       	nop
     198:	59 c0       	rjmp	.+178    	; 0x24c <__bad_interrupt>
     19a:	00 00       	nop
     19c:	57 c0       	rjmp	.+174    	; 0x24c <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	55 c0       	rjmp	.+170    	; 0x24c <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	53 c0       	rjmp	.+166    	; 0x24c <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	51 c0       	rjmp	.+162    	; 0x24c <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	4f c0       	rjmp	.+158    	; 0x24c <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	7b c7       	rjmp	.+3830   	; 0x10a8 <__vector_108>
     1b2:	00 00       	nop
     1b4:	a6 c7       	rjmp	.+3916   	; 0x1102 <__vector_109>
     1b6:	00 00       	nop
     1b8:	d1 c7       	rjmp	.+4002   	; 0x115c <__vector_110>
     1ba:	00 00       	nop
     1bc:	fc c7       	rjmp	.+4088   	; 0x11b6 <__vector_111>
     1be:	00 00       	nop
     1c0:	0c 94 08 09 	jmp	0x1210	; 0x1210 <__vector_112>
     1c4:	0c 94 35 09 	jmp	0x126a	; 0x126a <__vector_113>
     1c8:	41 c0       	rjmp	.+130    	; 0x24c <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	3f c0       	rjmp	.+126    	; 0x24c <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	3d c0       	rjmp	.+122    	; 0x24c <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	3b c0       	rjmp	.+118    	; 0x24c <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	39 c0       	rjmp	.+114    	; 0x24c <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	37 c0       	rjmp	.+110    	; 0x24c <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	35 c0       	rjmp	.+106    	; 0x24c <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	33 c0       	rjmp	.+102    	; 0x24c <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	31 c0       	rjmp	.+98     	; 0x24c <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2f c0       	rjmp	.+94     	; 0x24c <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	2d c0       	rjmp	.+90     	; 0x24c <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	2b c0       	rjmp	.+86     	; 0x24c <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	29 c0       	rjmp	.+82     	; 0x24c <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	5e 0f       	add	r21, r30
     1fe:	71 0f       	add	r23, r17
     200:	84 0f       	add	r24, r20
     202:	97 0f       	add	r25, r23
     204:	aa 0f       	add	r26, r26
     206:	bd 0f       	add	r27, r29
     208:	d0 0f       	add	r29, r16

0000020a <__ctors_end>:
     20a:	11 24       	eor	r1, r1
     20c:	1f be       	out	0x3f, r1	; 63
     20e:	cf ef       	ldi	r28, 0xFF	; 255
     210:	cd bf       	out	0x3d, r28	; 61
     212:	df e5       	ldi	r29, 0x5F	; 95
     214:	de bf       	out	0x3e, r29	; 62
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0c bf       	out	0x3c, r16	; 60

0000021a <__do_copy_data>:
     21a:	11 e2       	ldi	r17, 0x21	; 33
     21c:	a0 e0       	ldi	r26, 0x00	; 0
     21e:	b0 e2       	ldi	r27, 0x20	; 32
     220:	ea ef       	ldi	r30, 0xFA	; 250
     222:	f7 e2       	ldi	r31, 0x27	; 39
     224:	00 e0       	ldi	r16, 0x00	; 0
     226:	0b bf       	out	0x3b, r16	; 59
     228:	02 c0       	rjmp	.+4      	; 0x22e <__do_copy_data+0x14>
     22a:	07 90       	elpm	r0, Z+
     22c:	0d 92       	st	X+, r0
     22e:	a8 3d       	cpi	r26, 0xD8	; 216
     230:	b1 07       	cpc	r27, r17
     232:	d9 f7       	brne	.-10     	; 0x22a <__do_copy_data+0x10>

00000234 <__do_clear_bss>:
     234:	22 e2       	ldi	r18, 0x22	; 34
     236:	a8 ed       	ldi	r26, 0xD8	; 216
     238:	b1 e2       	ldi	r27, 0x21	; 33
     23a:	01 c0       	rjmp	.+2      	; 0x23e <.do_clear_bss_start>

0000023c <.do_clear_bss_loop>:
     23c:	1d 92       	st	X+, r1

0000023e <.do_clear_bss_start>:
     23e:	a5 34       	cpi	r26, 0x45	; 69
     240:	b2 07       	cpc	r27, r18
     242:	e1 f7       	brne	.-8      	; 0x23c <.do_clear_bss_loop>
     244:	0e 94 6e 13 	call	0x26dc	; 0x26dc <main>
     248:	0c 94 fb 13 	jmp	0x27f6	; 0x27f6 <_exit>

0000024c <__bad_interrupt>:
     24c:	d9 ce       	rjmp	.-590    	; 0x0 <__vectors>

0000024e <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     24e:	04 c0       	rjmp	.+8      	; 0x258 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     250:	61 50       	subi	r22, 0x01	; 1
     252:	71 09       	sbc	r23, r1
     254:	81 09       	sbc	r24, r1
     256:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     258:	61 15       	cp	r22, r1
     25a:	71 05       	cpc	r23, r1
     25c:	81 05       	cpc	r24, r1
     25e:	91 05       	cpc	r25, r1
     260:	b9 f7       	brne	.-18     	; 0x250 <__portable_avr_delay_cycles+0x2>
     262:	08 95       	ret

00000264 <st7565r_init>:
 * Call this function to initialize the hardware interface and the LCD
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void st7565r_init(void)
{
     264:	bf 92       	push	r11
     266:	cf 92       	push	r12
     268:	df 92       	push	r13
     26a:	ef 92       	push	r14
     26c:	ff 92       	push	r15
     26e:	0f 93       	push	r16
     270:	1f 93       	push	r17
     272:	cf 93       	push	r28
     274:	df 93       	push	r29
     276:	1f 92       	push	r1
     278:	cd b7       	in	r28, 0x3d	; 61
     27a:	de b7       	in	r29, 0x3e	; 62
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     27c:	00 e0       	ldi	r16, 0x00	; 0
     27e:	16 e0       	ldi	r17, 0x06	; 6
     280:	68 94       	set
     282:	ff 24       	eor	r15, r15
     284:	f3 f8       	bld	r15, 3
     286:	f8 01       	movw	r30, r16
     288:	f6 82       	std	Z+6, r15	; 0x06
 * function, this command will control the RST pin.
 */
static inline void st7565r_hard_reset(void)
{
	ioport_set_pin_low(ST7565R_RESET_PIN);
	delay_us(10);
     28a:	6e e0       	ldi	r22, 0x0E	; 14
     28c:	70 e0       	ldi	r23, 0x00	; 0
     28e:	80 e0       	ldi	r24, 0x00	; 0
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	dd df       	rcall	.-70     	; 0x24e <__portable_avr_delay_cycles>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     294:	f8 01       	movw	r30, r16
     296:	f5 82       	std	Z+5, r15	; 0x05
	ioport_set_pin_high(ST7565R_RESET_PIN);
	delay_us(10);
     298:	6e e0       	ldi	r22, 0x0E	; 14
     29a:	70 e0       	ldi	r23, 0x00	; 0
     29c:	80 e0       	ldi	r24, 0x00	; 0
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	d6 df       	rcall	.-84     	; 0x24e <__portable_avr_delay_cycles>
	spi_flags_t spi_flags = SPI_MODE_3;
	board_spi_select_id_t spi_select_id = 0;
#endif

#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {
     2a2:	0f 2e       	mov	r0, r31
     2a4:	fb e2       	ldi	r31, 0x2B	; 43
     2a6:	bf 2e       	mov	r11, r31
     2a8:	f0 2d       	mov	r31, r0
     2aa:	b9 82       	std	Y+1, r11	; 0x01
		.id = ST7565R_CS_PIN,
	};
	usart_spi_init(ST7565R_USART_SPI);
     2ac:	80 ea       	ldi	r24, 0xA0	; 160
     2ae:	99 e0       	ldi	r25, 0x09	; 9
     2b0:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <usart_spi_init>
	usart_spi_setup_device(ST7565R_USART_SPI, &device, spi_flags,
     2b4:	c1 2c       	mov	r12, r1
     2b6:	d1 2c       	mov	r13, r1
     2b8:	76 01       	movw	r14, r12
     2ba:	00 e4       	ldi	r16, 0x40	; 64
     2bc:	12 e4       	ldi	r17, 0x42	; 66
     2be:	2f e0       	ldi	r18, 0x0F	; 15
     2c0:	30 e0       	ldi	r19, 0x00	; 0
     2c2:	43 e0       	ldi	r20, 0x03	; 3
     2c4:	be 01       	movw	r22, r28
     2c6:	6f 5f       	subi	r22, 0xFF	; 255
     2c8:	7f 4f       	sbci	r23, 0xFF	; 255
     2ca:	80 ea       	ldi	r24, 0xA0	; 160
     2cc:	99 e0       	ldi	r25, 0x09	; 9
     2ce:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <usart_spi_setup_device>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     2d2:	00 e6       	ldi	r16, 0x60	; 96
     2d4:	16 e0       	ldi	r17, 0x06	; 6
     2d6:	ff 24       	eor	r15, r15
     2d8:	f3 94       	inc	r15
     2da:	f8 01       	movw	r30, r16
     2dc:	f6 82       	std	Z+6, r15	; 0x06
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     2de:	b9 82       	std	Y+1, r11	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     2e0:	be 01       	movw	r22, r28
     2e2:	6f 5f       	subi	r22, 0xFF	; 255
     2e4:	7f 4f       	sbci	r23, 0xFF	; 255
     2e6:	80 ea       	ldi	r24, 0xA0	; 160
     2e8:	99 e0       	ldi	r25, 0x09	; 9
     2ea:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <usart_spi_select_device>
     2ee:	f8 01       	movw	r30, r16
     2f0:	f6 82       	std	Z+6, r15	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     2f2:	e0 ea       	ldi	r30, 0xA0	; 160
     2f4:	f9 e0       	ldi	r31, 0x09	; 9
     2f6:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     2f8:	85 ff       	sbrs	r24, 5
     2fa:	fd cf       	rjmp	.-6      	; 0x2f6 <st7565r_init+0x92>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     2fc:	80 ea       	ldi	r24, 0xA0	; 160
     2fe:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     302:	e0 ea       	ldi	r30, 0xA0	; 160
     304:	f9 e0       	ldi	r31, 0x09	; 9
     306:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     308:	86 ff       	sbrs	r24, 6
     30a:	fd cf       	rjmp	.-6      	; 0x306 <st7565r_init+0xa2>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     30c:	e0 ea       	ldi	r30, 0xA0	; 160
     30e:	f9 e0       	ldi	r31, 0x09	; 9
     310:	80 e4       	ldi	r24, 0x40	; 64
     312:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     314:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     316:	be 01       	movw	r22, r28
     318:	6f 5f       	subi	r22, 0xFF	; 255
     31a:	7f 4f       	sbci	r23, 0xFF	; 255
     31c:	80 ea       	ldi	r24, 0xA0	; 160
     31e:	99 e0       	ldi	r25, 0x09	; 9
     320:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     324:	8b e2       	ldi	r24, 0x2B	; 43
     326:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     328:	be 01       	movw	r22, r28
     32a:	6f 5f       	subi	r22, 0xFF	; 255
     32c:	7f 4f       	sbci	r23, 0xFF	; 255
     32e:	80 ea       	ldi	r24, 0xA0	; 160
     330:	99 e0       	ldi	r25, 0x09	; 9
     332:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <usart_spi_select_device>
     336:	81 e0       	ldi	r24, 0x01	; 1
     338:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     33c:	e0 ea       	ldi	r30, 0xA0	; 160
     33e:	f9 e0       	ldi	r31, 0x09	; 9
     340:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     342:	85 ff       	sbrs	r24, 5
     344:	fd cf       	rjmp	.-6      	; 0x340 <st7565r_init+0xdc>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     346:	86 ea       	ldi	r24, 0xA6	; 166
     348:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     34c:	e0 ea       	ldi	r30, 0xA0	; 160
     34e:	f9 e0       	ldi	r31, 0x09	; 9
     350:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     352:	86 ff       	sbrs	r24, 6
     354:	fd cf       	rjmp	.-6      	; 0x350 <st7565r_init+0xec>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     356:	e0 ea       	ldi	r30, 0xA0	; 160
     358:	f9 e0       	ldi	r31, 0x09	; 9
     35a:	80 e4       	ldi	r24, 0x40	; 64
     35c:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     35e:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     360:	be 01       	movw	r22, r28
     362:	6f 5f       	subi	r22, 0xFF	; 255
     364:	7f 4f       	sbci	r23, 0xFF	; 255
     366:	80 ea       	ldi	r24, 0xA0	; 160
     368:	99 e0       	ldi	r25, 0x09	; 9
     36a:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     36e:	8b e2       	ldi	r24, 0x2B	; 43
     370:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     372:	be 01       	movw	r22, r28
     374:	6f 5f       	subi	r22, 0xFF	; 255
     376:	7f 4f       	sbci	r23, 0xFF	; 255
     378:	80 ea       	ldi	r24, 0xA0	; 160
     37a:	99 e0       	ldi	r25, 0x09	; 9
     37c:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <usart_spi_select_device>
     380:	81 e0       	ldi	r24, 0x01	; 1
     382:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     386:	e0 ea       	ldi	r30, 0xA0	; 160
     388:	f9 e0       	ldi	r31, 0x09	; 9
     38a:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     38c:	85 ff       	sbrs	r24, 5
     38e:	fd cf       	rjmp	.-6      	; 0x38a <st7565r_init+0x126>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     390:	88 ec       	ldi	r24, 0xC8	; 200
     392:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     396:	e0 ea       	ldi	r30, 0xA0	; 160
     398:	f9 e0       	ldi	r31, 0x09	; 9
     39a:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     39c:	86 ff       	sbrs	r24, 6
     39e:	fd cf       	rjmp	.-6      	; 0x39a <st7565r_init+0x136>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     3a0:	e0 ea       	ldi	r30, 0xA0	; 160
     3a2:	f9 e0       	ldi	r31, 0x09	; 9
     3a4:	80 e4       	ldi	r24, 0x40	; 64
     3a6:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     3a8:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     3aa:	be 01       	movw	r22, r28
     3ac:	6f 5f       	subi	r22, 0xFF	; 255
     3ae:	7f 4f       	sbci	r23, 0xFF	; 255
     3b0:	80 ea       	ldi	r24, 0xA0	; 160
     3b2:	99 e0       	ldi	r25, 0x09	; 9
     3b4:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     3b8:	8b e2       	ldi	r24, 0x2B	; 43
     3ba:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     3bc:	be 01       	movw	r22, r28
     3be:	6f 5f       	subi	r22, 0xFF	; 255
     3c0:	7f 4f       	sbci	r23, 0xFF	; 255
     3c2:	80 ea       	ldi	r24, 0xA0	; 160
     3c4:	99 e0       	ldi	r25, 0x09	; 9
     3c6:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <usart_spi_select_device>
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     3d0:	e0 ea       	ldi	r30, 0xA0	; 160
     3d2:	f9 e0       	ldi	r31, 0x09	; 9
     3d4:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     3d6:	85 ff       	sbrs	r24, 5
     3d8:	fd cf       	rjmp	.-6      	; 0x3d4 <st7565r_init+0x170>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     3da:	82 ea       	ldi	r24, 0xA2	; 162
     3dc:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     3e0:	e0 ea       	ldi	r30, 0xA0	; 160
     3e2:	f9 e0       	ldi	r31, 0x09	; 9
     3e4:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     3e6:	86 ff       	sbrs	r24, 6
     3e8:	fd cf       	rjmp	.-6      	; 0x3e4 <st7565r_init+0x180>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     3ea:	e0 ea       	ldi	r30, 0xA0	; 160
     3ec:	f9 e0       	ldi	r31, 0x09	; 9
     3ee:	80 e4       	ldi	r24, 0x40	; 64
     3f0:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     3f2:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     3f4:	be 01       	movw	r22, r28
     3f6:	6f 5f       	subi	r22, 0xFF	; 255
     3f8:	7f 4f       	sbci	r23, 0xFF	; 255
     3fa:	80 ea       	ldi	r24, 0xA0	; 160
     3fc:	99 e0       	ldi	r25, 0x09	; 9
     3fe:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     402:	8b e2       	ldi	r24, 0x2B	; 43
     404:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     406:	be 01       	movw	r22, r28
     408:	6f 5f       	subi	r22, 0xFF	; 255
     40a:	7f 4f       	sbci	r23, 0xFF	; 255
     40c:	80 ea       	ldi	r24, 0xA0	; 160
     40e:	99 e0       	ldi	r25, 0x09	; 9
     410:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <usart_spi_select_device>
     414:	81 e0       	ldi	r24, 0x01	; 1
     416:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     41a:	e0 ea       	ldi	r30, 0xA0	; 160
     41c:	f9 e0       	ldi	r31, 0x09	; 9
     41e:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     420:	85 ff       	sbrs	r24, 5
     422:	fd cf       	rjmp	.-6      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     424:	8f e2       	ldi	r24, 0x2F	; 47
     426:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     42a:	e0 ea       	ldi	r30, 0xA0	; 160
     42c:	f9 e0       	ldi	r31, 0x09	; 9
     42e:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     430:	86 ff       	sbrs	r24, 6
     432:	fd cf       	rjmp	.-6      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     434:	e0 ea       	ldi	r30, 0xA0	; 160
     436:	f9 e0       	ldi	r31, 0x09	; 9
     438:	80 e4       	ldi	r24, 0x40	; 64
     43a:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     43c:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     43e:	be 01       	movw	r22, r28
     440:	6f 5f       	subi	r22, 0xFF	; 255
     442:	7f 4f       	sbci	r23, 0xFF	; 255
     444:	80 ea       	ldi	r24, 0xA0	; 160
     446:	99 e0       	ldi	r25, 0x09	; 9
     448:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     44c:	8b e2       	ldi	r24, 0x2B	; 43
     44e:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     450:	be 01       	movw	r22, r28
     452:	6f 5f       	subi	r22, 0xFF	; 255
     454:	7f 4f       	sbci	r23, 0xFF	; 255
     456:	80 ea       	ldi	r24, 0xA0	; 160
     458:	99 e0       	ldi	r25, 0x09	; 9
     45a:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <usart_spi_select_device>
     45e:	81 e0       	ldi	r24, 0x01	; 1
     460:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     464:	e0 ea       	ldi	r30, 0xA0	; 160
     466:	f9 e0       	ldi	r31, 0x09	; 9
     468:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     46a:	85 ff       	sbrs	r24, 5
     46c:	fd cf       	rjmp	.-6      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     46e:	88 ef       	ldi	r24, 0xF8	; 248
     470:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     474:	e0 ea       	ldi	r30, 0xA0	; 160
     476:	f9 e0       	ldi	r31, 0x09	; 9
     478:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     47a:	86 ff       	sbrs	r24, 6
     47c:	fd cf       	rjmp	.-6      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     47e:	e0 ea       	ldi	r30, 0xA0	; 160
     480:	f9 e0       	ldi	r31, 0x09	; 9
     482:	80 e4       	ldi	r24, 0x40	; 64
     484:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     486:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     488:	be 01       	movw	r22, r28
     48a:	6f 5f       	subi	r22, 0xFF	; 255
     48c:	7f 4f       	sbci	r23, 0xFF	; 255
     48e:	80 ea       	ldi	r24, 0xA0	; 160
     490:	99 e0       	ldi	r25, 0x09	; 9
     492:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     496:	8b e2       	ldi	r24, 0x2B	; 43
     498:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     49a:	be 01       	movw	r22, r28
     49c:	6f 5f       	subi	r22, 0xFF	; 255
     49e:	7f 4f       	sbci	r23, 0xFF	; 255
     4a0:	80 ea       	ldi	r24, 0xA0	; 160
     4a2:	99 e0       	ldi	r25, 0x09	; 9
     4a4:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <usart_spi_select_device>
     4a8:	81 e0       	ldi	r24, 0x01	; 1
     4aa:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     4ae:	e0 ea       	ldi	r30, 0xA0	; 160
     4b0:	f9 e0       	ldi	r31, 0x09	; 9
     4b2:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     4b4:	85 ff       	sbrs	r24, 5
     4b6:	fd cf       	rjmp	.-6      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     4b8:	10 92 a0 09 	sts	0x09A0, r1	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     4bc:	e0 ea       	ldi	r30, 0xA0	; 160
     4be:	f9 e0       	ldi	r31, 0x09	; 9
     4c0:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     4c2:	86 ff       	sbrs	r24, 6
     4c4:	fd cf       	rjmp	.-6      	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     4c6:	e0 ea       	ldi	r30, 0xA0	; 160
     4c8:	f9 e0       	ldi	r31, 0x09	; 9
     4ca:	80 e4       	ldi	r24, 0x40	; 64
     4cc:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     4ce:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     4d0:	be 01       	movw	r22, r28
     4d2:	6f 5f       	subi	r22, 0xFF	; 255
     4d4:	7f 4f       	sbci	r23, 0xFF	; 255
     4d6:	80 ea       	ldi	r24, 0xA0	; 160
     4d8:	99 e0       	ldi	r25, 0x09	; 9
     4da:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     4de:	8b e2       	ldi	r24, 0x2B	; 43
     4e0:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     4e2:	be 01       	movw	r22, r28
     4e4:	6f 5f       	subi	r22, 0xFF	; 255
     4e6:	7f 4f       	sbci	r23, 0xFF	; 255
     4e8:	80 ea       	ldi	r24, 0xA0	; 160
     4ea:	99 e0       	ldi	r25, 0x09	; 9
     4ec:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <usart_spi_select_device>
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     4f6:	e0 ea       	ldi	r30, 0xA0	; 160
     4f8:	f9 e0       	ldi	r31, 0x09	; 9
     4fa:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     4fc:	85 ff       	sbrs	r24, 5
     4fe:	fd cf       	rjmp	.-6      	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     500:	81 e2       	ldi	r24, 0x21	; 33
     502:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     506:	e0 ea       	ldi	r30, 0xA0	; 160
     508:	f9 e0       	ldi	r31, 0x09	; 9
     50a:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     50c:	86 ff       	sbrs	r24, 6
     50e:	fd cf       	rjmp	.-6      	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     510:	e0 ea       	ldi	r30, 0xA0	; 160
     512:	f9 e0       	ldi	r31, 0x09	; 9
     514:	80 e4       	ldi	r24, 0x40	; 64
     516:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     518:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     51a:	be 01       	movw	r22, r28
     51c:	6f 5f       	subi	r22, 0xFF	; 255
     51e:	7f 4f       	sbci	r23, 0xFF	; 255
     520:	80 ea       	ldi	r24, 0xA0	; 160
     522:	99 e0       	ldi	r25, 0x09	; 9
     524:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     528:	8b e2       	ldi	r24, 0x2B	; 43
     52a:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     52c:	be 01       	movw	r22, r28
     52e:	6f 5f       	subi	r22, 0xFF	; 255
     530:	7f 4f       	sbci	r23, 0xFF	; 255
     532:	80 ea       	ldi	r24, 0xA0	; 160
     534:	99 e0       	ldi	r25, 0x09	; 9
     536:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <usart_spi_select_device>
     53a:	81 e0       	ldi	r24, 0x01	; 1
     53c:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     540:	e0 ea       	ldi	r30, 0xA0	; 160
     542:	f9 e0       	ldi	r31, 0x09	; 9
     544:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     546:	85 ff       	sbrs	r24, 5
     548:	fd cf       	rjmp	.-6      	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     54a:	81 e8       	ldi	r24, 0x81	; 129
     54c:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     550:	e0 ea       	ldi	r30, 0xA0	; 160
     552:	f9 e0       	ldi	r31, 0x09	; 9
     554:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     556:	86 ff       	sbrs	r24, 6
     558:	fd cf       	rjmp	.-6      	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     55a:	e0 ea       	ldi	r30, 0xA0	; 160
     55c:	f9 e0       	ldi	r31, 0x09	; 9
     55e:	80 e4       	ldi	r24, 0x40	; 64
     560:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     562:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     564:	be 01       	movw	r22, r28
     566:	6f 5f       	subi	r22, 0xFF	; 255
     568:	7f 4f       	sbci	r23, 0xFF	; 255
     56a:	80 ea       	ldi	r24, 0xA0	; 160
     56c:	99 e0       	ldi	r25, 0x09	; 9
     56e:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     572:	8b e2       	ldi	r24, 0x2B	; 43
     574:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     576:	be 01       	movw	r22, r28
     578:	6f 5f       	subi	r22, 0xFF	; 255
     57a:	7f 4f       	sbci	r23, 0xFF	; 255
     57c:	80 ea       	ldi	r24, 0xA0	; 160
     57e:	99 e0       	ldi	r25, 0x09	; 9
     580:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <usart_spi_select_device>
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     58a:	e0 ea       	ldi	r30, 0xA0	; 160
     58c:	f9 e0       	ldi	r31, 0x09	; 9
     58e:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     590:	85 ff       	sbrs	r24, 5
     592:	fd cf       	rjmp	.-6      	; 0x58e <__LOCK_REGION_LENGTH__+0x18e>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     594:	81 e2       	ldi	r24, 0x21	; 33
     596:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     59a:	e0 ea       	ldi	r30, 0xA0	; 160
     59c:	f9 e0       	ldi	r31, 0x09	; 9
     59e:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     5a0:	86 ff       	sbrs	r24, 6
     5a2:	fd cf       	rjmp	.-6      	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     5a4:	e0 ea       	ldi	r30, 0xA0	; 160
     5a6:	f9 e0       	ldi	r31, 0x09	; 9
     5a8:	80 e4       	ldi	r24, 0x40	; 64
     5aa:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     5ac:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     5ae:	be 01       	movw	r22, r28
     5b0:	6f 5f       	subi	r22, 0xFF	; 255
     5b2:	7f 4f       	sbci	r23, 0xFF	; 255
     5b4:	80 ea       	ldi	r24, 0xA0	; 160
     5b6:	99 e0       	ldi	r25, 0x09	; 9
     5b8:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     5bc:	8b e2       	ldi	r24, 0x2B	; 43
     5be:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     5c0:	be 01       	movw	r22, r28
     5c2:	6f 5f       	subi	r22, 0xFF	; 255
     5c4:	7f 4f       	sbci	r23, 0xFF	; 255
     5c6:	80 ea       	ldi	r24, 0xA0	; 160
     5c8:	99 e0       	ldi	r25, 0x09	; 9
     5ca:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <usart_spi_select_device>
     5ce:	81 e0       	ldi	r24, 0x01	; 1
     5d0:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     5d4:	e0 ea       	ldi	r30, 0xA0	; 160
     5d6:	f9 e0       	ldi	r31, 0x09	; 9
     5d8:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     5da:	85 ff       	sbrs	r24, 5
     5dc:	fd cf       	rjmp	.-6      	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     5de:	8f ea       	ldi	r24, 0xAF	; 175
     5e0:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     5e4:	e0 ea       	ldi	r30, 0xA0	; 160
     5e6:	f9 e0       	ldi	r31, 0x09	; 9
     5e8:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     5ea:	86 ff       	sbrs	r24, 6
     5ec:	fd cf       	rjmp	.-6      	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     5ee:	e0 ea       	ldi	r30, 0xA0	; 160
     5f0:	f9 e0       	ldi	r31, 0x09	; 9
     5f2:	80 e4       	ldi	r24, 0x40	; 64
     5f4:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     5f6:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     5f8:	be 01       	movw	r22, r28
     5fa:	6f 5f       	subi	r22, 0xFF	; 255
     5fc:	7f 4f       	sbci	r23, 0xFF	; 255
     5fe:	80 ea       	ldi	r24, 0xA0	; 160
     600:	99 e0       	ldi	r25, 0x09	; 9
     602:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <usart_spi_deselect_device>
	is set to the defined min*/
	st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);

	// Turn on the display
	st7565r_display_on();
}
     606:	0f 90       	pop	r0
     608:	df 91       	pop	r29
     60a:	cf 91       	pop	r28
     60c:	1f 91       	pop	r17
     60e:	0f 91       	pop	r16
     610:	ff 90       	pop	r15
     612:	ef 90       	pop	r14
     614:	df 90       	pop	r13
     616:	cf 90       	pop	r12
     618:	bf 90       	pop	r11
     61a:	08 95       	ret

0000061c <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     61c:	1f 92       	push	r1
     61e:	0f 92       	push	r0
     620:	0f b6       	in	r0, 0x3f	; 63
     622:	0f 92       	push	r0
     624:	11 24       	eor	r1, r1
     626:	0b b6       	in	r0, 0x3b	; 59
     628:	0f 92       	push	r0
     62a:	2f 93       	push	r18
     62c:	3f 93       	push	r19
     62e:	4f 93       	push	r20
     630:	5f 93       	push	r21
     632:	6f 93       	push	r22
     634:	7f 93       	push	r23
     636:	8f 93       	push	r24
     638:	9f 93       	push	r25
     63a:	af 93       	push	r26
     63c:	bf 93       	push	r27
     63e:	ef 93       	push	r30
     640:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     642:	e0 91 1e 22 	lds	r30, 0x221E	; 0x80221e <tc_tcc0_ovf_callback>
     646:	f0 91 1f 22 	lds	r31, 0x221F	; 0x80221f <tc_tcc0_ovf_callback+0x1>
     64a:	30 97       	sbiw	r30, 0x00	; 0
     64c:	09 f0       	breq	.+2      	; 0x650 <__vector_14+0x34>
		tc_tcc0_ovf_callback();
     64e:	19 95       	eicall
	}
}
     650:	ff 91       	pop	r31
     652:	ef 91       	pop	r30
     654:	bf 91       	pop	r27
     656:	af 91       	pop	r26
     658:	9f 91       	pop	r25
     65a:	8f 91       	pop	r24
     65c:	7f 91       	pop	r23
     65e:	6f 91       	pop	r22
     660:	5f 91       	pop	r21
     662:	4f 91       	pop	r20
     664:	3f 91       	pop	r19
     666:	2f 91       	pop	r18
     668:	0f 90       	pop	r0
     66a:	0b be       	out	0x3b, r0	; 59
     66c:	0f 90       	pop	r0
     66e:	0f be       	out	0x3f, r0	; 63
     670:	0f 90       	pop	r0
     672:	1f 90       	pop	r1
     674:	18 95       	reti

00000676 <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     676:	1f 92       	push	r1
     678:	0f 92       	push	r0
     67a:	0f b6       	in	r0, 0x3f	; 63
     67c:	0f 92       	push	r0
     67e:	11 24       	eor	r1, r1
     680:	0b b6       	in	r0, 0x3b	; 59
     682:	0f 92       	push	r0
     684:	2f 93       	push	r18
     686:	3f 93       	push	r19
     688:	4f 93       	push	r20
     68a:	5f 93       	push	r21
     68c:	6f 93       	push	r22
     68e:	7f 93       	push	r23
     690:	8f 93       	push	r24
     692:	9f 93       	push	r25
     694:	af 93       	push	r26
     696:	bf 93       	push	r27
     698:	ef 93       	push	r30
     69a:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     69c:	e0 91 1c 22 	lds	r30, 0x221C	; 0x80221c <tc_tcc0_err_callback>
     6a0:	f0 91 1d 22 	lds	r31, 0x221D	; 0x80221d <tc_tcc0_err_callback+0x1>
     6a4:	30 97       	sbiw	r30, 0x00	; 0
     6a6:	09 f0       	breq	.+2      	; 0x6aa <__vector_15+0x34>
		tc_tcc0_err_callback();
     6a8:	19 95       	eicall
	}
}
     6aa:	ff 91       	pop	r31
     6ac:	ef 91       	pop	r30
     6ae:	bf 91       	pop	r27
     6b0:	af 91       	pop	r26
     6b2:	9f 91       	pop	r25
     6b4:	8f 91       	pop	r24
     6b6:	7f 91       	pop	r23
     6b8:	6f 91       	pop	r22
     6ba:	5f 91       	pop	r21
     6bc:	4f 91       	pop	r20
     6be:	3f 91       	pop	r19
     6c0:	2f 91       	pop	r18
     6c2:	0f 90       	pop	r0
     6c4:	0b be       	out	0x3b, r0	; 59
     6c6:	0f 90       	pop	r0
     6c8:	0f be       	out	0x3f, r0	; 63
     6ca:	0f 90       	pop	r0
     6cc:	1f 90       	pop	r1
     6ce:	18 95       	reti

000006d0 <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     6d0:	1f 92       	push	r1
     6d2:	0f 92       	push	r0
     6d4:	0f b6       	in	r0, 0x3f	; 63
     6d6:	0f 92       	push	r0
     6d8:	11 24       	eor	r1, r1
     6da:	0b b6       	in	r0, 0x3b	; 59
     6dc:	0f 92       	push	r0
     6de:	2f 93       	push	r18
     6e0:	3f 93       	push	r19
     6e2:	4f 93       	push	r20
     6e4:	5f 93       	push	r21
     6e6:	6f 93       	push	r22
     6e8:	7f 93       	push	r23
     6ea:	8f 93       	push	r24
     6ec:	9f 93       	push	r25
     6ee:	af 93       	push	r26
     6f0:	bf 93       	push	r27
     6f2:	ef 93       	push	r30
     6f4:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     6f6:	e0 91 1a 22 	lds	r30, 0x221A	; 0x80221a <tc_tcc0_cca_callback>
     6fa:	f0 91 1b 22 	lds	r31, 0x221B	; 0x80221b <tc_tcc0_cca_callback+0x1>
     6fe:	30 97       	sbiw	r30, 0x00	; 0
     700:	09 f0       	breq	.+2      	; 0x704 <__vector_16+0x34>
		tc_tcc0_cca_callback();
     702:	19 95       	eicall
	}
}
     704:	ff 91       	pop	r31
     706:	ef 91       	pop	r30
     708:	bf 91       	pop	r27
     70a:	af 91       	pop	r26
     70c:	9f 91       	pop	r25
     70e:	8f 91       	pop	r24
     710:	7f 91       	pop	r23
     712:	6f 91       	pop	r22
     714:	5f 91       	pop	r21
     716:	4f 91       	pop	r20
     718:	3f 91       	pop	r19
     71a:	2f 91       	pop	r18
     71c:	0f 90       	pop	r0
     71e:	0b be       	out	0x3b, r0	; 59
     720:	0f 90       	pop	r0
     722:	0f be       	out	0x3f, r0	; 63
     724:	0f 90       	pop	r0
     726:	1f 90       	pop	r1
     728:	18 95       	reti

0000072a <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     72a:	1f 92       	push	r1
     72c:	0f 92       	push	r0
     72e:	0f b6       	in	r0, 0x3f	; 63
     730:	0f 92       	push	r0
     732:	11 24       	eor	r1, r1
     734:	0b b6       	in	r0, 0x3b	; 59
     736:	0f 92       	push	r0
     738:	2f 93       	push	r18
     73a:	3f 93       	push	r19
     73c:	4f 93       	push	r20
     73e:	5f 93       	push	r21
     740:	6f 93       	push	r22
     742:	7f 93       	push	r23
     744:	8f 93       	push	r24
     746:	9f 93       	push	r25
     748:	af 93       	push	r26
     74a:	bf 93       	push	r27
     74c:	ef 93       	push	r30
     74e:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
     750:	e0 91 18 22 	lds	r30, 0x2218	; 0x802218 <tc_tcc0_ccb_callback>
     754:	f0 91 19 22 	lds	r31, 0x2219	; 0x802219 <tc_tcc0_ccb_callback+0x1>
     758:	30 97       	sbiw	r30, 0x00	; 0
     75a:	09 f0       	breq	.+2      	; 0x75e <__vector_17+0x34>
		tc_tcc0_ccb_callback();
     75c:	19 95       	eicall
	}
}
     75e:	ff 91       	pop	r31
     760:	ef 91       	pop	r30
     762:	bf 91       	pop	r27
     764:	af 91       	pop	r26
     766:	9f 91       	pop	r25
     768:	8f 91       	pop	r24
     76a:	7f 91       	pop	r23
     76c:	6f 91       	pop	r22
     76e:	5f 91       	pop	r21
     770:	4f 91       	pop	r20
     772:	3f 91       	pop	r19
     774:	2f 91       	pop	r18
     776:	0f 90       	pop	r0
     778:	0b be       	out	0x3b, r0	; 59
     77a:	0f 90       	pop	r0
     77c:	0f be       	out	0x3f, r0	; 63
     77e:	0f 90       	pop	r0
     780:	1f 90       	pop	r1
     782:	18 95       	reti

00000784 <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     784:	1f 92       	push	r1
     786:	0f 92       	push	r0
     788:	0f b6       	in	r0, 0x3f	; 63
     78a:	0f 92       	push	r0
     78c:	11 24       	eor	r1, r1
     78e:	0b b6       	in	r0, 0x3b	; 59
     790:	0f 92       	push	r0
     792:	2f 93       	push	r18
     794:	3f 93       	push	r19
     796:	4f 93       	push	r20
     798:	5f 93       	push	r21
     79a:	6f 93       	push	r22
     79c:	7f 93       	push	r23
     79e:	8f 93       	push	r24
     7a0:	9f 93       	push	r25
     7a2:	af 93       	push	r26
     7a4:	bf 93       	push	r27
     7a6:	ef 93       	push	r30
     7a8:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
     7aa:	e0 91 16 22 	lds	r30, 0x2216	; 0x802216 <tc_tcc0_ccc_callback>
     7ae:	f0 91 17 22 	lds	r31, 0x2217	; 0x802217 <tc_tcc0_ccc_callback+0x1>
     7b2:	30 97       	sbiw	r30, 0x00	; 0
     7b4:	09 f0       	breq	.+2      	; 0x7b8 <__vector_18+0x34>
		tc_tcc0_ccc_callback();
     7b6:	19 95       	eicall
	}
}
     7b8:	ff 91       	pop	r31
     7ba:	ef 91       	pop	r30
     7bc:	bf 91       	pop	r27
     7be:	af 91       	pop	r26
     7c0:	9f 91       	pop	r25
     7c2:	8f 91       	pop	r24
     7c4:	7f 91       	pop	r23
     7c6:	6f 91       	pop	r22
     7c8:	5f 91       	pop	r21
     7ca:	4f 91       	pop	r20
     7cc:	3f 91       	pop	r19
     7ce:	2f 91       	pop	r18
     7d0:	0f 90       	pop	r0
     7d2:	0b be       	out	0x3b, r0	; 59
     7d4:	0f 90       	pop	r0
     7d6:	0f be       	out	0x3f, r0	; 63
     7d8:	0f 90       	pop	r0
     7da:	1f 90       	pop	r1
     7dc:	18 95       	reti

000007de <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     7de:	1f 92       	push	r1
     7e0:	0f 92       	push	r0
     7e2:	0f b6       	in	r0, 0x3f	; 63
     7e4:	0f 92       	push	r0
     7e6:	11 24       	eor	r1, r1
     7e8:	0b b6       	in	r0, 0x3b	; 59
     7ea:	0f 92       	push	r0
     7ec:	2f 93       	push	r18
     7ee:	3f 93       	push	r19
     7f0:	4f 93       	push	r20
     7f2:	5f 93       	push	r21
     7f4:	6f 93       	push	r22
     7f6:	7f 93       	push	r23
     7f8:	8f 93       	push	r24
     7fa:	9f 93       	push	r25
     7fc:	af 93       	push	r26
     7fe:	bf 93       	push	r27
     800:	ef 93       	push	r30
     802:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
     804:	e0 91 14 22 	lds	r30, 0x2214	; 0x802214 <tc_tcc0_ccd_callback>
     808:	f0 91 15 22 	lds	r31, 0x2215	; 0x802215 <tc_tcc0_ccd_callback+0x1>
     80c:	30 97       	sbiw	r30, 0x00	; 0
     80e:	09 f0       	breq	.+2      	; 0x812 <__vector_19+0x34>
		tc_tcc0_ccd_callback();
     810:	19 95       	eicall
	}
}
     812:	ff 91       	pop	r31
     814:	ef 91       	pop	r30
     816:	bf 91       	pop	r27
     818:	af 91       	pop	r26
     81a:	9f 91       	pop	r25
     81c:	8f 91       	pop	r24
     81e:	7f 91       	pop	r23
     820:	6f 91       	pop	r22
     822:	5f 91       	pop	r21
     824:	4f 91       	pop	r20
     826:	3f 91       	pop	r19
     828:	2f 91       	pop	r18
     82a:	0f 90       	pop	r0
     82c:	0b be       	out	0x3b, r0	; 59
     82e:	0f 90       	pop	r0
     830:	0f be       	out	0x3f, r0	; 63
     832:	0f 90       	pop	r0
     834:	1f 90       	pop	r1
     836:	18 95       	reti

00000838 <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
     838:	1f 92       	push	r1
     83a:	0f 92       	push	r0
     83c:	0f b6       	in	r0, 0x3f	; 63
     83e:	0f 92       	push	r0
     840:	11 24       	eor	r1, r1
     842:	0b b6       	in	r0, 0x3b	; 59
     844:	0f 92       	push	r0
     846:	2f 93       	push	r18
     848:	3f 93       	push	r19
     84a:	4f 93       	push	r20
     84c:	5f 93       	push	r21
     84e:	6f 93       	push	r22
     850:	7f 93       	push	r23
     852:	8f 93       	push	r24
     854:	9f 93       	push	r25
     856:	af 93       	push	r26
     858:	bf 93       	push	r27
     85a:	ef 93       	push	r30
     85c:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
     85e:	e0 91 12 22 	lds	r30, 0x2212	; 0x802212 <tc_tcc1_ovf_callback>
     862:	f0 91 13 22 	lds	r31, 0x2213	; 0x802213 <tc_tcc1_ovf_callback+0x1>
     866:	30 97       	sbiw	r30, 0x00	; 0
     868:	09 f0       	breq	.+2      	; 0x86c <__vector_20+0x34>
		tc_tcc1_ovf_callback();
     86a:	19 95       	eicall
	}
}
     86c:	ff 91       	pop	r31
     86e:	ef 91       	pop	r30
     870:	bf 91       	pop	r27
     872:	af 91       	pop	r26
     874:	9f 91       	pop	r25
     876:	8f 91       	pop	r24
     878:	7f 91       	pop	r23
     87a:	6f 91       	pop	r22
     87c:	5f 91       	pop	r21
     87e:	4f 91       	pop	r20
     880:	3f 91       	pop	r19
     882:	2f 91       	pop	r18
     884:	0f 90       	pop	r0
     886:	0b be       	out	0x3b, r0	; 59
     888:	0f 90       	pop	r0
     88a:	0f be       	out	0x3f, r0	; 63
     88c:	0f 90       	pop	r0
     88e:	1f 90       	pop	r1
     890:	18 95       	reti

00000892 <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
     892:	1f 92       	push	r1
     894:	0f 92       	push	r0
     896:	0f b6       	in	r0, 0x3f	; 63
     898:	0f 92       	push	r0
     89a:	11 24       	eor	r1, r1
     89c:	0b b6       	in	r0, 0x3b	; 59
     89e:	0f 92       	push	r0
     8a0:	2f 93       	push	r18
     8a2:	3f 93       	push	r19
     8a4:	4f 93       	push	r20
     8a6:	5f 93       	push	r21
     8a8:	6f 93       	push	r22
     8aa:	7f 93       	push	r23
     8ac:	8f 93       	push	r24
     8ae:	9f 93       	push	r25
     8b0:	af 93       	push	r26
     8b2:	bf 93       	push	r27
     8b4:	ef 93       	push	r30
     8b6:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
     8b8:	e0 91 10 22 	lds	r30, 0x2210	; 0x802210 <tc_tcc1_err_callback>
     8bc:	f0 91 11 22 	lds	r31, 0x2211	; 0x802211 <tc_tcc1_err_callback+0x1>
     8c0:	30 97       	sbiw	r30, 0x00	; 0
     8c2:	09 f0       	breq	.+2      	; 0x8c6 <__vector_21+0x34>
		tc_tcc1_err_callback();
     8c4:	19 95       	eicall
	}
}
     8c6:	ff 91       	pop	r31
     8c8:	ef 91       	pop	r30
     8ca:	bf 91       	pop	r27
     8cc:	af 91       	pop	r26
     8ce:	9f 91       	pop	r25
     8d0:	8f 91       	pop	r24
     8d2:	7f 91       	pop	r23
     8d4:	6f 91       	pop	r22
     8d6:	5f 91       	pop	r21
     8d8:	4f 91       	pop	r20
     8da:	3f 91       	pop	r19
     8dc:	2f 91       	pop	r18
     8de:	0f 90       	pop	r0
     8e0:	0b be       	out	0x3b, r0	; 59
     8e2:	0f 90       	pop	r0
     8e4:	0f be       	out	0x3f, r0	; 63
     8e6:	0f 90       	pop	r0
     8e8:	1f 90       	pop	r1
     8ea:	18 95       	reti

000008ec <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
     8ec:	1f 92       	push	r1
     8ee:	0f 92       	push	r0
     8f0:	0f b6       	in	r0, 0x3f	; 63
     8f2:	0f 92       	push	r0
     8f4:	11 24       	eor	r1, r1
     8f6:	0b b6       	in	r0, 0x3b	; 59
     8f8:	0f 92       	push	r0
     8fa:	2f 93       	push	r18
     8fc:	3f 93       	push	r19
     8fe:	4f 93       	push	r20
     900:	5f 93       	push	r21
     902:	6f 93       	push	r22
     904:	7f 93       	push	r23
     906:	8f 93       	push	r24
     908:	9f 93       	push	r25
     90a:	af 93       	push	r26
     90c:	bf 93       	push	r27
     90e:	ef 93       	push	r30
     910:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
     912:	e0 91 0e 22 	lds	r30, 0x220E	; 0x80220e <tc_tcc1_cca_callback>
     916:	f0 91 0f 22 	lds	r31, 0x220F	; 0x80220f <tc_tcc1_cca_callback+0x1>
     91a:	30 97       	sbiw	r30, 0x00	; 0
     91c:	09 f0       	breq	.+2      	; 0x920 <__vector_22+0x34>
		tc_tcc1_cca_callback();
     91e:	19 95       	eicall
	}
}
     920:	ff 91       	pop	r31
     922:	ef 91       	pop	r30
     924:	bf 91       	pop	r27
     926:	af 91       	pop	r26
     928:	9f 91       	pop	r25
     92a:	8f 91       	pop	r24
     92c:	7f 91       	pop	r23
     92e:	6f 91       	pop	r22
     930:	5f 91       	pop	r21
     932:	4f 91       	pop	r20
     934:	3f 91       	pop	r19
     936:	2f 91       	pop	r18
     938:	0f 90       	pop	r0
     93a:	0b be       	out	0x3b, r0	; 59
     93c:	0f 90       	pop	r0
     93e:	0f be       	out	0x3f, r0	; 63
     940:	0f 90       	pop	r0
     942:	1f 90       	pop	r1
     944:	18 95       	reti

00000946 <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
     946:	1f 92       	push	r1
     948:	0f 92       	push	r0
     94a:	0f b6       	in	r0, 0x3f	; 63
     94c:	0f 92       	push	r0
     94e:	11 24       	eor	r1, r1
     950:	0b b6       	in	r0, 0x3b	; 59
     952:	0f 92       	push	r0
     954:	2f 93       	push	r18
     956:	3f 93       	push	r19
     958:	4f 93       	push	r20
     95a:	5f 93       	push	r21
     95c:	6f 93       	push	r22
     95e:	7f 93       	push	r23
     960:	8f 93       	push	r24
     962:	9f 93       	push	r25
     964:	af 93       	push	r26
     966:	bf 93       	push	r27
     968:	ef 93       	push	r30
     96a:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
     96c:	e0 91 0c 22 	lds	r30, 0x220C	; 0x80220c <tc_tcc1_ccb_callback>
     970:	f0 91 0d 22 	lds	r31, 0x220D	; 0x80220d <tc_tcc1_ccb_callback+0x1>
     974:	30 97       	sbiw	r30, 0x00	; 0
     976:	09 f0       	breq	.+2      	; 0x97a <__vector_23+0x34>
		tc_tcc1_ccb_callback();
     978:	19 95       	eicall
	}
}
     97a:	ff 91       	pop	r31
     97c:	ef 91       	pop	r30
     97e:	bf 91       	pop	r27
     980:	af 91       	pop	r26
     982:	9f 91       	pop	r25
     984:	8f 91       	pop	r24
     986:	7f 91       	pop	r23
     988:	6f 91       	pop	r22
     98a:	5f 91       	pop	r21
     98c:	4f 91       	pop	r20
     98e:	3f 91       	pop	r19
     990:	2f 91       	pop	r18
     992:	0f 90       	pop	r0
     994:	0b be       	out	0x3b, r0	; 59
     996:	0f 90       	pop	r0
     998:	0f be       	out	0x3f, r0	; 63
     99a:	0f 90       	pop	r0
     99c:	1f 90       	pop	r1
     99e:	18 95       	reti

000009a0 <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
     9a0:	1f 92       	push	r1
     9a2:	0f 92       	push	r0
     9a4:	0f b6       	in	r0, 0x3f	; 63
     9a6:	0f 92       	push	r0
     9a8:	11 24       	eor	r1, r1
     9aa:	0b b6       	in	r0, 0x3b	; 59
     9ac:	0f 92       	push	r0
     9ae:	2f 93       	push	r18
     9b0:	3f 93       	push	r19
     9b2:	4f 93       	push	r20
     9b4:	5f 93       	push	r21
     9b6:	6f 93       	push	r22
     9b8:	7f 93       	push	r23
     9ba:	8f 93       	push	r24
     9bc:	9f 93       	push	r25
     9be:	af 93       	push	r26
     9c0:	bf 93       	push	r27
     9c2:	ef 93       	push	r30
     9c4:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
     9c6:	e0 91 0a 22 	lds	r30, 0x220A	; 0x80220a <tc_tcd0_ovf_callback>
     9ca:	f0 91 0b 22 	lds	r31, 0x220B	; 0x80220b <tc_tcd0_ovf_callback+0x1>
     9ce:	30 97       	sbiw	r30, 0x00	; 0
     9d0:	09 f0       	breq	.+2      	; 0x9d4 <__vector_77+0x34>
		tc_tcd0_ovf_callback();
     9d2:	19 95       	eicall
	}
}
     9d4:	ff 91       	pop	r31
     9d6:	ef 91       	pop	r30
     9d8:	bf 91       	pop	r27
     9da:	af 91       	pop	r26
     9dc:	9f 91       	pop	r25
     9de:	8f 91       	pop	r24
     9e0:	7f 91       	pop	r23
     9e2:	6f 91       	pop	r22
     9e4:	5f 91       	pop	r21
     9e6:	4f 91       	pop	r20
     9e8:	3f 91       	pop	r19
     9ea:	2f 91       	pop	r18
     9ec:	0f 90       	pop	r0
     9ee:	0b be       	out	0x3b, r0	; 59
     9f0:	0f 90       	pop	r0
     9f2:	0f be       	out	0x3f, r0	; 63
     9f4:	0f 90       	pop	r0
     9f6:	1f 90       	pop	r1
     9f8:	18 95       	reti

000009fa <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
     9fa:	1f 92       	push	r1
     9fc:	0f 92       	push	r0
     9fe:	0f b6       	in	r0, 0x3f	; 63
     a00:	0f 92       	push	r0
     a02:	11 24       	eor	r1, r1
     a04:	0b b6       	in	r0, 0x3b	; 59
     a06:	0f 92       	push	r0
     a08:	2f 93       	push	r18
     a0a:	3f 93       	push	r19
     a0c:	4f 93       	push	r20
     a0e:	5f 93       	push	r21
     a10:	6f 93       	push	r22
     a12:	7f 93       	push	r23
     a14:	8f 93       	push	r24
     a16:	9f 93       	push	r25
     a18:	af 93       	push	r26
     a1a:	bf 93       	push	r27
     a1c:	ef 93       	push	r30
     a1e:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
     a20:	e0 91 08 22 	lds	r30, 0x2208	; 0x802208 <tc_tcd0_err_callback>
     a24:	f0 91 09 22 	lds	r31, 0x2209	; 0x802209 <tc_tcd0_err_callback+0x1>
     a28:	30 97       	sbiw	r30, 0x00	; 0
     a2a:	09 f0       	breq	.+2      	; 0xa2e <__vector_78+0x34>
		tc_tcd0_err_callback();
     a2c:	19 95       	eicall
	}
}
     a2e:	ff 91       	pop	r31
     a30:	ef 91       	pop	r30
     a32:	bf 91       	pop	r27
     a34:	af 91       	pop	r26
     a36:	9f 91       	pop	r25
     a38:	8f 91       	pop	r24
     a3a:	7f 91       	pop	r23
     a3c:	6f 91       	pop	r22
     a3e:	5f 91       	pop	r21
     a40:	4f 91       	pop	r20
     a42:	3f 91       	pop	r19
     a44:	2f 91       	pop	r18
     a46:	0f 90       	pop	r0
     a48:	0b be       	out	0x3b, r0	; 59
     a4a:	0f 90       	pop	r0
     a4c:	0f be       	out	0x3f, r0	; 63
     a4e:	0f 90       	pop	r0
     a50:	1f 90       	pop	r1
     a52:	18 95       	reti

00000a54 <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
     a54:	1f 92       	push	r1
     a56:	0f 92       	push	r0
     a58:	0f b6       	in	r0, 0x3f	; 63
     a5a:	0f 92       	push	r0
     a5c:	11 24       	eor	r1, r1
     a5e:	0b b6       	in	r0, 0x3b	; 59
     a60:	0f 92       	push	r0
     a62:	2f 93       	push	r18
     a64:	3f 93       	push	r19
     a66:	4f 93       	push	r20
     a68:	5f 93       	push	r21
     a6a:	6f 93       	push	r22
     a6c:	7f 93       	push	r23
     a6e:	8f 93       	push	r24
     a70:	9f 93       	push	r25
     a72:	af 93       	push	r26
     a74:	bf 93       	push	r27
     a76:	ef 93       	push	r30
     a78:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
     a7a:	e0 91 06 22 	lds	r30, 0x2206	; 0x802206 <tc_tcd0_cca_callback>
     a7e:	f0 91 07 22 	lds	r31, 0x2207	; 0x802207 <tc_tcd0_cca_callback+0x1>
     a82:	30 97       	sbiw	r30, 0x00	; 0
     a84:	09 f0       	breq	.+2      	; 0xa88 <__vector_79+0x34>
		tc_tcd0_cca_callback();
     a86:	19 95       	eicall
	}
}
     a88:	ff 91       	pop	r31
     a8a:	ef 91       	pop	r30
     a8c:	bf 91       	pop	r27
     a8e:	af 91       	pop	r26
     a90:	9f 91       	pop	r25
     a92:	8f 91       	pop	r24
     a94:	7f 91       	pop	r23
     a96:	6f 91       	pop	r22
     a98:	5f 91       	pop	r21
     a9a:	4f 91       	pop	r20
     a9c:	3f 91       	pop	r19
     a9e:	2f 91       	pop	r18
     aa0:	0f 90       	pop	r0
     aa2:	0b be       	out	0x3b, r0	; 59
     aa4:	0f 90       	pop	r0
     aa6:	0f be       	out	0x3f, r0	; 63
     aa8:	0f 90       	pop	r0
     aaa:	1f 90       	pop	r1
     aac:	18 95       	reti

00000aae <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
     aae:	1f 92       	push	r1
     ab0:	0f 92       	push	r0
     ab2:	0f b6       	in	r0, 0x3f	; 63
     ab4:	0f 92       	push	r0
     ab6:	11 24       	eor	r1, r1
     ab8:	0b b6       	in	r0, 0x3b	; 59
     aba:	0f 92       	push	r0
     abc:	2f 93       	push	r18
     abe:	3f 93       	push	r19
     ac0:	4f 93       	push	r20
     ac2:	5f 93       	push	r21
     ac4:	6f 93       	push	r22
     ac6:	7f 93       	push	r23
     ac8:	8f 93       	push	r24
     aca:	9f 93       	push	r25
     acc:	af 93       	push	r26
     ace:	bf 93       	push	r27
     ad0:	ef 93       	push	r30
     ad2:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
     ad4:	e0 91 04 22 	lds	r30, 0x2204	; 0x802204 <tc_tcd0_ccb_callback>
     ad8:	f0 91 05 22 	lds	r31, 0x2205	; 0x802205 <tc_tcd0_ccb_callback+0x1>
     adc:	30 97       	sbiw	r30, 0x00	; 0
     ade:	09 f0       	breq	.+2      	; 0xae2 <__vector_80+0x34>
		tc_tcd0_ccb_callback();
     ae0:	19 95       	eicall
	}
}
     ae2:	ff 91       	pop	r31
     ae4:	ef 91       	pop	r30
     ae6:	bf 91       	pop	r27
     ae8:	af 91       	pop	r26
     aea:	9f 91       	pop	r25
     aec:	8f 91       	pop	r24
     aee:	7f 91       	pop	r23
     af0:	6f 91       	pop	r22
     af2:	5f 91       	pop	r21
     af4:	4f 91       	pop	r20
     af6:	3f 91       	pop	r19
     af8:	2f 91       	pop	r18
     afa:	0f 90       	pop	r0
     afc:	0b be       	out	0x3b, r0	; 59
     afe:	0f 90       	pop	r0
     b00:	0f be       	out	0x3f, r0	; 63
     b02:	0f 90       	pop	r0
     b04:	1f 90       	pop	r1
     b06:	18 95       	reti

00000b08 <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
     b08:	1f 92       	push	r1
     b0a:	0f 92       	push	r0
     b0c:	0f b6       	in	r0, 0x3f	; 63
     b0e:	0f 92       	push	r0
     b10:	11 24       	eor	r1, r1
     b12:	0b b6       	in	r0, 0x3b	; 59
     b14:	0f 92       	push	r0
     b16:	2f 93       	push	r18
     b18:	3f 93       	push	r19
     b1a:	4f 93       	push	r20
     b1c:	5f 93       	push	r21
     b1e:	6f 93       	push	r22
     b20:	7f 93       	push	r23
     b22:	8f 93       	push	r24
     b24:	9f 93       	push	r25
     b26:	af 93       	push	r26
     b28:	bf 93       	push	r27
     b2a:	ef 93       	push	r30
     b2c:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
     b2e:	e0 91 02 22 	lds	r30, 0x2202	; 0x802202 <tc_tcd0_ccc_callback>
     b32:	f0 91 03 22 	lds	r31, 0x2203	; 0x802203 <tc_tcd0_ccc_callback+0x1>
     b36:	30 97       	sbiw	r30, 0x00	; 0
     b38:	09 f0       	breq	.+2      	; 0xb3c <__vector_81+0x34>
		tc_tcd0_ccc_callback();
     b3a:	19 95       	eicall
	}
}
     b3c:	ff 91       	pop	r31
     b3e:	ef 91       	pop	r30
     b40:	bf 91       	pop	r27
     b42:	af 91       	pop	r26
     b44:	9f 91       	pop	r25
     b46:	8f 91       	pop	r24
     b48:	7f 91       	pop	r23
     b4a:	6f 91       	pop	r22
     b4c:	5f 91       	pop	r21
     b4e:	4f 91       	pop	r20
     b50:	3f 91       	pop	r19
     b52:	2f 91       	pop	r18
     b54:	0f 90       	pop	r0
     b56:	0b be       	out	0x3b, r0	; 59
     b58:	0f 90       	pop	r0
     b5a:	0f be       	out	0x3f, r0	; 63
     b5c:	0f 90       	pop	r0
     b5e:	1f 90       	pop	r1
     b60:	18 95       	reti

00000b62 <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
     b62:	1f 92       	push	r1
     b64:	0f 92       	push	r0
     b66:	0f b6       	in	r0, 0x3f	; 63
     b68:	0f 92       	push	r0
     b6a:	11 24       	eor	r1, r1
     b6c:	0b b6       	in	r0, 0x3b	; 59
     b6e:	0f 92       	push	r0
     b70:	2f 93       	push	r18
     b72:	3f 93       	push	r19
     b74:	4f 93       	push	r20
     b76:	5f 93       	push	r21
     b78:	6f 93       	push	r22
     b7a:	7f 93       	push	r23
     b7c:	8f 93       	push	r24
     b7e:	9f 93       	push	r25
     b80:	af 93       	push	r26
     b82:	bf 93       	push	r27
     b84:	ef 93       	push	r30
     b86:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
     b88:	e0 91 00 22 	lds	r30, 0x2200	; 0x802200 <tc_tcd0_ccd_callback>
     b8c:	f0 91 01 22 	lds	r31, 0x2201	; 0x802201 <tc_tcd0_ccd_callback+0x1>
     b90:	30 97       	sbiw	r30, 0x00	; 0
     b92:	09 f0       	breq	.+2      	; 0xb96 <__vector_82+0x34>
		tc_tcd0_ccd_callback();
     b94:	19 95       	eicall
	}
}
     b96:	ff 91       	pop	r31
     b98:	ef 91       	pop	r30
     b9a:	bf 91       	pop	r27
     b9c:	af 91       	pop	r26
     b9e:	9f 91       	pop	r25
     ba0:	8f 91       	pop	r24
     ba2:	7f 91       	pop	r23
     ba4:	6f 91       	pop	r22
     ba6:	5f 91       	pop	r21
     ba8:	4f 91       	pop	r20
     baa:	3f 91       	pop	r19
     bac:	2f 91       	pop	r18
     bae:	0f 90       	pop	r0
     bb0:	0b be       	out	0x3b, r0	; 59
     bb2:	0f 90       	pop	r0
     bb4:	0f be       	out	0x3f, r0	; 63
     bb6:	0f 90       	pop	r0
     bb8:	1f 90       	pop	r1
     bba:	18 95       	reti

00000bbc <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
     bbc:	1f 92       	push	r1
     bbe:	0f 92       	push	r0
     bc0:	0f b6       	in	r0, 0x3f	; 63
     bc2:	0f 92       	push	r0
     bc4:	11 24       	eor	r1, r1
     bc6:	0b b6       	in	r0, 0x3b	; 59
     bc8:	0f 92       	push	r0
     bca:	2f 93       	push	r18
     bcc:	3f 93       	push	r19
     bce:	4f 93       	push	r20
     bd0:	5f 93       	push	r21
     bd2:	6f 93       	push	r22
     bd4:	7f 93       	push	r23
     bd6:	8f 93       	push	r24
     bd8:	9f 93       	push	r25
     bda:	af 93       	push	r26
     bdc:	bf 93       	push	r27
     bde:	ef 93       	push	r30
     be0:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
     be2:	e0 91 fe 21 	lds	r30, 0x21FE	; 0x8021fe <tc_tcd1_ovf_callback>
     be6:	f0 91 ff 21 	lds	r31, 0x21FF	; 0x8021ff <tc_tcd1_ovf_callback+0x1>
     bea:	30 97       	sbiw	r30, 0x00	; 0
     bec:	09 f0       	breq	.+2      	; 0xbf0 <__vector_83+0x34>
		tc_tcd1_ovf_callback();
     bee:	19 95       	eicall
	}
}
     bf0:	ff 91       	pop	r31
     bf2:	ef 91       	pop	r30
     bf4:	bf 91       	pop	r27
     bf6:	af 91       	pop	r26
     bf8:	9f 91       	pop	r25
     bfa:	8f 91       	pop	r24
     bfc:	7f 91       	pop	r23
     bfe:	6f 91       	pop	r22
     c00:	5f 91       	pop	r21
     c02:	4f 91       	pop	r20
     c04:	3f 91       	pop	r19
     c06:	2f 91       	pop	r18
     c08:	0f 90       	pop	r0
     c0a:	0b be       	out	0x3b, r0	; 59
     c0c:	0f 90       	pop	r0
     c0e:	0f be       	out	0x3f, r0	; 63
     c10:	0f 90       	pop	r0
     c12:	1f 90       	pop	r1
     c14:	18 95       	reti

00000c16 <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
     c16:	1f 92       	push	r1
     c18:	0f 92       	push	r0
     c1a:	0f b6       	in	r0, 0x3f	; 63
     c1c:	0f 92       	push	r0
     c1e:	11 24       	eor	r1, r1
     c20:	0b b6       	in	r0, 0x3b	; 59
     c22:	0f 92       	push	r0
     c24:	2f 93       	push	r18
     c26:	3f 93       	push	r19
     c28:	4f 93       	push	r20
     c2a:	5f 93       	push	r21
     c2c:	6f 93       	push	r22
     c2e:	7f 93       	push	r23
     c30:	8f 93       	push	r24
     c32:	9f 93       	push	r25
     c34:	af 93       	push	r26
     c36:	bf 93       	push	r27
     c38:	ef 93       	push	r30
     c3a:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
     c3c:	e0 91 fc 21 	lds	r30, 0x21FC	; 0x8021fc <tc_tcd1_err_callback>
     c40:	f0 91 fd 21 	lds	r31, 0x21FD	; 0x8021fd <tc_tcd1_err_callback+0x1>
     c44:	30 97       	sbiw	r30, 0x00	; 0
     c46:	09 f0       	breq	.+2      	; 0xc4a <__vector_84+0x34>
		tc_tcd1_err_callback();
     c48:	19 95       	eicall
	}
}
     c4a:	ff 91       	pop	r31
     c4c:	ef 91       	pop	r30
     c4e:	bf 91       	pop	r27
     c50:	af 91       	pop	r26
     c52:	9f 91       	pop	r25
     c54:	8f 91       	pop	r24
     c56:	7f 91       	pop	r23
     c58:	6f 91       	pop	r22
     c5a:	5f 91       	pop	r21
     c5c:	4f 91       	pop	r20
     c5e:	3f 91       	pop	r19
     c60:	2f 91       	pop	r18
     c62:	0f 90       	pop	r0
     c64:	0b be       	out	0x3b, r0	; 59
     c66:	0f 90       	pop	r0
     c68:	0f be       	out	0x3f, r0	; 63
     c6a:	0f 90       	pop	r0
     c6c:	1f 90       	pop	r1
     c6e:	18 95       	reti

00000c70 <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
     c70:	1f 92       	push	r1
     c72:	0f 92       	push	r0
     c74:	0f b6       	in	r0, 0x3f	; 63
     c76:	0f 92       	push	r0
     c78:	11 24       	eor	r1, r1
     c7a:	0b b6       	in	r0, 0x3b	; 59
     c7c:	0f 92       	push	r0
     c7e:	2f 93       	push	r18
     c80:	3f 93       	push	r19
     c82:	4f 93       	push	r20
     c84:	5f 93       	push	r21
     c86:	6f 93       	push	r22
     c88:	7f 93       	push	r23
     c8a:	8f 93       	push	r24
     c8c:	9f 93       	push	r25
     c8e:	af 93       	push	r26
     c90:	bf 93       	push	r27
     c92:	ef 93       	push	r30
     c94:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
     c96:	e0 91 fa 21 	lds	r30, 0x21FA	; 0x8021fa <tc_tcd1_cca_callback>
     c9a:	f0 91 fb 21 	lds	r31, 0x21FB	; 0x8021fb <tc_tcd1_cca_callback+0x1>
     c9e:	30 97       	sbiw	r30, 0x00	; 0
     ca0:	09 f0       	breq	.+2      	; 0xca4 <__vector_85+0x34>
		tc_tcd1_cca_callback();
     ca2:	19 95       	eicall
	}
}
     ca4:	ff 91       	pop	r31
     ca6:	ef 91       	pop	r30
     ca8:	bf 91       	pop	r27
     caa:	af 91       	pop	r26
     cac:	9f 91       	pop	r25
     cae:	8f 91       	pop	r24
     cb0:	7f 91       	pop	r23
     cb2:	6f 91       	pop	r22
     cb4:	5f 91       	pop	r21
     cb6:	4f 91       	pop	r20
     cb8:	3f 91       	pop	r19
     cba:	2f 91       	pop	r18
     cbc:	0f 90       	pop	r0
     cbe:	0b be       	out	0x3b, r0	; 59
     cc0:	0f 90       	pop	r0
     cc2:	0f be       	out	0x3f, r0	; 63
     cc4:	0f 90       	pop	r0
     cc6:	1f 90       	pop	r1
     cc8:	18 95       	reti

00000cca <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
     cca:	1f 92       	push	r1
     ccc:	0f 92       	push	r0
     cce:	0f b6       	in	r0, 0x3f	; 63
     cd0:	0f 92       	push	r0
     cd2:	11 24       	eor	r1, r1
     cd4:	0b b6       	in	r0, 0x3b	; 59
     cd6:	0f 92       	push	r0
     cd8:	2f 93       	push	r18
     cda:	3f 93       	push	r19
     cdc:	4f 93       	push	r20
     cde:	5f 93       	push	r21
     ce0:	6f 93       	push	r22
     ce2:	7f 93       	push	r23
     ce4:	8f 93       	push	r24
     ce6:	9f 93       	push	r25
     ce8:	af 93       	push	r26
     cea:	bf 93       	push	r27
     cec:	ef 93       	push	r30
     cee:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
     cf0:	e0 91 f8 21 	lds	r30, 0x21F8	; 0x8021f8 <tc_tcd1_ccb_callback>
     cf4:	f0 91 f9 21 	lds	r31, 0x21F9	; 0x8021f9 <tc_tcd1_ccb_callback+0x1>
     cf8:	30 97       	sbiw	r30, 0x00	; 0
     cfa:	09 f0       	breq	.+2      	; 0xcfe <__vector_86+0x34>
		tc_tcd1_ccb_callback();
     cfc:	19 95       	eicall
	}
}
     cfe:	ff 91       	pop	r31
     d00:	ef 91       	pop	r30
     d02:	bf 91       	pop	r27
     d04:	af 91       	pop	r26
     d06:	9f 91       	pop	r25
     d08:	8f 91       	pop	r24
     d0a:	7f 91       	pop	r23
     d0c:	6f 91       	pop	r22
     d0e:	5f 91       	pop	r21
     d10:	4f 91       	pop	r20
     d12:	3f 91       	pop	r19
     d14:	2f 91       	pop	r18
     d16:	0f 90       	pop	r0
     d18:	0b be       	out	0x3b, r0	; 59
     d1a:	0f 90       	pop	r0
     d1c:	0f be       	out	0x3f, r0	; 63
     d1e:	0f 90       	pop	r0
     d20:	1f 90       	pop	r1
     d22:	18 95       	reti

00000d24 <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
     d24:	1f 92       	push	r1
     d26:	0f 92       	push	r0
     d28:	0f b6       	in	r0, 0x3f	; 63
     d2a:	0f 92       	push	r0
     d2c:	11 24       	eor	r1, r1
     d2e:	0b b6       	in	r0, 0x3b	; 59
     d30:	0f 92       	push	r0
     d32:	2f 93       	push	r18
     d34:	3f 93       	push	r19
     d36:	4f 93       	push	r20
     d38:	5f 93       	push	r21
     d3a:	6f 93       	push	r22
     d3c:	7f 93       	push	r23
     d3e:	8f 93       	push	r24
     d40:	9f 93       	push	r25
     d42:	af 93       	push	r26
     d44:	bf 93       	push	r27
     d46:	ef 93       	push	r30
     d48:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
     d4a:	e0 91 f6 21 	lds	r30, 0x21F6	; 0x8021f6 <tc_tce0_ovf_callback>
     d4e:	f0 91 f7 21 	lds	r31, 0x21F7	; 0x8021f7 <tc_tce0_ovf_callback+0x1>
     d52:	30 97       	sbiw	r30, 0x00	; 0
     d54:	09 f0       	breq	.+2      	; 0xd58 <__vector_47+0x34>
		tc_tce0_ovf_callback();
     d56:	19 95       	eicall
	}
}
     d58:	ff 91       	pop	r31
     d5a:	ef 91       	pop	r30
     d5c:	bf 91       	pop	r27
     d5e:	af 91       	pop	r26
     d60:	9f 91       	pop	r25
     d62:	8f 91       	pop	r24
     d64:	7f 91       	pop	r23
     d66:	6f 91       	pop	r22
     d68:	5f 91       	pop	r21
     d6a:	4f 91       	pop	r20
     d6c:	3f 91       	pop	r19
     d6e:	2f 91       	pop	r18
     d70:	0f 90       	pop	r0
     d72:	0b be       	out	0x3b, r0	; 59
     d74:	0f 90       	pop	r0
     d76:	0f be       	out	0x3f, r0	; 63
     d78:	0f 90       	pop	r0
     d7a:	1f 90       	pop	r1
     d7c:	18 95       	reti

00000d7e <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
     d7e:	1f 92       	push	r1
     d80:	0f 92       	push	r0
     d82:	0f b6       	in	r0, 0x3f	; 63
     d84:	0f 92       	push	r0
     d86:	11 24       	eor	r1, r1
     d88:	0b b6       	in	r0, 0x3b	; 59
     d8a:	0f 92       	push	r0
     d8c:	2f 93       	push	r18
     d8e:	3f 93       	push	r19
     d90:	4f 93       	push	r20
     d92:	5f 93       	push	r21
     d94:	6f 93       	push	r22
     d96:	7f 93       	push	r23
     d98:	8f 93       	push	r24
     d9a:	9f 93       	push	r25
     d9c:	af 93       	push	r26
     d9e:	bf 93       	push	r27
     da0:	ef 93       	push	r30
     da2:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
     da4:	e0 91 f4 21 	lds	r30, 0x21F4	; 0x8021f4 <tc_tce0_err_callback>
     da8:	f0 91 f5 21 	lds	r31, 0x21F5	; 0x8021f5 <tc_tce0_err_callback+0x1>
     dac:	30 97       	sbiw	r30, 0x00	; 0
     dae:	09 f0       	breq	.+2      	; 0xdb2 <__vector_48+0x34>
		tc_tce0_err_callback();
     db0:	19 95       	eicall
	}
}
     db2:	ff 91       	pop	r31
     db4:	ef 91       	pop	r30
     db6:	bf 91       	pop	r27
     db8:	af 91       	pop	r26
     dba:	9f 91       	pop	r25
     dbc:	8f 91       	pop	r24
     dbe:	7f 91       	pop	r23
     dc0:	6f 91       	pop	r22
     dc2:	5f 91       	pop	r21
     dc4:	4f 91       	pop	r20
     dc6:	3f 91       	pop	r19
     dc8:	2f 91       	pop	r18
     dca:	0f 90       	pop	r0
     dcc:	0b be       	out	0x3b, r0	; 59
     dce:	0f 90       	pop	r0
     dd0:	0f be       	out	0x3f, r0	; 63
     dd2:	0f 90       	pop	r0
     dd4:	1f 90       	pop	r1
     dd6:	18 95       	reti

00000dd8 <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
     dd8:	1f 92       	push	r1
     dda:	0f 92       	push	r0
     ddc:	0f b6       	in	r0, 0x3f	; 63
     dde:	0f 92       	push	r0
     de0:	11 24       	eor	r1, r1
     de2:	0b b6       	in	r0, 0x3b	; 59
     de4:	0f 92       	push	r0
     de6:	2f 93       	push	r18
     de8:	3f 93       	push	r19
     dea:	4f 93       	push	r20
     dec:	5f 93       	push	r21
     dee:	6f 93       	push	r22
     df0:	7f 93       	push	r23
     df2:	8f 93       	push	r24
     df4:	9f 93       	push	r25
     df6:	af 93       	push	r26
     df8:	bf 93       	push	r27
     dfa:	ef 93       	push	r30
     dfc:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
     dfe:	e0 91 f2 21 	lds	r30, 0x21F2	; 0x8021f2 <tc_tce0_cca_callback>
     e02:	f0 91 f3 21 	lds	r31, 0x21F3	; 0x8021f3 <tc_tce0_cca_callback+0x1>
     e06:	30 97       	sbiw	r30, 0x00	; 0
     e08:	09 f0       	breq	.+2      	; 0xe0c <__vector_49+0x34>
		tc_tce0_cca_callback();
     e0a:	19 95       	eicall
	}
}
     e0c:	ff 91       	pop	r31
     e0e:	ef 91       	pop	r30
     e10:	bf 91       	pop	r27
     e12:	af 91       	pop	r26
     e14:	9f 91       	pop	r25
     e16:	8f 91       	pop	r24
     e18:	7f 91       	pop	r23
     e1a:	6f 91       	pop	r22
     e1c:	5f 91       	pop	r21
     e1e:	4f 91       	pop	r20
     e20:	3f 91       	pop	r19
     e22:	2f 91       	pop	r18
     e24:	0f 90       	pop	r0
     e26:	0b be       	out	0x3b, r0	; 59
     e28:	0f 90       	pop	r0
     e2a:	0f be       	out	0x3f, r0	; 63
     e2c:	0f 90       	pop	r0
     e2e:	1f 90       	pop	r1
     e30:	18 95       	reti

00000e32 <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
     e32:	1f 92       	push	r1
     e34:	0f 92       	push	r0
     e36:	0f b6       	in	r0, 0x3f	; 63
     e38:	0f 92       	push	r0
     e3a:	11 24       	eor	r1, r1
     e3c:	0b b6       	in	r0, 0x3b	; 59
     e3e:	0f 92       	push	r0
     e40:	2f 93       	push	r18
     e42:	3f 93       	push	r19
     e44:	4f 93       	push	r20
     e46:	5f 93       	push	r21
     e48:	6f 93       	push	r22
     e4a:	7f 93       	push	r23
     e4c:	8f 93       	push	r24
     e4e:	9f 93       	push	r25
     e50:	af 93       	push	r26
     e52:	bf 93       	push	r27
     e54:	ef 93       	push	r30
     e56:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
     e58:	e0 91 f0 21 	lds	r30, 0x21F0	; 0x8021f0 <tc_tce0_ccb_callback>
     e5c:	f0 91 f1 21 	lds	r31, 0x21F1	; 0x8021f1 <tc_tce0_ccb_callback+0x1>
     e60:	30 97       	sbiw	r30, 0x00	; 0
     e62:	09 f0       	breq	.+2      	; 0xe66 <__vector_50+0x34>
		tc_tce0_ccb_callback();
     e64:	19 95       	eicall
	}
}
     e66:	ff 91       	pop	r31
     e68:	ef 91       	pop	r30
     e6a:	bf 91       	pop	r27
     e6c:	af 91       	pop	r26
     e6e:	9f 91       	pop	r25
     e70:	8f 91       	pop	r24
     e72:	7f 91       	pop	r23
     e74:	6f 91       	pop	r22
     e76:	5f 91       	pop	r21
     e78:	4f 91       	pop	r20
     e7a:	3f 91       	pop	r19
     e7c:	2f 91       	pop	r18
     e7e:	0f 90       	pop	r0
     e80:	0b be       	out	0x3b, r0	; 59
     e82:	0f 90       	pop	r0
     e84:	0f be       	out	0x3f, r0	; 63
     e86:	0f 90       	pop	r0
     e88:	1f 90       	pop	r1
     e8a:	18 95       	reti

00000e8c <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
     e8c:	1f 92       	push	r1
     e8e:	0f 92       	push	r0
     e90:	0f b6       	in	r0, 0x3f	; 63
     e92:	0f 92       	push	r0
     e94:	11 24       	eor	r1, r1
     e96:	0b b6       	in	r0, 0x3b	; 59
     e98:	0f 92       	push	r0
     e9a:	2f 93       	push	r18
     e9c:	3f 93       	push	r19
     e9e:	4f 93       	push	r20
     ea0:	5f 93       	push	r21
     ea2:	6f 93       	push	r22
     ea4:	7f 93       	push	r23
     ea6:	8f 93       	push	r24
     ea8:	9f 93       	push	r25
     eaa:	af 93       	push	r26
     eac:	bf 93       	push	r27
     eae:	ef 93       	push	r30
     eb0:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
     eb2:	e0 91 ee 21 	lds	r30, 0x21EE	; 0x8021ee <tc_tce0_ccc_callback>
     eb6:	f0 91 ef 21 	lds	r31, 0x21EF	; 0x8021ef <tc_tce0_ccc_callback+0x1>
     eba:	30 97       	sbiw	r30, 0x00	; 0
     ebc:	09 f0       	breq	.+2      	; 0xec0 <__vector_51+0x34>
		tc_tce0_ccc_callback();
     ebe:	19 95       	eicall
	}
}
     ec0:	ff 91       	pop	r31
     ec2:	ef 91       	pop	r30
     ec4:	bf 91       	pop	r27
     ec6:	af 91       	pop	r26
     ec8:	9f 91       	pop	r25
     eca:	8f 91       	pop	r24
     ecc:	7f 91       	pop	r23
     ece:	6f 91       	pop	r22
     ed0:	5f 91       	pop	r21
     ed2:	4f 91       	pop	r20
     ed4:	3f 91       	pop	r19
     ed6:	2f 91       	pop	r18
     ed8:	0f 90       	pop	r0
     eda:	0b be       	out	0x3b, r0	; 59
     edc:	0f 90       	pop	r0
     ede:	0f be       	out	0x3f, r0	; 63
     ee0:	0f 90       	pop	r0
     ee2:	1f 90       	pop	r1
     ee4:	18 95       	reti

00000ee6 <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
     ee6:	1f 92       	push	r1
     ee8:	0f 92       	push	r0
     eea:	0f b6       	in	r0, 0x3f	; 63
     eec:	0f 92       	push	r0
     eee:	11 24       	eor	r1, r1
     ef0:	0b b6       	in	r0, 0x3b	; 59
     ef2:	0f 92       	push	r0
     ef4:	2f 93       	push	r18
     ef6:	3f 93       	push	r19
     ef8:	4f 93       	push	r20
     efa:	5f 93       	push	r21
     efc:	6f 93       	push	r22
     efe:	7f 93       	push	r23
     f00:	8f 93       	push	r24
     f02:	9f 93       	push	r25
     f04:	af 93       	push	r26
     f06:	bf 93       	push	r27
     f08:	ef 93       	push	r30
     f0a:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
     f0c:	e0 91 ec 21 	lds	r30, 0x21EC	; 0x8021ec <tc_tce0_ccd_callback>
     f10:	f0 91 ed 21 	lds	r31, 0x21ED	; 0x8021ed <tc_tce0_ccd_callback+0x1>
     f14:	30 97       	sbiw	r30, 0x00	; 0
     f16:	09 f0       	breq	.+2      	; 0xf1a <__vector_52+0x34>
		tc_tce0_ccd_callback();
     f18:	19 95       	eicall
	}
}
     f1a:	ff 91       	pop	r31
     f1c:	ef 91       	pop	r30
     f1e:	bf 91       	pop	r27
     f20:	af 91       	pop	r26
     f22:	9f 91       	pop	r25
     f24:	8f 91       	pop	r24
     f26:	7f 91       	pop	r23
     f28:	6f 91       	pop	r22
     f2a:	5f 91       	pop	r21
     f2c:	4f 91       	pop	r20
     f2e:	3f 91       	pop	r19
     f30:	2f 91       	pop	r18
     f32:	0f 90       	pop	r0
     f34:	0b be       	out	0x3b, r0	; 59
     f36:	0f 90       	pop	r0
     f38:	0f be       	out	0x3f, r0	; 63
     f3a:	0f 90       	pop	r0
     f3c:	1f 90       	pop	r1
     f3e:	18 95       	reti

00000f40 <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
     f40:	1f 92       	push	r1
     f42:	0f 92       	push	r0
     f44:	0f b6       	in	r0, 0x3f	; 63
     f46:	0f 92       	push	r0
     f48:	11 24       	eor	r1, r1
     f4a:	0b b6       	in	r0, 0x3b	; 59
     f4c:	0f 92       	push	r0
     f4e:	2f 93       	push	r18
     f50:	3f 93       	push	r19
     f52:	4f 93       	push	r20
     f54:	5f 93       	push	r21
     f56:	6f 93       	push	r22
     f58:	7f 93       	push	r23
     f5a:	8f 93       	push	r24
     f5c:	9f 93       	push	r25
     f5e:	af 93       	push	r26
     f60:	bf 93       	push	r27
     f62:	ef 93       	push	r30
     f64:	ff 93       	push	r31
	if (tc_tce1_ovf_callback) {
     f66:	e0 91 ea 21 	lds	r30, 0x21EA	; 0x8021ea <tc_tce1_ovf_callback>
     f6a:	f0 91 eb 21 	lds	r31, 0x21EB	; 0x8021eb <tc_tce1_ovf_callback+0x1>
     f6e:	30 97       	sbiw	r30, 0x00	; 0
     f70:	09 f0       	breq	.+2      	; 0xf74 <__vector_53+0x34>
		tc_tce1_ovf_callback();
     f72:	19 95       	eicall
	}
}
     f74:	ff 91       	pop	r31
     f76:	ef 91       	pop	r30
     f78:	bf 91       	pop	r27
     f7a:	af 91       	pop	r26
     f7c:	9f 91       	pop	r25
     f7e:	8f 91       	pop	r24
     f80:	7f 91       	pop	r23
     f82:	6f 91       	pop	r22
     f84:	5f 91       	pop	r21
     f86:	4f 91       	pop	r20
     f88:	3f 91       	pop	r19
     f8a:	2f 91       	pop	r18
     f8c:	0f 90       	pop	r0
     f8e:	0b be       	out	0x3b, r0	; 59
     f90:	0f 90       	pop	r0
     f92:	0f be       	out	0x3f, r0	; 63
     f94:	0f 90       	pop	r0
     f96:	1f 90       	pop	r1
     f98:	18 95       	reti

00000f9a <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
     f9a:	1f 92       	push	r1
     f9c:	0f 92       	push	r0
     f9e:	0f b6       	in	r0, 0x3f	; 63
     fa0:	0f 92       	push	r0
     fa2:	11 24       	eor	r1, r1
     fa4:	0b b6       	in	r0, 0x3b	; 59
     fa6:	0f 92       	push	r0
     fa8:	2f 93       	push	r18
     faa:	3f 93       	push	r19
     fac:	4f 93       	push	r20
     fae:	5f 93       	push	r21
     fb0:	6f 93       	push	r22
     fb2:	7f 93       	push	r23
     fb4:	8f 93       	push	r24
     fb6:	9f 93       	push	r25
     fb8:	af 93       	push	r26
     fba:	bf 93       	push	r27
     fbc:	ef 93       	push	r30
     fbe:	ff 93       	push	r31
	if (tc_tce1_err_callback) {
     fc0:	e0 91 e8 21 	lds	r30, 0x21E8	; 0x8021e8 <tc_tce1_err_callback>
     fc4:	f0 91 e9 21 	lds	r31, 0x21E9	; 0x8021e9 <tc_tce1_err_callback+0x1>
     fc8:	30 97       	sbiw	r30, 0x00	; 0
     fca:	09 f0       	breq	.+2      	; 0xfce <__vector_54+0x34>
		tc_tce1_err_callback();
     fcc:	19 95       	eicall
	}
}
     fce:	ff 91       	pop	r31
     fd0:	ef 91       	pop	r30
     fd2:	bf 91       	pop	r27
     fd4:	af 91       	pop	r26
     fd6:	9f 91       	pop	r25
     fd8:	8f 91       	pop	r24
     fda:	7f 91       	pop	r23
     fdc:	6f 91       	pop	r22
     fde:	5f 91       	pop	r21
     fe0:	4f 91       	pop	r20
     fe2:	3f 91       	pop	r19
     fe4:	2f 91       	pop	r18
     fe6:	0f 90       	pop	r0
     fe8:	0b be       	out	0x3b, r0	; 59
     fea:	0f 90       	pop	r0
     fec:	0f be       	out	0x3f, r0	; 63
     fee:	0f 90       	pop	r0
     ff0:	1f 90       	pop	r1
     ff2:	18 95       	reti

00000ff4 <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
     ff4:	1f 92       	push	r1
     ff6:	0f 92       	push	r0
     ff8:	0f b6       	in	r0, 0x3f	; 63
     ffa:	0f 92       	push	r0
     ffc:	11 24       	eor	r1, r1
     ffe:	0b b6       	in	r0, 0x3b	; 59
    1000:	0f 92       	push	r0
    1002:	2f 93       	push	r18
    1004:	3f 93       	push	r19
    1006:	4f 93       	push	r20
    1008:	5f 93       	push	r21
    100a:	6f 93       	push	r22
    100c:	7f 93       	push	r23
    100e:	8f 93       	push	r24
    1010:	9f 93       	push	r25
    1012:	af 93       	push	r26
    1014:	bf 93       	push	r27
    1016:	ef 93       	push	r30
    1018:	ff 93       	push	r31
	if (tc_tce1_cca_callback) {
    101a:	e0 91 e6 21 	lds	r30, 0x21E6	; 0x8021e6 <tc_tce1_cca_callback>
    101e:	f0 91 e7 21 	lds	r31, 0x21E7	; 0x8021e7 <tc_tce1_cca_callback+0x1>
    1022:	30 97       	sbiw	r30, 0x00	; 0
    1024:	09 f0       	breq	.+2      	; 0x1028 <__vector_55+0x34>
		tc_tce1_cca_callback();
    1026:	19 95       	eicall
	}
}
    1028:	ff 91       	pop	r31
    102a:	ef 91       	pop	r30
    102c:	bf 91       	pop	r27
    102e:	af 91       	pop	r26
    1030:	9f 91       	pop	r25
    1032:	8f 91       	pop	r24
    1034:	7f 91       	pop	r23
    1036:	6f 91       	pop	r22
    1038:	5f 91       	pop	r21
    103a:	4f 91       	pop	r20
    103c:	3f 91       	pop	r19
    103e:	2f 91       	pop	r18
    1040:	0f 90       	pop	r0
    1042:	0b be       	out	0x3b, r0	; 59
    1044:	0f 90       	pop	r0
    1046:	0f be       	out	0x3f, r0	; 63
    1048:	0f 90       	pop	r0
    104a:	1f 90       	pop	r1
    104c:	18 95       	reti

0000104e <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
    104e:	1f 92       	push	r1
    1050:	0f 92       	push	r0
    1052:	0f b6       	in	r0, 0x3f	; 63
    1054:	0f 92       	push	r0
    1056:	11 24       	eor	r1, r1
    1058:	0b b6       	in	r0, 0x3b	; 59
    105a:	0f 92       	push	r0
    105c:	2f 93       	push	r18
    105e:	3f 93       	push	r19
    1060:	4f 93       	push	r20
    1062:	5f 93       	push	r21
    1064:	6f 93       	push	r22
    1066:	7f 93       	push	r23
    1068:	8f 93       	push	r24
    106a:	9f 93       	push	r25
    106c:	af 93       	push	r26
    106e:	bf 93       	push	r27
    1070:	ef 93       	push	r30
    1072:	ff 93       	push	r31
	if (tc_tce1_ccb_callback) {
    1074:	e0 91 e4 21 	lds	r30, 0x21E4	; 0x8021e4 <tc_tce1_ccb_callback>
    1078:	f0 91 e5 21 	lds	r31, 0x21E5	; 0x8021e5 <tc_tce1_ccb_callback+0x1>
    107c:	30 97       	sbiw	r30, 0x00	; 0
    107e:	09 f0       	breq	.+2      	; 0x1082 <__vector_56+0x34>
		tc_tce1_ccb_callback();
    1080:	19 95       	eicall
	}
}
    1082:	ff 91       	pop	r31
    1084:	ef 91       	pop	r30
    1086:	bf 91       	pop	r27
    1088:	af 91       	pop	r26
    108a:	9f 91       	pop	r25
    108c:	8f 91       	pop	r24
    108e:	7f 91       	pop	r23
    1090:	6f 91       	pop	r22
    1092:	5f 91       	pop	r21
    1094:	4f 91       	pop	r20
    1096:	3f 91       	pop	r19
    1098:	2f 91       	pop	r18
    109a:	0f 90       	pop	r0
    109c:	0b be       	out	0x3b, r0	; 59
    109e:	0f 90       	pop	r0
    10a0:	0f be       	out	0x3f, r0	; 63
    10a2:	0f 90       	pop	r0
    10a4:	1f 90       	pop	r1
    10a6:	18 95       	reti

000010a8 <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    10a8:	1f 92       	push	r1
    10aa:	0f 92       	push	r0
    10ac:	0f b6       	in	r0, 0x3f	; 63
    10ae:	0f 92       	push	r0
    10b0:	11 24       	eor	r1, r1
    10b2:	0b b6       	in	r0, 0x3b	; 59
    10b4:	0f 92       	push	r0
    10b6:	2f 93       	push	r18
    10b8:	3f 93       	push	r19
    10ba:	4f 93       	push	r20
    10bc:	5f 93       	push	r21
    10be:	6f 93       	push	r22
    10c0:	7f 93       	push	r23
    10c2:	8f 93       	push	r24
    10c4:	9f 93       	push	r25
    10c6:	af 93       	push	r26
    10c8:	bf 93       	push	r27
    10ca:	ef 93       	push	r30
    10cc:	ff 93       	push	r31
	if (tc_tcf0_ovf_callback) {
    10ce:	e0 91 e2 21 	lds	r30, 0x21E2	; 0x8021e2 <tc_tcf0_ovf_callback>
    10d2:	f0 91 e3 21 	lds	r31, 0x21E3	; 0x8021e3 <tc_tcf0_ovf_callback+0x1>
    10d6:	30 97       	sbiw	r30, 0x00	; 0
    10d8:	09 f0       	breq	.+2      	; 0x10dc <__vector_108+0x34>
		tc_tcf0_ovf_callback();
    10da:	19 95       	eicall
	}
}
    10dc:	ff 91       	pop	r31
    10de:	ef 91       	pop	r30
    10e0:	bf 91       	pop	r27
    10e2:	af 91       	pop	r26
    10e4:	9f 91       	pop	r25
    10e6:	8f 91       	pop	r24
    10e8:	7f 91       	pop	r23
    10ea:	6f 91       	pop	r22
    10ec:	5f 91       	pop	r21
    10ee:	4f 91       	pop	r20
    10f0:	3f 91       	pop	r19
    10f2:	2f 91       	pop	r18
    10f4:	0f 90       	pop	r0
    10f6:	0b be       	out	0x3b, r0	; 59
    10f8:	0f 90       	pop	r0
    10fa:	0f be       	out	0x3f, r0	; 63
    10fc:	0f 90       	pop	r0
    10fe:	1f 90       	pop	r1
    1100:	18 95       	reti

00001102 <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    1102:	1f 92       	push	r1
    1104:	0f 92       	push	r0
    1106:	0f b6       	in	r0, 0x3f	; 63
    1108:	0f 92       	push	r0
    110a:	11 24       	eor	r1, r1
    110c:	0b b6       	in	r0, 0x3b	; 59
    110e:	0f 92       	push	r0
    1110:	2f 93       	push	r18
    1112:	3f 93       	push	r19
    1114:	4f 93       	push	r20
    1116:	5f 93       	push	r21
    1118:	6f 93       	push	r22
    111a:	7f 93       	push	r23
    111c:	8f 93       	push	r24
    111e:	9f 93       	push	r25
    1120:	af 93       	push	r26
    1122:	bf 93       	push	r27
    1124:	ef 93       	push	r30
    1126:	ff 93       	push	r31
	if (tc_tcf0_err_callback) {
    1128:	e0 91 e0 21 	lds	r30, 0x21E0	; 0x8021e0 <tc_tcf0_err_callback>
    112c:	f0 91 e1 21 	lds	r31, 0x21E1	; 0x8021e1 <tc_tcf0_err_callback+0x1>
    1130:	30 97       	sbiw	r30, 0x00	; 0
    1132:	09 f0       	breq	.+2      	; 0x1136 <__vector_109+0x34>
		tc_tcf0_err_callback();
    1134:	19 95       	eicall
	}
}
    1136:	ff 91       	pop	r31
    1138:	ef 91       	pop	r30
    113a:	bf 91       	pop	r27
    113c:	af 91       	pop	r26
    113e:	9f 91       	pop	r25
    1140:	8f 91       	pop	r24
    1142:	7f 91       	pop	r23
    1144:	6f 91       	pop	r22
    1146:	5f 91       	pop	r21
    1148:	4f 91       	pop	r20
    114a:	3f 91       	pop	r19
    114c:	2f 91       	pop	r18
    114e:	0f 90       	pop	r0
    1150:	0b be       	out	0x3b, r0	; 59
    1152:	0f 90       	pop	r0
    1154:	0f be       	out	0x3f, r0	; 63
    1156:	0f 90       	pop	r0
    1158:	1f 90       	pop	r1
    115a:	18 95       	reti

0000115c <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    115c:	1f 92       	push	r1
    115e:	0f 92       	push	r0
    1160:	0f b6       	in	r0, 0x3f	; 63
    1162:	0f 92       	push	r0
    1164:	11 24       	eor	r1, r1
    1166:	0b b6       	in	r0, 0x3b	; 59
    1168:	0f 92       	push	r0
    116a:	2f 93       	push	r18
    116c:	3f 93       	push	r19
    116e:	4f 93       	push	r20
    1170:	5f 93       	push	r21
    1172:	6f 93       	push	r22
    1174:	7f 93       	push	r23
    1176:	8f 93       	push	r24
    1178:	9f 93       	push	r25
    117a:	af 93       	push	r26
    117c:	bf 93       	push	r27
    117e:	ef 93       	push	r30
    1180:	ff 93       	push	r31
	if (tc_tcf0_cca_callback) {
    1182:	e0 91 de 21 	lds	r30, 0x21DE	; 0x8021de <tc_tcf0_cca_callback>
    1186:	f0 91 df 21 	lds	r31, 0x21DF	; 0x8021df <tc_tcf0_cca_callback+0x1>
    118a:	30 97       	sbiw	r30, 0x00	; 0
    118c:	09 f0       	breq	.+2      	; 0x1190 <__vector_110+0x34>
		tc_tcf0_cca_callback();
    118e:	19 95       	eicall
	}
}
    1190:	ff 91       	pop	r31
    1192:	ef 91       	pop	r30
    1194:	bf 91       	pop	r27
    1196:	af 91       	pop	r26
    1198:	9f 91       	pop	r25
    119a:	8f 91       	pop	r24
    119c:	7f 91       	pop	r23
    119e:	6f 91       	pop	r22
    11a0:	5f 91       	pop	r21
    11a2:	4f 91       	pop	r20
    11a4:	3f 91       	pop	r19
    11a6:	2f 91       	pop	r18
    11a8:	0f 90       	pop	r0
    11aa:	0b be       	out	0x3b, r0	; 59
    11ac:	0f 90       	pop	r0
    11ae:	0f be       	out	0x3f, r0	; 63
    11b0:	0f 90       	pop	r0
    11b2:	1f 90       	pop	r1
    11b4:	18 95       	reti

000011b6 <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    11b6:	1f 92       	push	r1
    11b8:	0f 92       	push	r0
    11ba:	0f b6       	in	r0, 0x3f	; 63
    11bc:	0f 92       	push	r0
    11be:	11 24       	eor	r1, r1
    11c0:	0b b6       	in	r0, 0x3b	; 59
    11c2:	0f 92       	push	r0
    11c4:	2f 93       	push	r18
    11c6:	3f 93       	push	r19
    11c8:	4f 93       	push	r20
    11ca:	5f 93       	push	r21
    11cc:	6f 93       	push	r22
    11ce:	7f 93       	push	r23
    11d0:	8f 93       	push	r24
    11d2:	9f 93       	push	r25
    11d4:	af 93       	push	r26
    11d6:	bf 93       	push	r27
    11d8:	ef 93       	push	r30
    11da:	ff 93       	push	r31
	if (tc_tcf0_ccb_callback) {
    11dc:	e0 91 dc 21 	lds	r30, 0x21DC	; 0x8021dc <tc_tcf0_ccb_callback>
    11e0:	f0 91 dd 21 	lds	r31, 0x21DD	; 0x8021dd <tc_tcf0_ccb_callback+0x1>
    11e4:	30 97       	sbiw	r30, 0x00	; 0
    11e6:	09 f0       	breq	.+2      	; 0x11ea <__vector_111+0x34>
		tc_tcf0_ccb_callback();
    11e8:	19 95       	eicall
	}
}
    11ea:	ff 91       	pop	r31
    11ec:	ef 91       	pop	r30
    11ee:	bf 91       	pop	r27
    11f0:	af 91       	pop	r26
    11f2:	9f 91       	pop	r25
    11f4:	8f 91       	pop	r24
    11f6:	7f 91       	pop	r23
    11f8:	6f 91       	pop	r22
    11fa:	5f 91       	pop	r21
    11fc:	4f 91       	pop	r20
    11fe:	3f 91       	pop	r19
    1200:	2f 91       	pop	r18
    1202:	0f 90       	pop	r0
    1204:	0b be       	out	0x3b, r0	; 59
    1206:	0f 90       	pop	r0
    1208:	0f be       	out	0x3f, r0	; 63
    120a:	0f 90       	pop	r0
    120c:	1f 90       	pop	r1
    120e:	18 95       	reti

00001210 <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    1210:	1f 92       	push	r1
    1212:	0f 92       	push	r0
    1214:	0f b6       	in	r0, 0x3f	; 63
    1216:	0f 92       	push	r0
    1218:	11 24       	eor	r1, r1
    121a:	0b b6       	in	r0, 0x3b	; 59
    121c:	0f 92       	push	r0
    121e:	2f 93       	push	r18
    1220:	3f 93       	push	r19
    1222:	4f 93       	push	r20
    1224:	5f 93       	push	r21
    1226:	6f 93       	push	r22
    1228:	7f 93       	push	r23
    122a:	8f 93       	push	r24
    122c:	9f 93       	push	r25
    122e:	af 93       	push	r26
    1230:	bf 93       	push	r27
    1232:	ef 93       	push	r30
    1234:	ff 93       	push	r31
	if (tc_tcf0_ccc_callback) {
    1236:	e0 91 da 21 	lds	r30, 0x21DA	; 0x8021da <tc_tcf0_ccc_callback>
    123a:	f0 91 db 21 	lds	r31, 0x21DB	; 0x8021db <tc_tcf0_ccc_callback+0x1>
    123e:	30 97       	sbiw	r30, 0x00	; 0
    1240:	09 f0       	breq	.+2      	; 0x1244 <__vector_112+0x34>
		tc_tcf0_ccc_callback();
    1242:	19 95       	eicall
	}
}
    1244:	ff 91       	pop	r31
    1246:	ef 91       	pop	r30
    1248:	bf 91       	pop	r27
    124a:	af 91       	pop	r26
    124c:	9f 91       	pop	r25
    124e:	8f 91       	pop	r24
    1250:	7f 91       	pop	r23
    1252:	6f 91       	pop	r22
    1254:	5f 91       	pop	r21
    1256:	4f 91       	pop	r20
    1258:	3f 91       	pop	r19
    125a:	2f 91       	pop	r18
    125c:	0f 90       	pop	r0
    125e:	0b be       	out	0x3b, r0	; 59
    1260:	0f 90       	pop	r0
    1262:	0f be       	out	0x3f, r0	; 63
    1264:	0f 90       	pop	r0
    1266:	1f 90       	pop	r1
    1268:	18 95       	reti

0000126a <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    126a:	1f 92       	push	r1
    126c:	0f 92       	push	r0
    126e:	0f b6       	in	r0, 0x3f	; 63
    1270:	0f 92       	push	r0
    1272:	11 24       	eor	r1, r1
    1274:	0b b6       	in	r0, 0x3b	; 59
    1276:	0f 92       	push	r0
    1278:	2f 93       	push	r18
    127a:	3f 93       	push	r19
    127c:	4f 93       	push	r20
    127e:	5f 93       	push	r21
    1280:	6f 93       	push	r22
    1282:	7f 93       	push	r23
    1284:	8f 93       	push	r24
    1286:	9f 93       	push	r25
    1288:	af 93       	push	r26
    128a:	bf 93       	push	r27
    128c:	ef 93       	push	r30
    128e:	ff 93       	push	r31
	if (tc_tcf0_ccd_callback) {
    1290:	e0 91 d8 21 	lds	r30, 0x21D8	; 0x8021d8 <__data_end>
    1294:	f0 91 d9 21 	lds	r31, 0x21D9	; 0x8021d9 <__data_end+0x1>
    1298:	30 97       	sbiw	r30, 0x00	; 0
    129a:	09 f0       	breq	.+2      	; 0x129e <__vector_113+0x34>
		tc_tcf0_ccd_callback();
    129c:	19 95       	eicall
	}
}
    129e:	ff 91       	pop	r31
    12a0:	ef 91       	pop	r30
    12a2:	bf 91       	pop	r27
    12a4:	af 91       	pop	r26
    12a6:	9f 91       	pop	r25
    12a8:	8f 91       	pop	r24
    12aa:	7f 91       	pop	r23
    12ac:	6f 91       	pop	r22
    12ae:	5f 91       	pop	r21
    12b0:	4f 91       	pop	r20
    12b2:	3f 91       	pop	r19
    12b4:	2f 91       	pop	r18
    12b6:	0f 90       	pop	r0
    12b8:	0b be       	out	0x3b, r0	; 59
    12ba:	0f 90       	pop	r0
    12bc:	0f be       	out	0x3f, r0	; 63
    12be:	0f 90       	pop	r0
    12c0:	1f 90       	pop	r1
    12c2:	18 95       	reti

000012c4 <tc_enable>:
 *
 * \note
 * unmask TC clock (sysclk), but does not configure the TC clock source.
 */
void tc_enable(volatile void *tc)
{
    12c4:	1f 93       	push	r17
    12c6:	cf 93       	push	r28
    12c8:	df 93       	push	r29
    12ca:	1f 92       	push	r1
    12cc:	1f 92       	push	r1
    12ce:	cd b7       	in	r28, 0x3d	; 61
    12d0:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    12d2:	2f b7       	in	r18, 0x3f	; 63
    12d4:	2a 83       	std	Y+2, r18	; 0x02
	cpu_irq_disable();
    12d6:	f8 94       	cli
	return flags;
    12d8:	1a 81       	ldd	r17, Y+2	; 0x02
	irqflags_t iflags = cpu_irq_save();

#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    12da:	28 2f       	mov	r18, r24
    12dc:	39 2f       	mov	r19, r25
    12de:	21 15       	cp	r18, r1
    12e0:	88 e0       	ldi	r24, 0x08	; 8
    12e2:	38 07       	cpc	r19, r24
    12e4:	39 f4       	brne	.+14     	; 0x12f4 <tc_enable+0x30>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    12e6:	61 e0       	ldi	r22, 0x01	; 1
    12e8:	83 e0       	ldi	r24, 0x03	; 3
    12ea:	52 d5       	rcall	.+2724   	; 0x1d90 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    12ec:	64 e0       	ldi	r22, 0x04	; 4
    12ee:	83 e0       	ldi	r24, 0x03	; 3
    12f0:	4f d5       	rcall	.+2718   	; 0x1d90 <sysclk_enable_module>
    12f2:	43 c0       	rjmp	.+134    	; 0x137a <tc_enable+0xb6>
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    12f4:	20 34       	cpi	r18, 0x40	; 64
    12f6:	88 e0       	ldi	r24, 0x08	; 8
    12f8:	38 07       	cpc	r19, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    12fa:	39 f4       	brne	.+14     	; 0x130a <tc_enable+0x46>
    12fc:	62 e0       	ldi	r22, 0x02	; 2
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    12fe:	83 e0       	ldi	r24, 0x03	; 3
    1300:	47 d5       	rcall	.+2702   	; 0x1d90 <sysclk_enable_module>
    1302:	64 e0       	ldi	r22, 0x04	; 4
    1304:	83 e0       	ldi	r24, 0x03	; 3
    1306:	44 d5       	rcall	.+2696   	; 0x1d90 <sysclk_enable_module>
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    1308:	38 c0       	rjmp	.+112    	; 0x137a <tc_enable+0xb6>
    130a:	21 15       	cp	r18, r1
    130c:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    130e:	38 07       	cpc	r19, r24
    1310:	39 f4       	brne	.+14     	; 0x1320 <tc_enable+0x5c>
    1312:	61 e0       	ldi	r22, 0x01	; 1
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1314:	84 e0       	ldi	r24, 0x04	; 4
    1316:	3c d5       	rcall	.+2680   	; 0x1d90 <sysclk_enable_module>
    1318:	64 e0       	ldi	r22, 0x04	; 4
    131a:	84 e0       	ldi	r24, 0x04	; 4
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    131c:	39 d5       	rcall	.+2674   	; 0x1d90 <sysclk_enable_module>
    131e:	2d c0       	rjmp	.+90     	; 0x137a <tc_enable+0xb6>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1320:	20 34       	cpi	r18, 0x40	; 64
    1322:	89 e0       	ldi	r24, 0x09	; 9
    1324:	38 07       	cpc	r19, r24
    1326:	39 f4       	brne	.+14     	; 0x1336 <tc_enable+0x72>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1328:	62 e0       	ldi	r22, 0x02	; 2
    132a:	84 e0       	ldi	r24, 0x04	; 4
    132c:	31 d5       	rcall	.+2658   	; 0x1d90 <sysclk_enable_module>
    132e:	64 e0       	ldi	r22, 0x04	; 4
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    1330:	84 e0       	ldi	r24, 0x04	; 4
    1332:	2e d5       	rcall	.+2652   	; 0x1d90 <sysclk_enable_module>
    1334:	22 c0       	rjmp	.+68     	; 0x137a <tc_enable+0xb6>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1336:	21 15       	cp	r18, r1
    1338:	8a e0       	ldi	r24, 0x0A	; 10
    133a:	38 07       	cpc	r19, r24
    133c:	39 f4       	brne	.+14     	; 0x134c <tc_enable+0x88>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    133e:	61 e0       	ldi	r22, 0x01	; 1
    1340:	85 e0       	ldi	r24, 0x05	; 5
    1342:	26 d5       	rcall	.+2636   	; 0x1d90 <sysclk_enable_module>
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    1344:	64 e0       	ldi	r22, 0x04	; 4
    1346:	85 e0       	ldi	r24, 0x05	; 5
    1348:	23 d5       	rcall	.+2630   	; 0x1d90 <sysclk_enable_module>
    134a:	17 c0       	rjmp	.+46     	; 0x137a <tc_enable+0xb6>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    134c:	20 34       	cpi	r18, 0x40	; 64
    134e:	8a e0       	ldi	r24, 0x0A	; 10
    1350:	38 07       	cpc	r19, r24
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1352:	39 f4       	brne	.+14     	; 0x1362 <tc_enable+0x9e>
    1354:	62 e0       	ldi	r22, 0x02	; 2
    1356:	85 e0       	ldi	r24, 0x05	; 5
    1358:	1b d5       	rcall	.+2614   	; 0x1d90 <sysclk_enable_module>
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    135a:	64 e0       	ldi	r22, 0x04	; 4
    135c:	85 e0       	ldi	r24, 0x05	; 5
    135e:	18 d5       	rcall	.+2608   	; 0x1d90 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    1360:	0c c0       	rjmp	.+24     	; 0x137a <tc_enable+0xb6>
    1362:	21 15       	cp	r18, r1
    1364:	3b 40       	sbci	r19, 0x0B	; 11
    1366:	39 f4       	brne	.+14     	; 0x1376 <tc_enable+0xb2>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1368:	61 e0       	ldi	r22, 0x01	; 1
    136a:	86 e0       	ldi	r24, 0x06	; 6
    136c:	11 d5       	rcall	.+2594   	; 0x1d90 <sysclk_enable_module>
    136e:	64 e0       	ldi	r22, 0x04	; 4
    1370:	86 e0       	ldi	r24, 0x06	; 6
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1372:	0e d5       	rcall	.+2588   	; 0x1d90 <sysclk_enable_module>
    1374:	02 c0       	rjmp	.+4      	; 0x137a <tc_enable+0xb6>
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    1376:	1f bf       	out	0x3f, r17	; 63
    1378:	10 c0       	rjmp	.+32     	; 0x139a <tc_enable+0xd6>
    137a:	80 91 22 22 	lds	r24, 0x2222	; 0x802222 <sleepmgr_locks+0x1>
    137e:	8f 3f       	cpi	r24, 0xFF	; 255

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1380:	09 f4       	brne	.+2      	; 0x1384 <tc_enable+0xc0>
    1382:	ff cf       	rjmp	.-2      	; 0x1382 <tc_enable+0xbe>
	cpu_irq_disable();
    1384:	8f b7       	in	r24, 0x3f	; 63
	return flags;
    1386:	89 83       	std	Y+1, r24	; 0x01
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    1388:	f8 94       	cli
    138a:	99 81       	ldd	r25, Y+1	; 0x01
    138c:	e1 e2       	ldi	r30, 0x21	; 33
    138e:	f2 e2       	ldi	r31, 0x22	; 34
    1390:	81 81       	ldd	r24, Z+1	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1392:	8f 5f       	subi	r24, 0xFF	; 255
    1394:	81 83       	std	Z+1, r24	; 0x01
		cpu_irq_restore(iflags);
		return;
	}
	sleepmgr_lock_mode(SLEEPMGR_IDLE);
	cpu_irq_restore(iflags);
}
    1396:	9f bf       	out	0x3f, r25	; 63
    1398:	1f bf       	out	0x3f, r17	; 63
    139a:	0f 90       	pop	r0
    139c:	0f 90       	pop	r0
    139e:	df 91       	pop	r29
    13a0:	cf 91       	pop	r28
    13a2:	1f 91       	pop	r17
    13a4:	08 95       	ret

000013a6 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    13a6:	fc 01       	movw	r30, r24
    13a8:	91 81       	ldd	r25, Z+1	; 0x01
    13aa:	95 ff       	sbrs	r25, 5
    13ac:	fd cf       	rjmp	.-6      	; 0x13a8 <usart_putchar+0x2>
    13ae:	60 83       	st	Z, r22
    13b0:	80 e0       	ldi	r24, 0x00	; 0
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	08 95       	ret

000013b6 <usart_getchar>:
    13b6:	fc 01       	movw	r30, r24
    13b8:	91 81       	ldd	r25, Z+1	; 0x01
    13ba:	99 23       	and	r25, r25
    13bc:	ec f7       	brge	.-6      	; 0x13b8 <usart_getchar+0x2>
    13be:	80 81       	ld	r24, Z
    13c0:	08 95       	ret

000013c2 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    13c2:	4f 92       	push	r4
    13c4:	5f 92       	push	r5
    13c6:	6f 92       	push	r6
    13c8:	7f 92       	push	r7
    13ca:	8f 92       	push	r8
    13cc:	9f 92       	push	r9
    13ce:	af 92       	push	r10
    13d0:	bf 92       	push	r11
    13d2:	ef 92       	push	r14
    13d4:	ff 92       	push	r15
    13d6:	0f 93       	push	r16
    13d8:	1f 93       	push	r17
    13da:	cf 93       	push	r28
    13dc:	7c 01       	movw	r14, r24
    13de:	4a 01       	movw	r8, r20
    13e0:	5b 01       	movw	r10, r22
    13e2:	28 01       	movw	r4, r16
    13e4:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    13e6:	fc 01       	movw	r30, r24
    13e8:	84 81       	ldd	r24, Z+4	; 0x04
    13ea:	82 ff       	sbrs	r24, 2
    13ec:	16 c0       	rjmp	.+44     	; 0x141a <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    13ee:	d9 01       	movw	r26, r18
    13f0:	c8 01       	movw	r24, r16
    13f2:	68 94       	set
    13f4:	12 f8       	bld	r1, 2
    13f6:	b6 95       	lsr	r27
    13f8:	a7 95       	ror	r26
    13fa:	97 95       	ror	r25
    13fc:	87 95       	ror	r24
    13fe:	16 94       	lsr	r1
    1400:	d1 f7       	brne	.-12     	; 0x13f6 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    1402:	b9 01       	movw	r22, r18
    1404:	a8 01       	movw	r20, r16
    1406:	03 2e       	mov	r0, r19
    1408:	36 e1       	ldi	r19, 0x16	; 22
    140a:	76 95       	lsr	r23
    140c:	67 95       	ror	r22
    140e:	57 95       	ror	r21
    1410:	47 95       	ror	r20
    1412:	3a 95       	dec	r19
    1414:	d1 f7       	brne	.-12     	; 0x140a <usart_set_baudrate+0x48>
    1416:	30 2d       	mov	r19, r0
    1418:	15 c0       	rjmp	.+42     	; 0x1444 <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
    141a:	d9 01       	movw	r26, r18
    141c:	c8 01       	movw	r24, r16
    141e:	68 94       	set
    1420:	13 f8       	bld	r1, 3
    1422:	b6 95       	lsr	r27
    1424:	a7 95       	ror	r26
    1426:	97 95       	ror	r25
    1428:	87 95       	ror	r24
    142a:	16 94       	lsr	r1
    142c:	d1 f7       	brne	.-12     	; 0x1422 <usart_set_baudrate+0x60>
		min_rate /= 2;
    142e:	b9 01       	movw	r22, r18
    1430:	a8 01       	movw	r20, r16
    1432:	03 2e       	mov	r0, r19
    1434:	37 e1       	ldi	r19, 0x17	; 23
    1436:	76 95       	lsr	r23
    1438:	67 95       	ror	r22
    143a:	57 95       	ror	r21
    143c:	47 95       	ror	r20
    143e:	3a 95       	dec	r19
    1440:	d1 f7       	brne	.-12     	; 0x1436 <usart_set_baudrate+0x74>
    1442:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    1444:	88 15       	cp	r24, r8
    1446:	99 05       	cpc	r25, r9
    1448:	aa 05       	cpc	r26, r10
    144a:	bb 05       	cpc	r27, r11
    144c:	08 f4       	brcc	.+2      	; 0x1450 <usart_set_baudrate+0x8e>
    144e:	a6 c0       	rjmp	.+332    	; 0x159c <usart_set_baudrate+0x1da>
    1450:	84 16       	cp	r8, r20
    1452:	95 06       	cpc	r9, r21
    1454:	a6 06       	cpc	r10, r22
    1456:	b7 06       	cpc	r11, r23
    1458:	08 f4       	brcc	.+2      	; 0x145c <usart_set_baudrate+0x9a>
    145a:	a2 c0       	rjmp	.+324    	; 0x15a0 <usart_set_baudrate+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    145c:	f7 01       	movw	r30, r14
    145e:	84 81       	ldd	r24, Z+4	; 0x04
    1460:	82 fd       	sbrc	r24, 2
    1462:	04 c0       	rjmp	.+8      	; 0x146c <usart_set_baudrate+0xaa>
		baud *= 2;
    1464:	88 0c       	add	r8, r8
    1466:	99 1c       	adc	r9, r9
    1468:	aa 1c       	adc	r10, r10
    146a:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    146c:	c3 01       	movw	r24, r6
    146e:	b2 01       	movw	r22, r4
    1470:	a5 01       	movw	r20, r10
    1472:	94 01       	movw	r18, r8
    1474:	0e 94 c2 13 	call	0x2784	; 0x2784 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    1478:	2f 3f       	cpi	r18, 0xFF	; 255
    147a:	31 05       	cpc	r19, r1
    147c:	41 05       	cpc	r20, r1
    147e:	51 05       	cpc	r21, r1
    1480:	08 f4       	brcc	.+2      	; 0x1484 <usart_set_baudrate+0xc2>
    1482:	90 c0       	rjmp	.+288    	; 0x15a4 <usart_set_baudrate+0x1e2>
    1484:	8f ef       	ldi	r24, 0xFF	; 255
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	a0 e0       	ldi	r26, 0x00	; 0
    148a:	b0 e0       	ldi	r27, 0x00	; 0
    148c:	c9 ef       	ldi	r28, 0xF9	; 249
    148e:	05 c0       	rjmp	.+10     	; 0x149a <usart_set_baudrate+0xd8>
    1490:	28 17       	cp	r18, r24
    1492:	39 07       	cpc	r19, r25
    1494:	4a 07       	cpc	r20, r26
    1496:	5b 07       	cpc	r21, r27
    1498:	58 f0       	brcs	.+22     	; 0x14b0 <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
    149a:	88 0f       	add	r24, r24
    149c:	99 1f       	adc	r25, r25
    149e:	aa 1f       	adc	r26, r26
    14a0:	bb 1f       	adc	r27, r27

		if (exp < -3) {
    14a2:	cd 3f       	cpi	r28, 0xFD	; 253
    14a4:	0c f4       	brge	.+2      	; 0x14a8 <usart_set_baudrate+0xe6>
			limit |= 1;
    14a6:	81 60       	ori	r24, 0x01	; 1
    14a8:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    14aa:	c7 30       	cpi	r28, 0x07	; 7
    14ac:	89 f7       	brne	.-30     	; 0x1490 <usart_set_baudrate+0xce>
    14ae:	4f c0       	rjmp	.+158    	; 0x154e <usart_set_baudrate+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    14b0:	cc 23       	and	r28, r28
    14b2:	0c f0       	brlt	.+2      	; 0x14b6 <usart_set_baudrate+0xf4>
    14b4:	4c c0       	rjmp	.+152    	; 0x154e <usart_set_baudrate+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    14b6:	d5 01       	movw	r26, r10
    14b8:	c4 01       	movw	r24, r8
    14ba:	88 0f       	add	r24, r24
    14bc:	99 1f       	adc	r25, r25
    14be:	aa 1f       	adc	r26, r26
    14c0:	bb 1f       	adc	r27, r27
    14c2:	88 0f       	add	r24, r24
    14c4:	99 1f       	adc	r25, r25
    14c6:	aa 1f       	adc	r26, r26
    14c8:	bb 1f       	adc	r27, r27
    14ca:	88 0f       	add	r24, r24
    14cc:	99 1f       	adc	r25, r25
    14ce:	aa 1f       	adc	r26, r26
    14d0:	bb 1f       	adc	r27, r27
    14d2:	48 1a       	sub	r4, r24
    14d4:	59 0a       	sbc	r5, r25
    14d6:	6a 0a       	sbc	r6, r26
    14d8:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    14da:	ce 3f       	cpi	r28, 0xFE	; 254
    14dc:	f4 f4       	brge	.+60     	; 0x151a <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    14de:	8d ef       	ldi	r24, 0xFD	; 253
    14e0:	9f ef       	ldi	r25, 0xFF	; 255
    14e2:	8c 1b       	sub	r24, r28
    14e4:	91 09       	sbc	r25, r1
    14e6:	c7 fd       	sbrc	r28, 7
    14e8:	93 95       	inc	r25
    14ea:	04 c0       	rjmp	.+8      	; 0x14f4 <usart_set_baudrate+0x132>
    14ec:	44 0c       	add	r4, r4
    14ee:	55 1c       	adc	r5, r5
    14f0:	66 1c       	adc	r6, r6
    14f2:	77 1c       	adc	r7, r7
    14f4:	8a 95       	dec	r24
    14f6:	d2 f7       	brpl	.-12     	; 0x14ec <usart_set_baudrate+0x12a>
    14f8:	d5 01       	movw	r26, r10
    14fa:	c4 01       	movw	r24, r8
    14fc:	b6 95       	lsr	r27
    14fe:	a7 95       	ror	r26
    1500:	97 95       	ror	r25
    1502:	87 95       	ror	r24
    1504:	bc 01       	movw	r22, r24
    1506:	cd 01       	movw	r24, r26
    1508:	64 0d       	add	r22, r4
    150a:	75 1d       	adc	r23, r5
    150c:	86 1d       	adc	r24, r6
    150e:	97 1d       	adc	r25, r7
    1510:	a5 01       	movw	r20, r10
    1512:	94 01       	movw	r18, r8
    1514:	0e 94 c2 13 	call	0x2784	; 0x2784 <__udivmodsi4>
    1518:	37 c0       	rjmp	.+110    	; 0x1588 <usart_set_baudrate+0x1c6>
		} else {
			baud <<= exp + 3;
    151a:	83 e0       	ldi	r24, 0x03	; 3
    151c:	8c 0f       	add	r24, r28
    151e:	a5 01       	movw	r20, r10
    1520:	94 01       	movw	r18, r8
    1522:	04 c0       	rjmp	.+8      	; 0x152c <usart_set_baudrate+0x16a>
    1524:	22 0f       	add	r18, r18
    1526:	33 1f       	adc	r19, r19
    1528:	44 1f       	adc	r20, r20
    152a:	55 1f       	adc	r21, r21
    152c:	8a 95       	dec	r24
    152e:	d2 f7       	brpl	.-12     	; 0x1524 <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
    1530:	da 01       	movw	r26, r20
    1532:	c9 01       	movw	r24, r18
    1534:	b6 95       	lsr	r27
    1536:	a7 95       	ror	r26
    1538:	97 95       	ror	r25
    153a:	87 95       	ror	r24
    153c:	bc 01       	movw	r22, r24
    153e:	cd 01       	movw	r24, r26
    1540:	64 0d       	add	r22, r4
    1542:	75 1d       	adc	r23, r5
    1544:	86 1d       	adc	r24, r6
    1546:	97 1d       	adc	r25, r7
    1548:	0e 94 c2 13 	call	0x2784	; 0x2784 <__udivmodsi4>
    154c:	1d c0       	rjmp	.+58     	; 0x1588 <usart_set_baudrate+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    154e:	83 e0       	ldi	r24, 0x03	; 3
    1550:	8c 0f       	add	r24, r28
    1552:	a5 01       	movw	r20, r10
    1554:	94 01       	movw	r18, r8
    1556:	04 c0       	rjmp	.+8      	; 0x1560 <usart_set_baudrate+0x19e>
    1558:	22 0f       	add	r18, r18
    155a:	33 1f       	adc	r19, r19
    155c:	44 1f       	adc	r20, r20
    155e:	55 1f       	adc	r21, r21
    1560:	8a 95       	dec	r24
    1562:	d2 f7       	brpl	.-12     	; 0x1558 <usart_set_baudrate+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
    1564:	da 01       	movw	r26, r20
    1566:	c9 01       	movw	r24, r18
    1568:	b6 95       	lsr	r27
    156a:	a7 95       	ror	r26
    156c:	97 95       	ror	r25
    156e:	87 95       	ror	r24
    1570:	bc 01       	movw	r22, r24
    1572:	cd 01       	movw	r24, r26
    1574:	64 0d       	add	r22, r4
    1576:	75 1d       	adc	r23, r5
    1578:	86 1d       	adc	r24, r6
    157a:	97 1d       	adc	r25, r7
    157c:	0e 94 c2 13 	call	0x2784	; 0x2784 <__udivmodsi4>
    1580:	21 50       	subi	r18, 0x01	; 1
    1582:	31 09       	sbc	r19, r1
    1584:	41 09       	sbc	r20, r1
    1586:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    1588:	83 2f       	mov	r24, r19
    158a:	8f 70       	andi	r24, 0x0F	; 15
    158c:	c2 95       	swap	r28
    158e:	c0 7f       	andi	r28, 0xF0	; 240
    1590:	c8 2b       	or	r28, r24
    1592:	f7 01       	movw	r30, r14
    1594:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    1596:	26 83       	std	Z+6, r18	; 0x06

	return true;
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	18 c0       	rjmp	.+48     	; 0x15cc <usart_set_baudrate+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    159c:	80 e0       	ldi	r24, 0x00	; 0
    159e:	16 c0       	rjmp	.+44     	; 0x15cc <usart_set_baudrate+0x20a>
    15a0:	80 e0       	ldi	r24, 0x00	; 0
    15a2:	14 c0       	rjmp	.+40     	; 0x15cc <usart_set_baudrate+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    15a4:	d5 01       	movw	r26, r10
    15a6:	c4 01       	movw	r24, r8
    15a8:	88 0f       	add	r24, r24
    15aa:	99 1f       	adc	r25, r25
    15ac:	aa 1f       	adc	r26, r26
    15ae:	bb 1f       	adc	r27, r27
    15b0:	88 0f       	add	r24, r24
    15b2:	99 1f       	adc	r25, r25
    15b4:	aa 1f       	adc	r26, r26
    15b6:	bb 1f       	adc	r27, r27
    15b8:	88 0f       	add	r24, r24
    15ba:	99 1f       	adc	r25, r25
    15bc:	aa 1f       	adc	r26, r26
    15be:	bb 1f       	adc	r27, r27
    15c0:	48 1a       	sub	r4, r24
    15c2:	59 0a       	sbc	r5, r25
    15c4:	6a 0a       	sbc	r6, r26
    15c6:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    15c8:	c9 ef       	ldi	r28, 0xF9	; 249
    15ca:	89 cf       	rjmp	.-238    	; 0x14de <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    15cc:	cf 91       	pop	r28
    15ce:	1f 91       	pop	r17
    15d0:	0f 91       	pop	r16
    15d2:	ff 90       	pop	r15
    15d4:	ef 90       	pop	r14
    15d6:	bf 90       	pop	r11
    15d8:	af 90       	pop	r10
    15da:	9f 90       	pop	r9
    15dc:	8f 90       	pop	r8
    15de:	7f 90       	pop	r7
    15e0:	6f 90       	pop	r6
    15e2:	5f 90       	pop	r5
    15e4:	4f 90       	pop	r4
    15e6:	08 95       	ret

000015e8 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    15e8:	0f 93       	push	r16
    15ea:	1f 93       	push	r17
    15ec:	cf 93       	push	r28
    15ee:	df 93       	push	r29
    15f0:	ec 01       	movw	r28, r24
    15f2:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    15f4:	00 97       	sbiw	r24, 0x00	; 0
    15f6:	09 f4       	brne	.+2      	; 0x15fa <usart_init_rs232+0x12>
    15f8:	e6 c0       	rjmp	.+460    	; 0x17c6 <usart_init_rs232+0x1de>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    15fa:	80 3c       	cpi	r24, 0xC0	; 192
    15fc:	91 05       	cpc	r25, r1
    15fe:	21 f4       	brne	.+8      	; 0x1608 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    1600:	60 e1       	ldi	r22, 0x10	; 16
    1602:	80 e0       	ldi	r24, 0x00	; 0
    1604:	c5 d3       	rcall	.+1930   	; 0x1d90 <sysclk_enable_module>
    1606:	df c0       	rjmp	.+446    	; 0x17c6 <usart_init_rs232+0x1de>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    1608:	c0 38       	cpi	r28, 0x80	; 128
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	d8 07       	cpc	r29, r24
    160e:	21 f4       	brne	.+8      	; 0x1618 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    1610:	62 e0       	ldi	r22, 0x02	; 2
    1612:	80 e0       	ldi	r24, 0x00	; 0
    1614:	bd d3       	rcall	.+1914   	; 0x1d90 <sysclk_enable_module>
    1616:	d7 c0       	rjmp	.+430    	; 0x17c6 <usart_init_rs232+0x1de>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    1618:	c1 15       	cp	r28, r1
    161a:	e1 e0       	ldi	r30, 0x01	; 1
    161c:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    161e:	21 f4       	brne	.+8      	; 0x1628 <usart_init_rs232+0x40>
    1620:	61 e0       	ldi	r22, 0x01	; 1
    1622:	80 e0       	ldi	r24, 0x00	; 0
    1624:	b5 d3       	rcall	.+1898   	; 0x1d90 <sysclk_enable_module>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    1626:	cf c0       	rjmp	.+414    	; 0x17c6 <usart_init_rs232+0x1de>
    1628:	c0 38       	cpi	r28, 0x80	; 128
    162a:	f3 e0       	ldi	r31, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    162c:	df 07       	cpc	r29, r31
    162e:	21 f4       	brne	.+8      	; 0x1638 <usart_init_rs232+0x50>
    1630:	61 e0       	ldi	r22, 0x01	; 1
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	ad d3       	rcall	.+1882   	; 0x1d90 <sysclk_enable_module>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    1636:	c7 c0       	rjmp	.+398    	; 0x17c6 <usart_init_rs232+0x1de>
    1638:	c0 39       	cpi	r28, 0x90	; 144
    163a:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    163c:	d8 07       	cpc	r29, r24
    163e:	21 f4       	brne	.+8      	; 0x1648 <usart_init_rs232+0x60>
    1640:	61 e0       	ldi	r22, 0x01	; 1
    1642:	82 e0       	ldi	r24, 0x02	; 2
    1644:	a5 d3       	rcall	.+1866   	; 0x1d90 <sysclk_enable_module>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    1646:	bf c0       	rjmp	.+382    	; 0x17c6 <usart_init_rs232+0x1de>
    1648:	c1 15       	cp	r28, r1
    164a:	e2 e0       	ldi	r30, 0x02	; 2
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    164c:	de 07       	cpc	r29, r30
    164e:	21 f4       	brne	.+8      	; 0x1658 <usart_init_rs232+0x70>
    1650:	62 e0       	ldi	r22, 0x02	; 2
    1652:	81 e0       	ldi	r24, 0x01	; 1
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    1654:	9d d3       	rcall	.+1850   	; 0x1d90 <sysclk_enable_module>
    1656:	b7 c0       	rjmp	.+366    	; 0x17c6 <usart_init_rs232+0x1de>
    1658:	c0 34       	cpi	r28, 0x40	; 64
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    165a:	f2 e0       	ldi	r31, 0x02	; 2
    165c:	df 07       	cpc	r29, r31
    165e:	21 f4       	brne	.+8      	; 0x1668 <usart_init_rs232+0x80>
    1660:	62 e0       	ldi	r22, 0x02	; 2
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    1662:	82 e0       	ldi	r24, 0x02	; 2
    1664:	95 d3       	rcall	.+1834   	; 0x1d90 <sysclk_enable_module>
    1666:	af c0       	rjmp	.+350    	; 0x17c6 <usart_init_rs232+0x1de>
    1668:	c0 32       	cpi	r28, 0x20	; 32
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    166a:	83 e0       	ldi	r24, 0x03	; 3
    166c:	d8 07       	cpc	r29, r24
    166e:	21 f4       	brne	.+8      	; 0x1678 <usart_init_rs232+0x90>
    1670:	64 e0       	ldi	r22, 0x04	; 4
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    1672:	82 e0       	ldi	r24, 0x02	; 2
    1674:	8d d3       	rcall	.+1818   	; 0x1d90 <sysclk_enable_module>
    1676:	a7 c0       	rjmp	.+334    	; 0x17c6 <usart_init_rs232+0x1de>
    1678:	c1 15       	cp	r28, r1
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    167a:	e8 e0       	ldi	r30, 0x08	; 8
    167c:	de 07       	cpc	r29, r30
    167e:	21 f4       	brne	.+8      	; 0x1688 <usart_init_rs232+0xa0>
    1680:	61 e0       	ldi	r22, 0x01	; 1
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    1682:	83 e0       	ldi	r24, 0x03	; 3
    1684:	85 d3       	rcall	.+1802   	; 0x1d90 <sysclk_enable_module>
    1686:	9f c0       	rjmp	.+318    	; 0x17c6 <usart_init_rs232+0x1de>
    1688:	c1 15       	cp	r28, r1
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    168a:	f9 e0       	ldi	r31, 0x09	; 9
    168c:	df 07       	cpc	r29, r31
    168e:	21 f4       	brne	.+8      	; 0x1698 <usart_init_rs232+0xb0>
    1690:	61 e0       	ldi	r22, 0x01	; 1
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    1692:	84 e0       	ldi	r24, 0x04	; 4
    1694:	7d d3       	rcall	.+1786   	; 0x1d90 <sysclk_enable_module>
    1696:	97 c0       	rjmp	.+302    	; 0x17c6 <usart_init_rs232+0x1de>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1698:	c1 15       	cp	r28, r1
    169a:	8a e0       	ldi	r24, 0x0A	; 10
    169c:	d8 07       	cpc	r29, r24
    169e:	21 f4       	brne	.+8      	; 0x16a8 <usart_init_rs232+0xc0>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    16a0:	61 e0       	ldi	r22, 0x01	; 1
    16a2:	85 e0       	ldi	r24, 0x05	; 5
    16a4:	75 d3       	rcall	.+1770   	; 0x1d90 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    16a6:	8f c0       	rjmp	.+286    	; 0x17c6 <usart_init_rs232+0x1de>
    16a8:	c1 15       	cp	r28, r1
    16aa:	eb e0       	ldi	r30, 0x0B	; 11
    16ac:	de 07       	cpc	r29, r30
    16ae:	21 f4       	brne	.+8      	; 0x16b8 <usart_init_rs232+0xd0>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    16b0:	61 e0       	ldi	r22, 0x01	; 1
    16b2:	86 e0       	ldi	r24, 0x06	; 6
    16b4:	6d d3       	rcall	.+1754   	; 0x1d90 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    16b6:	87 c0       	rjmp	.+270    	; 0x17c6 <usart_init_rs232+0x1de>
    16b8:	c0 34       	cpi	r28, 0x40	; 64
    16ba:	f8 e0       	ldi	r31, 0x08	; 8
    16bc:	df 07       	cpc	r29, r31
    16be:	21 f4       	brne	.+8      	; 0x16c8 <usart_init_rs232+0xe0>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    16c0:	62 e0       	ldi	r22, 0x02	; 2
    16c2:	83 e0       	ldi	r24, 0x03	; 3
    16c4:	65 d3       	rcall	.+1738   	; 0x1d90 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    16c6:	7f c0       	rjmp	.+254    	; 0x17c6 <usart_init_rs232+0x1de>
    16c8:	c0 34       	cpi	r28, 0x40	; 64
    16ca:	89 e0       	ldi	r24, 0x09	; 9
    16cc:	d8 07       	cpc	r29, r24
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    16ce:	21 f4       	brne	.+8      	; 0x16d8 <usart_init_rs232+0xf0>
    16d0:	62 e0       	ldi	r22, 0x02	; 2
    16d2:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    16d4:	5d d3       	rcall	.+1722   	; 0x1d90 <sysclk_enable_module>
    16d6:	77 c0       	rjmp	.+238    	; 0x17c6 <usart_init_rs232+0x1de>
    16d8:	c0 34       	cpi	r28, 0x40	; 64
    16da:	ea e0       	ldi	r30, 0x0A	; 10
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    16dc:	de 07       	cpc	r29, r30
    16de:	21 f4       	brne	.+8      	; 0x16e8 <usart_init_rs232+0x100>
    16e0:	62 e0       	ldi	r22, 0x02	; 2
    16e2:	85 e0       	ldi	r24, 0x05	; 5
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    16e4:	55 d3       	rcall	.+1706   	; 0x1d90 <sysclk_enable_module>
    16e6:	6f c0       	rjmp	.+222    	; 0x17c6 <usart_init_rs232+0x1de>
    16e8:	c0 39       	cpi	r28, 0x90	; 144
    16ea:	f8 e0       	ldi	r31, 0x08	; 8
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    16ec:	df 07       	cpc	r29, r31
    16ee:	21 f4       	brne	.+8      	; 0x16f8 <usart_init_rs232+0x110>
    16f0:	64 e0       	ldi	r22, 0x04	; 4
    16f2:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    16f4:	4d d3       	rcall	.+1690   	; 0x1d90 <sysclk_enable_module>
    16f6:	67 c0       	rjmp	.+206    	; 0x17c6 <usart_init_rs232+0x1de>
    16f8:	c0 39       	cpi	r28, 0x90	; 144
    16fa:	89 e0       	ldi	r24, 0x09	; 9
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    16fc:	d8 07       	cpc	r29, r24
    16fe:	21 f4       	brne	.+8      	; 0x1708 <usart_init_rs232+0x120>
    1700:	64 e0       	ldi	r22, 0x04	; 4
    1702:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1704:	45 d3       	rcall	.+1674   	; 0x1d90 <sysclk_enable_module>
    1706:	5f c0       	rjmp	.+190    	; 0x17c6 <usart_init_rs232+0x1de>
    1708:	c0 39       	cpi	r28, 0x90	; 144
    170a:	ea e0       	ldi	r30, 0x0A	; 10
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    170c:	de 07       	cpc	r29, r30
    170e:	21 f4       	brne	.+8      	; 0x1718 <usart_init_rs232+0x130>
    1710:	64 e0       	ldi	r22, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1712:	85 e0       	ldi	r24, 0x05	; 5
    1714:	3d d3       	rcall	.+1658   	; 0x1d90 <sysclk_enable_module>
    1716:	57 c0       	rjmp	.+174    	; 0x17c6 <usart_init_rs232+0x1de>
    1718:	c0 39       	cpi	r28, 0x90	; 144
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    171a:	fb e0       	ldi	r31, 0x0B	; 11
    171c:	df 07       	cpc	r29, r31
    171e:	21 f4       	brne	.+8      	; 0x1728 <usart_init_rs232+0x140>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    1720:	64 e0       	ldi	r22, 0x04	; 4
    1722:	86 e0       	ldi	r24, 0x06	; 6
    1724:	35 d3       	rcall	.+1642   	; 0x1d90 <sysclk_enable_module>
    1726:	4f c0       	rjmp	.+158    	; 0x17c6 <usart_init_rs232+0x1de>
    1728:	c0 3c       	cpi	r28, 0xC0	; 192
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    172a:	88 e0       	ldi	r24, 0x08	; 8
    172c:	d8 07       	cpc	r29, r24
    172e:	21 f4       	brne	.+8      	; 0x1738 <usart_init_rs232+0x150>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    1730:	68 e0       	ldi	r22, 0x08	; 8
    1732:	83 e0       	ldi	r24, 0x03	; 3
    1734:	2d d3       	rcall	.+1626   	; 0x1d90 <sysclk_enable_module>
    1736:	47 c0       	rjmp	.+142    	; 0x17c6 <usart_init_rs232+0x1de>
    1738:	c0 3c       	cpi	r28, 0xC0	; 192
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    173a:	e9 e0       	ldi	r30, 0x09	; 9
    173c:	de 07       	cpc	r29, r30
    173e:	21 f4       	brne	.+8      	; 0x1748 <usart_init_rs232+0x160>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    1740:	68 e0       	ldi	r22, 0x08	; 8
    1742:	84 e0       	ldi	r24, 0x04	; 4
    1744:	25 d3       	rcall	.+1610   	; 0x1d90 <sysclk_enable_module>
    1746:	3f c0       	rjmp	.+126    	; 0x17c6 <usart_init_rs232+0x1de>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    1748:	c0 3a       	cpi	r28, 0xA0	; 160
    174a:	f8 e0       	ldi	r31, 0x08	; 8
    174c:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    174e:	21 f4       	brne	.+8      	; 0x1758 <usart_init_rs232+0x170>
    1750:	60 e1       	ldi	r22, 0x10	; 16
    1752:	83 e0       	ldi	r24, 0x03	; 3
    1754:	1d d3       	rcall	.+1594   	; 0x1d90 <sysclk_enable_module>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    1756:	37 c0       	rjmp	.+110    	; 0x17c6 <usart_init_rs232+0x1de>
    1758:	c0 3a       	cpi	r28, 0xA0	; 160
    175a:	89 e0       	ldi	r24, 0x09	; 9
    175c:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    175e:	21 f4       	brne	.+8      	; 0x1768 <usart_init_rs232+0x180>
    1760:	60 e1       	ldi	r22, 0x10	; 16
    1762:	84 e0       	ldi	r24, 0x04	; 4
    1764:	15 d3       	rcall	.+1578   	; 0x1d90 <sysclk_enable_module>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    1766:	2f c0       	rjmp	.+94     	; 0x17c6 <usart_init_rs232+0x1de>
    1768:	c0 3a       	cpi	r28, 0xA0	; 160
    176a:	ea e0       	ldi	r30, 0x0A	; 10
    176c:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    176e:	21 f4       	brne	.+8      	; 0x1778 <usart_init_rs232+0x190>
    1770:	60 e1       	ldi	r22, 0x10	; 16
    1772:	85 e0       	ldi	r24, 0x05	; 5
    1774:	0d d3       	rcall	.+1562   	; 0x1d90 <sysclk_enable_module>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    1776:	27 c0       	rjmp	.+78     	; 0x17c6 <usart_init_rs232+0x1de>
    1778:	c0 3a       	cpi	r28, 0xA0	; 160
    177a:	fb e0       	ldi	r31, 0x0B	; 11
    177c:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    177e:	21 f4       	brne	.+8      	; 0x1788 <usart_init_rs232+0x1a0>
    1780:	60 e1       	ldi	r22, 0x10	; 16
    1782:	86 e0       	ldi	r24, 0x06	; 6
    1784:	05 d3       	rcall	.+1546   	; 0x1d90 <sysclk_enable_module>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    1786:	1f c0       	rjmp	.+62     	; 0x17c6 <usart_init_rs232+0x1de>
    1788:	c0 3b       	cpi	r28, 0xB0	; 176
    178a:	88 e0       	ldi	r24, 0x08	; 8
    178c:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    178e:	21 f4       	brne	.+8      	; 0x1798 <usart_init_rs232+0x1b0>
    1790:	60 e2       	ldi	r22, 0x20	; 32
    1792:	83 e0       	ldi	r24, 0x03	; 3
    1794:	fd d2       	rcall	.+1530   	; 0x1d90 <sysclk_enable_module>
    1796:	17 c0       	rjmp	.+46     	; 0x17c6 <usart_init_rs232+0x1de>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    1798:	c0 3b       	cpi	r28, 0xB0	; 176
    179a:	e9 e0       	ldi	r30, 0x09	; 9
    179c:	de 07       	cpc	r29, r30
    179e:	21 f4       	brne	.+8      	; 0x17a8 <usart_init_rs232+0x1c0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    17a0:	60 e2       	ldi	r22, 0x20	; 32
    17a2:	84 e0       	ldi	r24, 0x04	; 4
    17a4:	f5 d2       	rcall	.+1514   	; 0x1d90 <sysclk_enable_module>
    17a6:	0f c0       	rjmp	.+30     	; 0x17c6 <usart_init_rs232+0x1de>
    17a8:	c0 38       	cpi	r28, 0x80	; 128
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    17aa:	f4 e0       	ldi	r31, 0x04	; 4
    17ac:	df 07       	cpc	r29, r31
    17ae:	21 f4       	brne	.+8      	; 0x17b8 <usart_init_rs232+0x1d0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    17b0:	60 e4       	ldi	r22, 0x40	; 64
    17b2:	83 e0       	ldi	r24, 0x03	; 3
    17b4:	ed d2       	rcall	.+1498   	; 0x1d90 <sysclk_enable_module>
    17b6:	07 c0       	rjmp	.+14     	; 0x17c6 <usart_init_rs232+0x1de>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    17b8:	c0 3a       	cpi	r28, 0xA0	; 160
    17ba:	84 e0       	ldi	r24, 0x04	; 4
    17bc:	d8 07       	cpc	r29, r24
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    17be:	19 f4       	brne	.+6      	; 0x17c6 <usart_init_rs232+0x1de>
    17c0:	60 e4       	ldi	r22, 0x40	; 64
    17c2:	85 e0       	ldi	r24, 0x05	; 5
    17c4:	e5 d2       	rcall	.+1482   	; 0x1d90 <sysclk_enable_module>
    17c6:	8d 81       	ldd	r24, Y+5	; 0x05
    17c8:	8f 73       	andi	r24, 0x3F	; 63
    17ca:	8d 83       	std	Y+5, r24	; 0x05
    17cc:	f8 01       	movw	r30, r16
    17ce:	95 81       	ldd	r25, Z+5	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    17d0:	84 81       	ldd	r24, Z+4	; 0x04
    17d2:	89 2b       	or	r24, r25
    17d4:	96 81       	ldd	r25, Z+6	; 0x06
    17d6:	91 11       	cpse	r25, r1
    17d8:	98 e0       	ldi	r25, 0x08	; 8
    17da:	89 2b       	or	r24, r25
    17dc:	8d 83       	std	Y+5, r24	; 0x05
    17de:	f8 01       	movw	r30, r16
    17e0:	40 81       	ld	r20, Z
    17e2:	51 81       	ldd	r21, Z+1	; 0x01
    17e4:	62 81       	ldd	r22, Z+2	; 0x02
    17e6:	73 81       	ldd	r23, Z+3	; 0x03
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    17e8:	00 e0       	ldi	r16, 0x00	; 0
    17ea:	12 e1       	ldi	r17, 0x12	; 18
    17ec:	2a e7       	ldi	r18, 0x7A	; 122
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	ce 01       	movw	r24, r28
    17f2:	e7 dd       	rcall	.-1074   	; 0x13c2 <usart_set_baudrate>
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    17f4:	9c 81       	ldd	r25, Y+4	; 0x04
    17f6:	98 60       	ori	r25, 0x08	; 8
    17f8:	9c 83       	std	Y+4, r25	; 0x04
    17fa:	9c 81       	ldd	r25, Y+4	; 0x04
    17fc:	90 61       	ori	r25, 0x10	; 16
    17fe:	9c 83       	std	Y+4, r25	; 0x04
    1800:	df 91       	pop	r29
    1802:	cf 91       	pop	r28
    1804:	1f 91       	pop	r17
    1806:	0f 91       	pop	r16
    1808:	08 95       	ret

0000180a <usart_spi_set_baudrate>:
 * \param usart The USART(SPI) module.
 * \param baud The baudrate.
 * \param cpu_hz The CPU frequency.
 */
void usart_spi_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    180a:	cf 92       	push	r12
    180c:	df 92       	push	r13
    180e:	ef 92       	push	r14
    1810:	ff 92       	push	r15
    1812:	0f 93       	push	r16
    1814:	1f 93       	push	r17
    1816:	cf 93       	push	r28
    1818:	df 93       	push	r29
    181a:	ec 01       	movw	r28, r24
	uint16_t bsel_value;

	/* Check if baudrate is less than the maximim limit specified in
	 * datasheet */
	if (baud < (cpu_hz / 2)) {
    181c:	d9 01       	movw	r26, r18
    181e:	c8 01       	movw	r24, r16
    1820:	b6 95       	lsr	r27
    1822:	a7 95       	ror	r26
    1824:	97 95       	ror	r25
    1826:	87 95       	ror	r24
    1828:	48 17       	cp	r20, r24
    182a:	59 07       	cpc	r21, r25
    182c:	6a 07       	cpc	r22, r26
    182e:	7b 07       	cpc	r23, r27
    1830:	70 f4       	brcc	.+28     	; 0x184e <usart_spi_set_baudrate+0x44>
		bsel_value = (cpu_hz / (baud * 2)) - 1;
    1832:	6a 01       	movw	r12, r20
    1834:	7b 01       	movw	r14, r22
    1836:	cc 0c       	add	r12, r12
    1838:	dd 1c       	adc	r13, r13
    183a:	ee 1c       	adc	r14, r14
    183c:	ff 1c       	adc	r15, r15
    183e:	c9 01       	movw	r24, r18
    1840:	b8 01       	movw	r22, r16
    1842:	a7 01       	movw	r20, r14
    1844:	96 01       	movw	r18, r12
    1846:	9e d7       	rcall	.+3900   	; 0x2784 <__udivmodsi4>
    1848:	21 50       	subi	r18, 0x01	; 1
    184a:	31 09       	sbc	r19, r1
    184c:	02 c0       	rjmp	.+4      	; 0x1852 <usart_spi_set_baudrate+0x48>
	} else {
		/* If baudrate is not within the specfication in datasheet,
		 * assign maximum baudrate possible for the current CPU frequency */
		bsel_value = 0;
    184e:	20 e0       	ldi	r18, 0x00	; 0
    1850:	30 e0       	ldi	r19, 0x00	; 0
	}

	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
    1852:	83 2f       	mov	r24, r19
    1854:	8f 70       	andi	r24, 0x0F	; 15
    1856:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
    1858:	2e 83       	std	Y+6, r18	; 0x06
}
    185a:	df 91       	pop	r29
    185c:	cf 91       	pop	r28
    185e:	1f 91       	pop	r17
    1860:	0f 91       	pop	r16
    1862:	ff 90       	pop	r15
    1864:	ef 90       	pop	r14
    1866:	df 90       	pop	r13
    1868:	cf 90       	pop	r12
    186a:	08 95       	ret

0000186c <usart_init_spi>:
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    186c:	df 92       	push	r13
    186e:	ef 92       	push	r14
    1870:	ff 92       	push	r15
    1872:	0f 93       	push	r16
    1874:	1f 93       	push	r17
    1876:	cf 93       	push	r28
    1878:	df 93       	push	r29
    187a:	1f 92       	push	r1
    187c:	cd b7       	in	r28, 0x3d	; 61
    187e:	de b7       	in	r29, 0x3e	; 62
    1880:	7c 01       	movw	r14, r24
    1882:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1884:	00 97       	sbiw	r24, 0x00	; 0
    1886:	09 f4       	brne	.+2      	; 0x188a <usart_init_spi+0x1e>
    1888:	b2 c1       	rjmp	.+868    	; 0x1bee <usart_init_spi+0x382>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    188a:	80 3c       	cpi	r24, 0xC0	; 192
    188c:	91 05       	cpc	r25, r1
    188e:	21 f4       	brne	.+8      	; 0x1898 <usart_init_spi+0x2c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    1890:	60 e1       	ldi	r22, 0x10	; 16
    1892:	80 e0       	ldi	r24, 0x00	; 0
    1894:	7d d2       	rcall	.+1274   	; 0x1d90 <sysclk_enable_module>
    1896:	ab c1       	rjmp	.+854    	; 0x1bee <usart_init_spi+0x382>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    1898:	80 e8       	ldi	r24, 0x80	; 128
    189a:	e8 16       	cp	r14, r24
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	f8 06       	cpc	r15, r24
    18a0:	21 f4       	brne	.+8      	; 0x18aa <usart_init_spi+0x3e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    18a2:	62 e0       	ldi	r22, 0x02	; 2
    18a4:	80 e0       	ldi	r24, 0x00	; 0
    18a6:	74 d2       	rcall	.+1256   	; 0x1d90 <sysclk_enable_module>
    18a8:	a2 c1       	rjmp	.+836    	; 0x1bee <usart_init_spi+0x382>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    18aa:	e1 14       	cp	r14, r1
    18ac:	e1 e0       	ldi	r30, 0x01	; 1
    18ae:	fe 06       	cpc	r15, r30
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    18b0:	21 f4       	brne	.+8      	; 0x18ba <usart_init_spi+0x4e>
    18b2:	61 e0       	ldi	r22, 0x01	; 1
    18b4:	80 e0       	ldi	r24, 0x00	; 0
    18b6:	6c d2       	rcall	.+1240   	; 0x1d90 <sysclk_enable_module>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    18b8:	9a c1       	rjmp	.+820    	; 0x1bee <usart_init_spi+0x382>
    18ba:	f0 e8       	ldi	r31, 0x80	; 128
    18bc:	ef 16       	cp	r14, r31
    18be:	f3 e0       	ldi	r31, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    18c0:	ff 06       	cpc	r15, r31
    18c2:	21 f4       	brne	.+8      	; 0x18cc <usart_init_spi+0x60>
    18c4:	61 e0       	ldi	r22, 0x01	; 1
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	63 d2       	rcall	.+1222   	; 0x1d90 <sysclk_enable_module>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    18ca:	91 c1       	rjmp	.+802    	; 0x1bee <usart_init_spi+0x382>
    18cc:	30 e9       	ldi	r19, 0x90	; 144
    18ce:	e3 16       	cp	r14, r19
    18d0:	33 e0       	ldi	r19, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    18d2:	f3 06       	cpc	r15, r19
    18d4:	21 f4       	brne	.+8      	; 0x18de <usart_init_spi+0x72>
    18d6:	61 e0       	ldi	r22, 0x01	; 1
    18d8:	82 e0       	ldi	r24, 0x02	; 2
    18da:	5a d2       	rcall	.+1204   	; 0x1d90 <sysclk_enable_module>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    18dc:	88 c1       	rjmp	.+784    	; 0x1bee <usart_init_spi+0x382>
    18de:	e1 14       	cp	r14, r1
    18e0:	82 e0       	ldi	r24, 0x02	; 2
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    18e2:	f8 06       	cpc	r15, r24
    18e4:	21 f4       	brne	.+8      	; 0x18ee <usart_init_spi+0x82>
    18e6:	62 e0       	ldi	r22, 0x02	; 2
    18e8:	81 e0       	ldi	r24, 0x01	; 1
    18ea:	52 d2       	rcall	.+1188   	; 0x1d90 <sysclk_enable_module>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    18ec:	80 c1       	rjmp	.+768    	; 0x1bee <usart_init_spi+0x382>
    18ee:	e0 e4       	ldi	r30, 0x40	; 64
    18f0:	ee 16       	cp	r14, r30
    18f2:	e2 e0       	ldi	r30, 0x02	; 2
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    18f4:	fe 06       	cpc	r15, r30
    18f6:	21 f4       	brne	.+8      	; 0x1900 <usart_init_spi+0x94>
    18f8:	62 e0       	ldi	r22, 0x02	; 2
    18fa:	82 e0       	ldi	r24, 0x02	; 2
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    18fc:	49 d2       	rcall	.+1170   	; 0x1d90 <sysclk_enable_module>
    18fe:	77 c1       	rjmp	.+750    	; 0x1bee <usart_init_spi+0x382>
    1900:	f0 e2       	ldi	r31, 0x20	; 32
    1902:	ef 16       	cp	r14, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    1904:	f3 e0       	ldi	r31, 0x03	; 3
    1906:	ff 06       	cpc	r15, r31
    1908:	21 f4       	brne	.+8      	; 0x1912 <usart_init_spi+0xa6>
    190a:	64 e0       	ldi	r22, 0x04	; 4
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    190c:	82 e0       	ldi	r24, 0x02	; 2
    190e:	40 d2       	rcall	.+1152   	; 0x1d90 <sysclk_enable_module>
    1910:	6e c1       	rjmp	.+732    	; 0x1bee <usart_init_spi+0x382>
    1912:	e1 14       	cp	r14, r1
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1914:	38 e0       	ldi	r19, 0x08	; 8
    1916:	f3 06       	cpc	r15, r19
    1918:	21 f4       	brne	.+8      	; 0x1922 <usart_init_spi+0xb6>
    191a:	61 e0       	ldi	r22, 0x01	; 1
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    191c:	83 e0       	ldi	r24, 0x03	; 3
    191e:	38 d2       	rcall	.+1136   	; 0x1d90 <sysclk_enable_module>
    1920:	66 c1       	rjmp	.+716    	; 0x1bee <usart_init_spi+0x382>
    1922:	e1 14       	cp	r14, r1
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1924:	89 e0       	ldi	r24, 0x09	; 9
    1926:	f8 06       	cpc	r15, r24
    1928:	21 f4       	brne	.+8      	; 0x1932 <usart_init_spi+0xc6>
    192a:	61 e0       	ldi	r22, 0x01	; 1
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    192c:	84 e0       	ldi	r24, 0x04	; 4
    192e:	30 d2       	rcall	.+1120   	; 0x1d90 <sysclk_enable_module>
    1930:	5e c1       	rjmp	.+700    	; 0x1bee <usart_init_spi+0x382>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1932:	e1 14       	cp	r14, r1
    1934:	ea e0       	ldi	r30, 0x0A	; 10
    1936:	fe 06       	cpc	r15, r30
    1938:	21 f4       	brne	.+8      	; 0x1942 <usart_init_spi+0xd6>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    193a:	61 e0       	ldi	r22, 0x01	; 1
    193c:	85 e0       	ldi	r24, 0x05	; 5
    193e:	28 d2       	rcall	.+1104   	; 0x1d90 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    1940:	56 c1       	rjmp	.+684    	; 0x1bee <usart_init_spi+0x382>
    1942:	e1 14       	cp	r14, r1
    1944:	fb e0       	ldi	r31, 0x0B	; 11
    1946:	ff 06       	cpc	r15, r31
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    1948:	21 f4       	brne	.+8      	; 0x1952 <usart_init_spi+0xe6>
    194a:	61 e0       	ldi	r22, 0x01	; 1
    194c:	86 e0       	ldi	r24, 0x06	; 6
    194e:	20 d2       	rcall	.+1088   	; 0x1d90 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1950:	4e c1       	rjmp	.+668    	; 0x1bee <usart_init_spi+0x382>
    1952:	30 e4       	ldi	r19, 0x40	; 64
    1954:	e3 16       	cp	r14, r19
    1956:	38 e0       	ldi	r19, 0x08	; 8
    1958:	f3 06       	cpc	r15, r19
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    195a:	21 f4       	brne	.+8      	; 0x1964 <usart_init_spi+0xf8>
    195c:	62 e0       	ldi	r22, 0x02	; 2
    195e:	83 e0       	ldi	r24, 0x03	; 3
    1960:	17 d2       	rcall	.+1070   	; 0x1d90 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1962:	45 c1       	rjmp	.+650    	; 0x1bee <usart_init_spi+0x382>
    1964:	80 e4       	ldi	r24, 0x40	; 64
    1966:	e8 16       	cp	r14, r24
    1968:	89 e0       	ldi	r24, 0x09	; 9
    196a:	f8 06       	cpc	r15, r24
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    196c:	21 f4       	brne	.+8      	; 0x1976 <usart_init_spi+0x10a>
    196e:	62 e0       	ldi	r22, 0x02	; 2
    1970:	84 e0       	ldi	r24, 0x04	; 4
    1972:	0e d2       	rcall	.+1052   	; 0x1d90 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1974:	3c c1       	rjmp	.+632    	; 0x1bee <usart_init_spi+0x382>
    1976:	e0 e4       	ldi	r30, 0x40	; 64
    1978:	ee 16       	cp	r14, r30
    197a:	ea e0       	ldi	r30, 0x0A	; 10
    197c:	fe 06       	cpc	r15, r30
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    197e:	21 f4       	brne	.+8      	; 0x1988 <usart_init_spi+0x11c>
    1980:	62 e0       	ldi	r22, 0x02	; 2
    1982:	85 e0       	ldi	r24, 0x05	; 5
    1984:	05 d2       	rcall	.+1034   	; 0x1d90 <sysclk_enable_module>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1986:	33 c1       	rjmp	.+614    	; 0x1bee <usart_init_spi+0x382>
    1988:	f0 e9       	ldi	r31, 0x90	; 144
    198a:	ef 16       	cp	r14, r31
    198c:	f8 e0       	ldi	r31, 0x08	; 8
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    198e:	ff 06       	cpc	r15, r31
    1990:	21 f4       	brne	.+8      	; 0x199a <usart_init_spi+0x12e>
    1992:	64 e0       	ldi	r22, 0x04	; 4
    1994:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1996:	fc d1       	rcall	.+1016   	; 0x1d90 <sysclk_enable_module>
    1998:	2a c1       	rjmp	.+596    	; 0x1bee <usart_init_spi+0x382>
    199a:	30 e9       	ldi	r19, 0x90	; 144
    199c:	e3 16       	cp	r14, r19
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    199e:	39 e0       	ldi	r19, 0x09	; 9
    19a0:	f3 06       	cpc	r15, r19
    19a2:	21 f4       	brne	.+8      	; 0x19ac <usart_init_spi+0x140>
    19a4:	64 e0       	ldi	r22, 0x04	; 4
    19a6:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    19a8:	f3 d1       	rcall	.+998    	; 0x1d90 <sysclk_enable_module>
    19aa:	21 c1       	rjmp	.+578    	; 0x1bee <usart_init_spi+0x382>
    19ac:	80 e9       	ldi	r24, 0x90	; 144
    19ae:	e8 16       	cp	r14, r24
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    19b0:	8a e0       	ldi	r24, 0x0A	; 10
    19b2:	f8 06       	cpc	r15, r24
    19b4:	21 f4       	brne	.+8      	; 0x19be <usart_init_spi+0x152>
    19b6:	64 e0       	ldi	r22, 0x04	; 4
    19b8:	85 e0       	ldi	r24, 0x05	; 5
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    19ba:	ea d1       	rcall	.+980    	; 0x1d90 <sysclk_enable_module>
    19bc:	18 c1       	rjmp	.+560    	; 0x1bee <usart_init_spi+0x382>
    19be:	e0 e9       	ldi	r30, 0x90	; 144
    19c0:	ee 16       	cp	r14, r30
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    19c2:	eb e0       	ldi	r30, 0x0B	; 11
    19c4:	fe 06       	cpc	r15, r30
    19c6:	21 f4       	brne	.+8      	; 0x19d0 <usart_init_spi+0x164>
    19c8:	64 e0       	ldi	r22, 0x04	; 4
    19ca:	86 e0       	ldi	r24, 0x06	; 6
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    19cc:	e1 d1       	rcall	.+962    	; 0x1d90 <sysclk_enable_module>
    19ce:	0f c1       	rjmp	.+542    	; 0x1bee <usart_init_spi+0x382>
    19d0:	f0 ec       	ldi	r31, 0xC0	; 192
    19d2:	ef 16       	cp	r14, r31
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    19d4:	f8 e0       	ldi	r31, 0x08	; 8
    19d6:	ff 06       	cpc	r15, r31
    19d8:	21 f4       	brne	.+8      	; 0x19e2 <usart_init_spi+0x176>
    19da:	68 e0       	ldi	r22, 0x08	; 8
    19dc:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    19de:	d8 d1       	rcall	.+944    	; 0x1d90 <sysclk_enable_module>
    19e0:	06 c1       	rjmp	.+524    	; 0x1bee <usart_init_spi+0x382>
    19e2:	30 ec       	ldi	r19, 0xC0	; 192
    19e4:	e3 16       	cp	r14, r19
    19e6:	39 e0       	ldi	r19, 0x09	; 9
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    19e8:	f3 06       	cpc	r15, r19
    19ea:	21 f4       	brne	.+8      	; 0x19f4 <usart_init_spi+0x188>
    19ec:	68 e0       	ldi	r22, 0x08	; 8
    19ee:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    19f0:	cf d1       	rcall	.+926    	; 0x1d90 <sysclk_enable_module>
    19f2:	fd c0       	rjmp	.+506    	; 0x1bee <usart_init_spi+0x382>
    19f4:	80 ea       	ldi	r24, 0xA0	; 160
    19f6:	e8 16       	cp	r14, r24
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    19f8:	88 e0       	ldi	r24, 0x08	; 8
    19fa:	f8 06       	cpc	r15, r24
    19fc:	61 f4       	brne	.+24     	; 0x1a16 <usart_init_spi+0x1aa>
    19fe:	60 e1       	ldi	r22, 0x10	; 16
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    1a00:	83 e0       	ldi	r24, 0x03	; 3
    1a02:	c6 d1       	rcall	.+908    	; 0x1d90 <sysclk_enable_module>
    1a04:	e0 ea       	ldi	r30, 0xA0	; 160
    1a06:	f8 e0       	ldi	r31, 0x08	; 8
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    1a08:	84 81       	ldd	r24, Z+4	; 0x04
    1a0a:	8f 7e       	andi	r24, 0xEF	; 239
    1a0c:	84 83       	std	Z+4, r24	; 0x04
    1a0e:	f8 01       	movw	r30, r16
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    1a10:	24 81       	ldd	r18, Z+4	; 0x04
    1a12:	22 50       	subi	r18, 0x02	; 2
    1a14:	4c c0       	rjmp	.+152    	; 0x1aae <usart_init_spi+0x242>
    1a16:	f0 ea       	ldi	r31, 0xA0	; 160
    1a18:	ef 16       	cp	r14, r31
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    1a1a:	f9 e0       	ldi	r31, 0x09	; 9
    1a1c:	ff 06       	cpc	r15, r31
    1a1e:	21 f4       	brne	.+8      	; 0x1a28 <usart_init_spi+0x1bc>
    1a20:	60 e1       	ldi	r22, 0x10	; 16
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    1a22:	84 e0       	ldi	r24, 0x04	; 4
    1a24:	b5 d1       	rcall	.+874    	; 0x1d90 <sysclk_enable_module>
    1a26:	e3 c0       	rjmp	.+454    	; 0x1bee <usart_init_spi+0x382>
    1a28:	30 ea       	ldi	r19, 0xA0	; 160
    1a2a:	e3 16       	cp	r14, r19
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    1a2c:	3a e0       	ldi	r19, 0x0A	; 10
    1a2e:	f3 06       	cpc	r15, r19
    1a30:	21 f4       	brne	.+8      	; 0x1a3a <usart_init_spi+0x1ce>
    1a32:	60 e1       	ldi	r22, 0x10	; 16
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    1a34:	85 e0       	ldi	r24, 0x05	; 5
    1a36:	ac d1       	rcall	.+856    	; 0x1d90 <sysclk_enable_module>
    1a38:	da c0       	rjmp	.+436    	; 0x1bee <usart_init_spi+0x382>
    1a3a:	80 ea       	ldi	r24, 0xA0	; 160
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    1a3c:	e8 16       	cp	r14, r24
    1a3e:	8b e0       	ldi	r24, 0x0B	; 11
    1a40:	f8 06       	cpc	r15, r24
    1a42:	21 f4       	brne	.+8      	; 0x1a4c <usart_init_spi+0x1e0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    1a44:	60 e1       	ldi	r22, 0x10	; 16
    1a46:	86 e0       	ldi	r24, 0x06	; 6
    1a48:	a3 d1       	rcall	.+838    	; 0x1d90 <sysclk_enable_module>
    1a4a:	d1 c0       	rjmp	.+418    	; 0x1bee <usart_init_spi+0x382>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    1a4c:	e0 eb       	ldi	r30, 0xB0	; 176
    1a4e:	ee 16       	cp	r14, r30
    1a50:	e8 e0       	ldi	r30, 0x08	; 8
    1a52:	fe 06       	cpc	r15, r30
    1a54:	21 f4       	brne	.+8      	; 0x1a5e <usart_init_spi+0x1f2>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    1a56:	60 e2       	ldi	r22, 0x20	; 32
    1a58:	83 e0       	ldi	r24, 0x03	; 3
    1a5a:	9a d1       	rcall	.+820    	; 0x1d90 <sysclk_enable_module>
    1a5c:	c8 c0       	rjmp	.+400    	; 0x1bee <usart_init_spi+0x382>
    1a5e:	f0 eb       	ldi	r31, 0xB0	; 176
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    1a60:	ef 16       	cp	r14, r31
    1a62:	f9 e0       	ldi	r31, 0x09	; 9
    1a64:	ff 06       	cpc	r15, r31
    1a66:	21 f4       	brne	.+8      	; 0x1a70 <usart_init_spi+0x204>
    1a68:	60 e2       	ldi	r22, 0x20	; 32
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1a6a:	84 e0       	ldi	r24, 0x04	; 4
    1a6c:	91 d1       	rcall	.+802    	; 0x1d90 <sysclk_enable_module>
    1a6e:	bf c0       	rjmp	.+382    	; 0x1bee <usart_init_spi+0x382>
    1a70:	30 e8       	ldi	r19, 0x80	; 128
    1a72:	e3 16       	cp	r14, r19
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    1a74:	34 e0       	ldi	r19, 0x04	; 4
    1a76:	f3 06       	cpc	r15, r19
    1a78:	21 f4       	brne	.+8      	; 0x1a82 <usart_init_spi+0x216>
    1a7a:	60 e4       	ldi	r22, 0x40	; 64
    1a7c:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1a7e:	88 d1       	rcall	.+784    	; 0x1d90 <sysclk_enable_module>
    1a80:	b6 c0       	rjmp	.+364    	; 0x1bee <usart_init_spi+0x382>
    1a82:	80 ea       	ldi	r24, 0xA0	; 160
    1a84:	e8 16       	cp	r14, r24
    1a86:	84 e0       	ldi	r24, 0x04	; 4
    1a88:	f8 06       	cpc	r15, r24
    1a8a:	21 f4       	brne	.+8      	; 0x1a94 <usart_init_spi+0x228>
    1a8c:	60 e4       	ldi	r22, 0x40	; 64
    1a8e:	85 e0       	ldi	r24, 0x05	; 5
    1a90:	7f d1       	rcall	.+766    	; 0x1d90 <sysclk_enable_module>
    1a92:	ad c0       	rjmp	.+346    	; 0x1bee <usart_init_spi+0x382>
    1a94:	f7 01       	movw	r30, r14
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    1a96:	84 81       	ldd	r24, Z+4	; 0x04
    1a98:	8f 7e       	andi	r24, 0xEF	; 239
    1a9a:	84 83       	std	Z+4, r24	; 0x04
    1a9c:	fb 01       	movw	r30, r22
    1a9e:	24 81       	ldd	r18, Z+4	; 0x04
    1aa0:	22 50       	subi	r18, 0x02	; 2
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
    1aa2:	c7 01       	movw	r24, r14
    1aa4:	f0 ea       	ldi	r31, 0xA0	; 160
    1aa6:	ef 16       	cp	r14, r31
    1aa8:	f8 e0       	ldi	r31, 0x08	; 8
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
    1aaa:	ff 06       	cpc	r15, r31
    1aac:	49 f4       	brne	.+18     	; 0x1ac0 <usart_init_spi+0x254>
    1aae:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <__TEXT_REGION_LENGTH__+0x70064e>
    1ab2:	84 fd       	sbrc	r24, 4
		sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
    1ab4:	a5 c0       	rjmp	.+330    	; 0x1c00 <usart_init_spi+0x394>
    1ab6:	0f 2e       	mov	r0, r31
    1ab8:	f1 e1       	ldi	r31, 0x11	; 17
    1aba:	df 2e       	mov	r13, r31
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
	}
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
    1abc:	f0 2d       	mov	r31, r0
    1abe:	a4 c0       	rjmp	.+328    	; 0x1c08 <usart_init_spi+0x39c>
    1ac0:	80 3b       	cpi	r24, 0xB0	; 176
    1ac2:	38 e0       	ldi	r19, 0x08	; 8
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
    1ac4:	93 07       	cpc	r25, r19
    1ac6:	91 f0       	breq	.+36     	; 0x1aec <usart_init_spi+0x280>
    1ac8:	80 3a       	cpi	r24, 0xA0	; 160
    1aca:	e9 e0       	ldi	r30, 0x09	; 9
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
    1acc:	9e 07       	cpc	r25, r30
    1ace:	49 f4       	brne	.+18     	; 0x1ae2 <usart_init_spi+0x276>
    1ad0:	30 91 6e 06 	lds	r19, 0x066E	; 0x80066e <__TEXT_REGION_LENGTH__+0x70066e>
    1ad4:	34 fd       	sbrc	r19, 4
		sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
    1ad6:	9b c0       	rjmp	.+310    	; 0x1c0e <usart_init_spi+0x3a2>
    1ad8:	0f 2e       	mov	r0, r31
    1ada:	f9 e1       	ldi	r31, 0x19	; 25
    1adc:	df 2e       	mov	r13, r31
    1ade:	f0 2d       	mov	r31, r0
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    1ae0:	16 c0       	rjmp	.+44     	; 0x1b0e <usart_init_spi+0x2a2>
    1ae2:	80 3b       	cpi	r24, 0xB0	; 176
    1ae4:	f9 e0       	ldi	r31, 0x09	; 9
    1ae6:	9f 07       	cpc	r25, r31
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
	}
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
    1ae8:	f1 f0       	breq	.+60     	; 0x1b26 <usart_init_spi+0x2ba>
    1aea:	04 c0       	rjmp	.+8      	; 0x1af4 <usart_init_spi+0x288>
    1aec:	0f 2e       	mov	r0, r31
    1aee:	f5 e1       	ldi	r31, 0x15	; 21
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
    1af0:	df 2e       	mov	r13, r31
    1af2:	f0 2d       	mov	r31, r0
    1af4:	80 3a       	cpi	r24, 0xA0	; 160
    1af6:	3a e0       	ldi	r19, 0x0A	; 10
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 1);
    1af8:	93 07       	cpc	r25, r19
    1afa:	49 f4       	brne	.+18     	; 0x1b0e <usart_init_spi+0x2a2>
    1afc:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <__TEXT_REGION_LENGTH__+0x70068e>
    1b00:	84 fd       	sbrc	r24, 4
	if ((uint16_t)usart == (uint16_t)&USARTE1) {
		sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
	}
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
    1b02:	8a c0       	rjmp	.+276    	; 0x1c18 <usart_init_spi+0x3ac>
    1b04:	0f 2e       	mov	r0, r31
    1b06:	f1 e2       	ldi	r31, 0x21	; 33
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
    1b08:	df 2e       	mov	r13, r31
    1b0a:	f0 2d       	mov	r31, r0
    1b0c:	15 c0       	rjmp	.+42     	; 0x1b38 <usart_init_spi+0x2cc>
    1b0e:	80 3a       	cpi	r24, 0xA0	; 160
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 1);
    1b10:	9b 40       	sbci	r25, 0x0B	; 11
    1b12:	91 f4       	brne	.+36     	; 0x1b38 <usart_init_spi+0x2cc>
    1b14:	80 91 ae 06 	lds	r24, 0x06AE	; 0x8006ae <__TEXT_REGION_LENGTH__+0x7006ae>
    1b18:	84 fd       	sbrc	r24, 4
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    1b1a:	0a c0       	rjmp	.+20     	; 0x1b30 <usart_init_spi+0x2c4>
    1b1c:	0f 2e       	mov	r0, r31
    1b1e:	f9 e2       	ldi	r31, 0x29	; 41
    1b20:	df 2e       	mov	r13, r31
    1b22:	f0 2d       	mov	r31, r0
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
    1b24:	09 c0       	rjmp	.+18     	; 0x1b38 <usart_init_spi+0x2cc>
    1b26:	0f 2e       	mov	r0, r31
    1b28:	fd e1       	ldi	r31, 0x1D	; 29
    1b2a:	df 2e       	mov	r13, r31
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    1b2c:	f0 2d       	mov	r31, r0
    1b2e:	04 c0       	rjmp	.+8      	; 0x1b38 <usart_init_spi+0x2cc>
    1b30:	0f 2e       	mov	r0, r31
    1b32:	fd e2       	ldi	r31, 0x2D	; 45
    1b34:	df 2e       	mov	r13, r31
    1b36:	f0 2d       	mov	r31, r0
    1b38:	ed 2d       	mov	r30, r13
    1b3a:	e6 95       	lsr	r30
    1b3c:	e6 95       	lsr	r30
    1b3e:	e6 95       	lsr	r30
    1b40:	30 e2       	ldi	r19, 0x20	; 32
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    1b42:	e3 9f       	mul	r30, r19
    1b44:	f0 01       	movw	r30, r0
    1b46:	11 24       	eor	r1, r1
    1b48:	fa 5f       	subi	r31, 0xFA	; 250
    1b4a:	3d 2d       	mov	r19, r13
    1b4c:	37 70       	andi	r19, 0x07	; 7
    1b4e:	81 e0       	ldi	r24, 0x01	; 1
    1b50:	90 e0       	ldi	r25, 0x00	; 0
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    1b52:	03 2e       	mov	r0, r19
	}
#endif

	/* Configure the USART output pin */
	ioport_set_pin_dir(sck_pin, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(sck_pin,
    1b54:	02 c0       	rjmp	.+4      	; 0x1b5a <usart_init_spi+0x2ee>
    1b56:	88 0f       	add	r24, r24
    1b58:	99 1f       	adc	r25, r25
    1b5a:	0a 94       	dec	r0
    1b5c:	e2 f7       	brpl	.-8      	; 0x1b56 <usart_init_spi+0x2ea>
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));
    1b5e:	81 83       	std	Z+1, r24	; 0x01
    1b60:	22 30       	cpi	r18, 0x02	; 2

__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
    1b62:	10 f0       	brcs	.+4      	; 0x1b68 <usart_init_spi+0x2fc>
    1b64:	40 e0       	ldi	r20, 0x00	; 0

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1b66:	01 c0       	rjmp	.+2      	; 0x1b6a <usart_init_spi+0x2fe>
    1b68:	40 e4       	ldi	r20, 0x40	; 64
	cpu_irq_disable();
    1b6a:	df 01       	movw	r26, r30
	return flags;
    1b6c:	50 96       	adiw	r26, 0x10	; 16
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    1b6e:	a3 0f       	add	r26, r19
    1b70:	b1 1d       	adc	r27, r1
    1b72:	9f b7       	in	r25, 0x3f	; 63
	*pin_ctrl |= mode;
    1b74:	99 83       	std	Y+1, r25	; 0x01
    1b76:	f8 94       	cli
    1b78:	39 81       	ldd	r19, Y+1	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1b7a:	2c 91       	ld	r18, X
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1b7c:	27 70       	andi	r18, 0x07	; 7
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    1b7e:	2c 93       	st	X, r18
    1b80:	9c 91       	ld	r25, X
    1b82:	94 2b       	or	r25, r20
    1b84:	9c 93       	st	X, r25
			IOPORT_MODE_TOTEM | (invert_sck? IOPORT_MODE_INVERT_PIN : 0));
	ioport_set_pin_level(sck_pin, IOPORT_PIN_LEVEL_HIGH);

	usart_set_mode(usart, USART_CMODE_MSPI_gc);

	if (opt->spimode == 1 || opt->spimode == 3) {
    1b86:	3f bf       	out	0x3f, r19	; 63
    1b88:	85 83       	std	Z+5, r24	; 0x05
    1b8a:	f7 01       	movw	r30, r14
    1b8c:	85 81       	ldd	r24, Z+5	; 0x05
    1b8e:	80 6c       	ori	r24, 0xC0	; 192
		usart->CTRLC |= USART_UCPHA_bm;
    1b90:	85 83       	std	Z+5, r24	; 0x05
    1b92:	f8 01       	movw	r30, r16
    1b94:	84 81       	ldd	r24, Z+4	; 0x04
    1b96:	8d 7f       	andi	r24, 0xFD	; 253
	} else {
		usart->CTRLC &= ~USART_UCPHA_bm;
    1b98:	81 30       	cpi	r24, 0x01	; 1
    1b9a:	29 f4       	brne	.+10     	; 0x1ba6 <usart_init_spi+0x33a>
    1b9c:	f7 01       	movw	r30, r14
    1b9e:	85 81       	ldd	r24, Z+5	; 0x05
	}
	if (opt->data_order) {
    1ba0:	82 60       	ori	r24, 0x02	; 2
    1ba2:	85 83       	std	Z+5, r24	; 0x05
    1ba4:	04 c0       	rjmp	.+8      	; 0x1bae <usart_init_spi+0x342>
    1ba6:	f7 01       	movw	r30, r14
		(usart)->CTRLC |= USART_DORD_bm;
    1ba8:	85 81       	ldd	r24, Z+5	; 0x05
    1baa:	8d 7f       	andi	r24, 0xFD	; 253
    1bac:	85 83       	std	Z+5, r24	; 0x05
    1bae:	f8 01       	movw	r30, r16
    1bb0:	85 81       	ldd	r24, Z+5	; 0x05
	} else {
		(usart)->CTRLC &= ~USART_DORD_bm;
    1bb2:	88 23       	and	r24, r24
    1bb4:	29 f0       	breq	.+10     	; 0x1bc0 <usart_init_spi+0x354>
    1bb6:	f7 01       	movw	r30, r14
    1bb8:	85 81       	ldd	r24, Z+5	; 0x05
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    1bba:	84 60       	ori	r24, 0x04	; 4
    1bbc:	85 83       	std	Z+5, r24	; 0x05
    1bbe:	04 c0       	rjmp	.+8      	; 0x1bc8 <usart_init_spi+0x35c>
    1bc0:	f7 01       	movw	r30, r14
    1bc2:	85 81       	ldd	r24, Z+5	; 0x05
    1bc4:	8b 7f       	andi	r24, 0xFB	; 251
    1bc6:	85 83       	std	Z+5, r24	; 0x05
    1bc8:	f8 01       	movw	r30, r16
    1bca:	40 81       	ld	r20, Z
    1bcc:	51 81       	ldd	r21, Z+1	; 0x01
    1bce:	62 81       	ldd	r22, Z+2	; 0x02
    1bd0:	73 81       	ldd	r23, Z+3	; 0x03
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    1bd2:	00 e0       	ldi	r16, 0x00	; 0
    1bd4:	12 e1       	ldi	r17, 0x12	; 18
    1bd6:	2a e7       	ldi	r18, 0x7A	; 122
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    1bda:	c7 01       	movw	r24, r14
    1bdc:	16 de       	rcall	.-980    	; 0x180a <usart_spi_set_baudrate>
    1bde:	f7 01       	movw	r30, r14
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    1be0:	84 81       	ldd	r24, Z+4	; 0x04
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    1be2:	88 60       	ori	r24, 0x08	; 8
    1be4:	84 83       	std	Z+4, r24	; 0x04
    1be6:	84 81       	ldd	r24, Z+4	; 0x04
    1be8:	80 61       	ori	r24, 0x10	; 16
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    1bea:	84 83       	std	Z+4, r24	; 0x04
    1bec:	1a c0       	rjmp	.+52     	; 0x1c22 <usart_init_spi+0x3b6>
    1bee:	f7 01       	movw	r30, r14
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    1bf0:	84 81       	ldd	r24, Z+4	; 0x04
    1bf2:	8f 7e       	andi	r24, 0xEF	; 239
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    1bf4:	84 83       	std	Z+4, r24	; 0x04
    1bf6:	f8 01       	movw	r30, r16
    1bf8:	24 81       	ldd	r18, Z+4	; 0x04
    1bfa:	22 50       	subi	r18, 0x02	; 2
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    1bfc:	c7 01       	movw	r24, r14
    1bfe:	60 cf       	rjmp	.-320    	; 0x1ac0 <usart_init_spi+0x254>
    1c00:	0f 2e       	mov	r0, r31
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    1c02:	f5 e1       	ldi	r31, 0x15	; 21
    1c04:	df 2e       	mov	r13, r31
    1c06:	f0 2d       	mov	r31, r0
    1c08:	80 ea       	ldi	r24, 0xA0	; 160
    1c0a:	98 e0       	ldi	r25, 0x08	; 8
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
    1c0c:	6a cf       	rjmp	.-300    	; 0x1ae2 <usart_init_spi+0x276>
    1c0e:	0f 2e       	mov	r0, r31
    1c10:	fd e1       	ldi	r31, 0x1D	; 29
    1c12:	df 2e       	mov	r13, r31
    1c14:	f0 2d       	mov	r31, r0
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    1c16:	7b cf       	rjmp	.-266    	; 0x1b0e <usart_init_spi+0x2a2>
    1c18:	0f 2e       	mov	r0, r31
    1c1a:	f5 e2       	ldi	r31, 0x25	; 37
    1c1c:	df 2e       	mov	r13, r31
    1c1e:	f0 2d       	mov	r31, r0
    1c20:	8b cf       	rjmp	.-234    	; 0x1b38 <usart_init_spi+0x2cc>
    1c22:	0f 90       	pop	r0
    1c24:	df 91       	pop	r29
    1c26:	cf 91       	pop	r28
    1c28:	1f 91       	pop	r17
    1c2a:	0f 91       	pop	r16
    1c2c:	ff 90       	pop	r15
    1c2e:	ef 90       	pop	r14
    1c30:	df 90       	pop	r13
    1c32:	08 95       	ret

00001c34 <usart_spi_init>:
		*data = usart_spi_transmit(usart, CONFIG_USART_SPI_DUMMY);
		len--;
		data++;
 	}
	return STATUS_OK;
}
    1c34:	80 3a       	cpi	r24, 0xA0	; 160
    1c36:	28 e0       	ldi	r18, 0x08	; 8
    1c38:	92 07       	cpc	r25, r18
    1c3a:	21 f4       	brne	.+8      	; 0x1c44 <usart_spi_init+0x10>
    1c3c:	60 e1       	ldi	r22, 0x10	; 16
    1c3e:	83 e0       	ldi	r24, 0x03	; 3
    1c40:	a7 c0       	rjmp	.+334    	; 0x1d90 <sysclk_enable_module>
    1c42:	08 95       	ret
    1c44:	80 3b       	cpi	r24, 0xB0	; 176
    1c46:	28 e0       	ldi	r18, 0x08	; 8
    1c48:	92 07       	cpc	r25, r18
    1c4a:	21 f4       	brne	.+8      	; 0x1c54 <usart_spi_init+0x20>
    1c4c:	60 e2       	ldi	r22, 0x20	; 32
    1c4e:	83 e0       	ldi	r24, 0x03	; 3
    1c50:	9f c0       	rjmp	.+318    	; 0x1d90 <sysclk_enable_module>
    1c52:	08 95       	ret
    1c54:	80 3a       	cpi	r24, 0xA0	; 160
    1c56:	29 e0       	ldi	r18, 0x09	; 9
    1c58:	92 07       	cpc	r25, r18
    1c5a:	21 f4       	brne	.+8      	; 0x1c64 <usart_spi_init+0x30>
    1c5c:	60 e1       	ldi	r22, 0x10	; 16
    1c5e:	84 e0       	ldi	r24, 0x04	; 4
    1c60:	97 c0       	rjmp	.+302    	; 0x1d90 <sysclk_enable_module>
    1c62:	08 95       	ret
    1c64:	80 3b       	cpi	r24, 0xB0	; 176
    1c66:	29 e0       	ldi	r18, 0x09	; 9
    1c68:	92 07       	cpc	r25, r18
    1c6a:	21 f4       	brne	.+8      	; 0x1c74 <usart_spi_init+0x40>
    1c6c:	60 e2       	ldi	r22, 0x20	; 32
    1c6e:	84 e0       	ldi	r24, 0x04	; 4
    1c70:	8f c0       	rjmp	.+286    	; 0x1d90 <sysclk_enable_module>
    1c72:	08 95       	ret
    1c74:	80 3a       	cpi	r24, 0xA0	; 160
    1c76:	2a e0       	ldi	r18, 0x0A	; 10
    1c78:	92 07       	cpc	r25, r18
    1c7a:	21 f4       	brne	.+8      	; 0x1c84 <usart_spi_init+0x50>
    1c7c:	60 e1       	ldi	r22, 0x10	; 16
    1c7e:	85 e0       	ldi	r24, 0x05	; 5
    1c80:	87 c0       	rjmp	.+270    	; 0x1d90 <sysclk_enable_module>
    1c82:	08 95       	ret
    1c84:	80 3a       	cpi	r24, 0xA0	; 160
    1c86:	9b 40       	sbci	r25, 0x0B	; 11
    1c88:	19 f4       	brne	.+6      	; 0x1c90 <usart_spi_init+0x5c>
    1c8a:	60 e1       	ldi	r22, 0x10	; 16
    1c8c:	86 e0       	ldi	r24, 0x06	; 6
    1c8e:	80 c0       	rjmp	.+256    	; 0x1d90 <sysclk_enable_module>
    1c90:	08 95       	ret

00001c92 <usart_spi_setup_device>:
    1c92:	0f 93       	push	r16
    1c94:	1f 93       	push	r17
    1c96:	cf 93       	push	r28
    1c98:	df 93       	push	r29
    1c9a:	00 d0       	rcall	.+0      	; 0x1c9c <usart_spi_setup_device+0xa>
    1c9c:	00 d0       	rcall	.+0      	; 0x1c9e <usart_spi_setup_device+0xc>
    1c9e:	cd b7       	in	r28, 0x3d	; 61
    1ca0:	de b7       	in	r29, 0x3e	; 62
    1ca2:	09 83       	std	Y+1, r16	; 0x01
    1ca4:	1a 83       	std	Y+2, r17	; 0x02
    1ca6:	2b 83       	std	Y+3, r18	; 0x03
    1ca8:	3c 83       	std	Y+4, r19	; 0x04
    1caa:	4d 83       	std	Y+5, r20	; 0x05
    1cac:	1e 82       	std	Y+6, r1	; 0x06
    1cae:	be 01       	movw	r22, r28
    1cb0:	6f 5f       	subi	r22, 0xFF	; 255
    1cb2:	7f 4f       	sbci	r23, 0xFF	; 255
    1cb4:	db dd       	rcall	.-1098   	; 0x186c <usart_init_spi>
    1cb6:	26 96       	adiw	r28, 0x06	; 6
    1cb8:	cd bf       	out	0x3d, r28	; 61
    1cba:	de bf       	out	0x3e, r29	; 62
    1cbc:	df 91       	pop	r29
    1cbe:	cf 91       	pop	r28
    1cc0:	1f 91       	pop	r17
    1cc2:	0f 91       	pop	r16
    1cc4:	08 95       	ret

00001cc6 <usart_spi_select_device>:

void usart_spi_select_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_low(device->id);
    1cc6:	fb 01       	movw	r30, r22
    1cc8:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    1cca:	e8 2f       	mov	r30, r24
    1ccc:	e6 95       	lsr	r30
    1cce:	e6 95       	lsr	r30
    1cd0:	e6 95       	lsr	r30
    1cd2:	40 e2       	ldi	r20, 0x20	; 32
    1cd4:	e4 9f       	mul	r30, r20
    1cd6:	f0 01       	movw	r30, r0
    1cd8:	11 24       	eor	r1, r1
    1cda:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    1cdc:	87 70       	andi	r24, 0x07	; 7
    1cde:	21 e0       	ldi	r18, 0x01	; 1
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	a9 01       	movw	r20, r18
    1ce4:	02 c0       	rjmp	.+4      	; 0x1cea <usart_spi_select_device+0x24>
    1ce6:	44 0f       	add	r20, r20
    1ce8:	55 1f       	adc	r21, r21
    1cea:	8a 95       	dec	r24
    1cec:	e2 f7       	brpl	.-8      	; 0x1ce6 <usart_spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1cee:	46 83       	std	Z+6, r20	; 0x06
    1cf0:	08 95       	ret

00001cf2 <usart_spi_deselect_device>:
}

void usart_spi_deselect_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_high(device->id);
    1cf2:	fb 01       	movw	r30, r22
    1cf4:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    1cf6:	e8 2f       	mov	r30, r24
    1cf8:	e6 95       	lsr	r30
    1cfa:	e6 95       	lsr	r30
    1cfc:	e6 95       	lsr	r30
    1cfe:	40 e2       	ldi	r20, 0x20	; 32
    1d00:	e4 9f       	mul	r30, r20
    1d02:	f0 01       	movw	r30, r0
    1d04:	11 24       	eor	r1, r1
    1d06:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    1d08:	87 70       	andi	r24, 0x07	; 7
    1d0a:	21 e0       	ldi	r18, 0x01	; 1
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	a9 01       	movw	r20, r18
    1d10:	02 c0       	rjmp	.+4      	; 0x1d16 <usart_spi_deselect_device+0x24>
    1d12:	44 0f       	add	r20, r20
    1d14:	55 1f       	adc	r21, r21
    1d16:	8a 95       	dec	r24
    1d18:	e2 f7       	brpl	.-8      	; 0x1d12 <usart_spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1d1a:	45 83       	std	Z+5, r20	; 0x05
    1d1c:	08 95       	ret

00001d1e <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    1d1e:	cf 93       	push	r28
    1d20:	df 93       	push	r29
    1d22:	1f 92       	push	r1
    1d24:	1f 92       	push	r1
    1d26:	cd b7       	in	r28, 0x3d	; 61
    1d28:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    1d2a:	8f ef       	ldi	r24, 0xFF	; 255
    1d2c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    1d30:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    1d34:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    1d38:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    1d3c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    1d40:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    1d44:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
    1d48:	6c e0       	ldi	r22, 0x0C	; 12
    1d4a:	81 e4       	ldi	r24, 0x41	; 65
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	36 d0       	rcall	.+108    	; 0x1dbc <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1d50:	8f b7       	in	r24, 0x3f	; 63
    1d52:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    1d54:	f8 94       	cli
	return flags;
    1d56:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    1d58:	e0 e5       	ldi	r30, 0x50	; 80
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	80 81       	ld	r24, Z
    1d5e:	82 60       	ori	r24, 0x02	; 2
    1d60:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1d62:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1d64:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    1d66:	81 ff       	sbrs	r24, 1
    1d68:	fd cf       	rjmp	.-6      	; 0x1d64 <sysclk_init+0x46>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    1d6a:	61 e0       	ldi	r22, 0x01	; 1
    1d6c:	80 e4       	ldi	r24, 0x40	; 64
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	25 d0       	rcall	.+74     	; 0x1dbc <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1d72:	8f b7       	in	r24, 0x3f	; 63
    1d74:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1d76:	f8 94       	cli
	return flags;
    1d78:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    1d7a:	e0 e5       	ldi	r30, 0x50	; 80
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	80 81       	ld	r24, Z
    1d80:	8e 7f       	andi	r24, 0xFE	; 254
    1d82:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1d84:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    1d86:	0f 90       	pop	r0
    1d88:	0f 90       	pop	r0
    1d8a:	df 91       	pop	r29
    1d8c:	cf 91       	pop	r28
    1d8e:	08 95       	ret

00001d90 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    1d90:	cf 93       	push	r28
    1d92:	df 93       	push	r29
    1d94:	1f 92       	push	r1
    1d96:	cd b7       	in	r28, 0x3d	; 61
    1d98:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1d9a:	9f b7       	in	r25, 0x3f	; 63
    1d9c:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1d9e:	f8 94       	cli
	return flags;
    1da0:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    1da2:	e8 2f       	mov	r30, r24
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	e0 59       	subi	r30, 0x90	; 144
    1da8:	ff 4f       	sbci	r31, 0xFF	; 255
    1daa:	60 95       	com	r22
    1dac:	80 81       	ld	r24, Z
    1dae:	68 23       	and	r22, r24
    1db0:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1db2:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    1db4:	0f 90       	pop	r0
    1db6:	df 91       	pop	r29
    1db8:	cf 91       	pop	r28
    1dba:	08 95       	ret

00001dbc <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1dbc:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1dbe:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1dc0:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1dc2:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1dc4:	60 83       	st	Z, r22
	ret                             // Return to caller
    1dc6:	08 95       	ret

00001dc8 <pwm_set_frequency>:
 *
 * \param config Pointer to PWM configuration.
 * \param freq_hz Wanted PWM frequency in Hz.
 */
void pwm_set_frequency(struct pwm_config *config, uint16_t freq_hz)
{
    1dc8:	cf 92       	push	r12
    1dca:	df 92       	push	r13
    1dcc:	ef 92       	push	r14
    1dce:	ff 92       	push	r15
    1dd0:	cf 93       	push	r28
    1dd2:	df 93       	push	r29
    1dd4:	ec 01       	movw	r28, r24
	/* Avoid division by zero. */
	Assert(freq_hz != 0);

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
    1dd6:	6b 01       	movw	r12, r22
    1dd8:	e1 2c       	mov	r14, r1
    1dda:	f1 2c       	mov	r15, r1
    1ddc:	60 e0       	ldi	r22, 0x00	; 0
    1dde:	72 e1       	ldi	r23, 0x12	; 18
    1de0:	8a e7       	ldi	r24, 0x7A	; 122
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	a7 01       	movw	r20, r14
    1de6:	96 01       	movw	r18, r12
    1de8:	cd d4       	rcall	.+2458   	; 0x2784 <__udivmodsi4>
    1dea:	ca 01       	movw	r24, r20
    1dec:	b9 01       	movw	r22, r18
    1dee:	2f ef       	ldi	r18, 0xFF	; 255
    1df0:	3f ef       	ldi	r19, 0xFF	; 255
    1df2:	40 e0       	ldi	r20, 0x00	; 0
    1df4:	50 e0       	ldi	r21, 0x00	; 0
    1df6:	c6 d4       	rcall	.+2444   	; 0x2784 <__udivmodsi4>
	if (smallest_div < 1) {
    1df8:	21 15       	cp	r18, r1
    1dfa:	31 05       	cpc	r19, r1
    1dfc:	29 f4       	brne	.+10     	; 0x1e08 <pwm_set_frequency+0x40>
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	8c 83       	std	Y+4, r24	; 0x04

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
    1e02:	21 e0       	ldi	r18, 0x01	; 1
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	2d c0       	rjmp	.+90     	; 0x1e62 <pwm_set_frequency+0x9a>
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
    1e08:	22 30       	cpi	r18, 0x02	; 2
    1e0a:	31 05       	cpc	r19, r1
    1e0c:	28 f4       	brcc	.+10     	; 0x1e18 <pwm_set_frequency+0x50>
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
    1e0e:	82 e0       	ldi	r24, 0x02	; 2
    1e10:	8c 83       	std	Y+4, r24	; 0x04
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
    1e12:	22 e0       	ldi	r18, 0x02	; 2
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	25 c0       	rjmp	.+74     	; 0x1e62 <pwm_set_frequency+0x9a>
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
    1e18:	24 30       	cpi	r18, 0x04	; 4
    1e1a:	31 05       	cpc	r19, r1
    1e1c:	28 f4       	brcc	.+10     	; 0x1e28 <pwm_set_frequency+0x60>
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
    1e1e:	83 e0       	ldi	r24, 0x03	; 3
    1e20:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
    1e22:	24 e0       	ldi	r18, 0x04	; 4
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	1d c0       	rjmp	.+58     	; 0x1e62 <pwm_set_frequency+0x9a>
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
    1e28:	28 30       	cpi	r18, 0x08	; 8
    1e2a:	31 05       	cpc	r19, r1
    1e2c:	28 f4       	brcc	.+10     	; 0x1e38 <pwm_set_frequency+0x70>
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
    1e2e:	84 e0       	ldi	r24, 0x04	; 4
    1e30:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
    1e32:	28 e0       	ldi	r18, 0x08	; 8
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	15 c0       	rjmp	.+42     	; 0x1e62 <pwm_set_frequency+0x9a>
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
    1e38:	20 34       	cpi	r18, 0x40	; 64
    1e3a:	31 05       	cpc	r19, r1
    1e3c:	28 f4       	brcc	.+10     	; 0x1e48 <pwm_set_frequency+0x80>
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
    1e3e:	85 e0       	ldi	r24, 0x05	; 5
    1e40:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
    1e42:	20 e4       	ldi	r18, 0x40	; 64
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	0d c0       	rjmp	.+26     	; 0x1e62 <pwm_set_frequency+0x9a>
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
    1e48:	2f 3f       	cpi	r18, 0xFF	; 255
    1e4a:	31 05       	cpc	r19, r1
    1e4c:	09 f0       	breq	.+2      	; 0x1e50 <pwm_set_frequency+0x88>
    1e4e:	28 f4       	brcc	.+10     	; 0x1e5a <pwm_set_frequency+0x92>
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
    1e50:	86 e0       	ldi	r24, 0x06	; 6
    1e52:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
    1e54:	20 e0       	ldi	r18, 0x00	; 0
    1e56:	31 e0       	ldi	r19, 0x01	; 1
    1e58:	04 c0       	rjmp	.+8      	; 0x1e62 <pwm_set_frequency+0x9a>
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
		config->clk_sel = PWM_CLK_DIV1024;
    1e5a:	87 e0       	ldi	r24, 0x07	; 7
    1e5c:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
    1e5e:	20 e0       	ldi	r18, 0x00	; 0
    1e60:	34 e0       	ldi	r19, 0x04	; 4
		config->clk_sel = PWM_CLK_DIV1024;
	}

	/* Calculate the period from the just found divider */
	config->period = cpu_hz / dividor / freq_hz;
    1e62:	40 e0       	ldi	r20, 0x00	; 0
    1e64:	50 e0       	ldi	r21, 0x00	; 0
    1e66:	60 e0       	ldi	r22, 0x00	; 0
    1e68:	72 e1       	ldi	r23, 0x12	; 18
    1e6a:	8a e7       	ldi	r24, 0x7A	; 122
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	8a d4       	rcall	.+2324   	; 0x2784 <__udivmodsi4>
    1e70:	ca 01       	movw	r24, r20
    1e72:	b9 01       	movw	r22, r18
    1e74:	a7 01       	movw	r20, r14
    1e76:	96 01       	movw	r18, r12
    1e78:	85 d4       	rcall	.+2314   	; 0x2784 <__udivmodsi4>
    1e7a:	2d 83       	std	Y+5, r18	; 0x05
    1e7c:	3e 83       	std	Y+6, r19	; 0x06

	/* Make sure our period is at least 100 ticks so we are able to provide
	   a full range (0-100% duty cycle */
	if (config->period < 100) {
    1e7e:	24 36       	cpi	r18, 0x64	; 100
    1e80:	31 05       	cpc	r19, r1
    1e82:	18 f4       	brcc	.+6      	; 0x1e8a <pwm_set_frequency+0xc2>
		/* The period is too short. */
		config->clk_sel = PWM_CLK_OFF;
    1e84:	1c 82       	std	Y+4, r1	; 0x04
		config->period = 0;
    1e86:	1d 82       	std	Y+5, r1	; 0x05
    1e88:	1e 82       	std	Y+6, r1	; 0x06
		Assert(false);
	}
}
    1e8a:	df 91       	pop	r29
    1e8c:	cf 91       	pop	r28
    1e8e:	ff 90       	pop	r15
    1e90:	ef 90       	pop	r14
    1e92:	df 90       	pop	r13
    1e94:	cf 90       	pop	r12
    1e96:	08 95       	ret

00001e98 <pwm_init>:
 * \param channel \ref pwm_channel_t "CC channel" to use for this PWM.
 * \param freq_hz Frequency to use for this PWM.
  */
void pwm_init(struct pwm_config *config, enum pwm_tc_t tc,
		enum pwm_channel_t channel, uint16_t freq_hz)
{
    1e98:	0f 93       	push	r16
    1e9a:	1f 93       	push	r17
    1e9c:	cf 93       	push	r28
    1e9e:	df 93       	push	r29
    1ea0:	ec 01       	movw	r28, r24
    1ea2:	89 01       	movw	r16, r18

	/* Set TC and correct I/O pin to output */
/*
 * Support and FAQ: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>
 */
	switch (tc) {
    1ea4:	86 2f       	mov	r24, r22
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	87 30       	cpi	r24, 0x07	; 7
    1eaa:	91 05       	cpc	r25, r1
    1eac:	08 f0       	brcs	.+2      	; 0x1eb0 <pwm_init+0x18>
    1eae:	8a c0       	rjmp	.+276    	; 0x1fc4 <pwm_init+0x12c>
    1eb0:	fc 01       	movw	r30, r24
    1eb2:	88 27       	eor	r24, r24
    1eb4:	e2 50       	subi	r30, 0x02	; 2
    1eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb8:	8f 4f       	sbci	r24, 0xFF	; 255
    1eba:	86 c4       	rjmp	.+2316   	; 0x27c8 <__tablejump2__>
#if defined(TCC0)
	case PWM_TCC0:
		config->tc = &TCC0;
    1ebc:	80 e0       	ldi	r24, 0x00	; 0
    1ebe:	98 e0       	ldi	r25, 0x08	; 8
    1ec0:	88 83       	st	Y, r24
    1ec2:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel-1));
    1ec4:	e0 e4       	ldi	r30, 0x40	; 64
    1ec6:	f6 e0       	ldi	r31, 0x06	; 6
    1ec8:	30 81       	ld	r19, Z
    1eca:	81 e0       	ldi	r24, 0x01	; 1
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	2f ef       	ldi	r18, 0xFF	; 255
    1ed0:	24 0f       	add	r18, r20
    1ed2:	02 c0       	rjmp	.+4      	; 0x1ed8 <pwm_init+0x40>
    1ed4:	88 0f       	add	r24, r24
    1ed6:	99 1f       	adc	r25, r25
    1ed8:	2a 95       	dec	r18
    1eda:	e2 f7       	brpl	.-8      	; 0x1ed4 <pwm_init+0x3c>
    1edc:	83 2b       	or	r24, r19
    1ede:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    1ee0:	71 c0       	rjmp	.+226    	; 0x1fc4 <pwm_init+0x12c>
#endif
#if defined(TCC1)
	case PWM_TCC1:
		config->tc = &TCC1;
    1ee2:	80 e4       	ldi	r24, 0x40	; 64
    1ee4:	98 e0       	ldi	r25, 0x08	; 8
    1ee6:	88 83       	st	Y, r24
    1ee8:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel+3));
    1eea:	e0 e4       	ldi	r30, 0x40	; 64
    1eec:	f6 e0       	ldi	r31, 0x06	; 6
    1eee:	30 81       	ld	r19, Z
    1ef0:	81 e0       	ldi	r24, 0x01	; 1
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	23 e0       	ldi	r18, 0x03	; 3
    1ef6:	24 0f       	add	r18, r20
    1ef8:	02 c0       	rjmp	.+4      	; 0x1efe <pwm_init+0x66>
    1efa:	88 0f       	add	r24, r24
    1efc:	99 1f       	adc	r25, r25
    1efe:	2a 95       	dec	r18
    1f00:	e2 f7       	brpl	.-8      	; 0x1efa <pwm_init+0x62>
    1f02:	83 2b       	or	r24, r19
    1f04:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    1f06:	5e c0       	rjmp	.+188    	; 0x1fc4 <pwm_init+0x12c>
#endif
#if defined(TCD0)
	case PWM_TCD0:
		config->tc = &TCD0;
    1f08:	80 e0       	ldi	r24, 0x00	; 0
    1f0a:	99 e0       	ldi	r25, 0x09	; 9
    1f0c:	88 83       	st	Y, r24
    1f0e:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel-1));
    1f10:	e0 e6       	ldi	r30, 0x60	; 96
    1f12:	f6 e0       	ldi	r31, 0x06	; 6
    1f14:	30 81       	ld	r19, Z
    1f16:	81 e0       	ldi	r24, 0x01	; 1
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	2f ef       	ldi	r18, 0xFF	; 255
    1f1c:	24 0f       	add	r18, r20
    1f1e:	02 c0       	rjmp	.+4      	; 0x1f24 <pwm_init+0x8c>
    1f20:	88 0f       	add	r24, r24
    1f22:	99 1f       	adc	r25, r25
    1f24:	2a 95       	dec	r18
    1f26:	e2 f7       	brpl	.-8      	; 0x1f20 <pwm_init+0x88>
    1f28:	83 2b       	or	r24, r19
    1f2a:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    1f2c:	4b c0       	rjmp	.+150    	; 0x1fc4 <pwm_init+0x12c>
#endif
#if defined(TCD1)
	case PWM_TCD1:
		config->tc = &TCD1;
    1f2e:	80 e4       	ldi	r24, 0x40	; 64
    1f30:	99 e0       	ldi	r25, 0x09	; 9
    1f32:	88 83       	st	Y, r24
    1f34:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel+3));
    1f36:	e0 e6       	ldi	r30, 0x60	; 96
    1f38:	f6 e0       	ldi	r31, 0x06	; 6
    1f3a:	30 81       	ld	r19, Z
    1f3c:	81 e0       	ldi	r24, 0x01	; 1
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	23 e0       	ldi	r18, 0x03	; 3
    1f42:	24 0f       	add	r18, r20
    1f44:	02 c0       	rjmp	.+4      	; 0x1f4a <pwm_init+0xb2>
    1f46:	88 0f       	add	r24, r24
    1f48:	99 1f       	adc	r25, r25
    1f4a:	2a 95       	dec	r18
    1f4c:	e2 f7       	brpl	.-8      	; 0x1f46 <pwm_init+0xae>
    1f4e:	83 2b       	or	r24, r19
    1f50:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    1f52:	38 c0       	rjmp	.+112    	; 0x1fc4 <pwm_init+0x12c>
#endif

#if defined(TCE0)
	case PWM_TCE0:
		config->tc = &TCE0;
    1f54:	80 e0       	ldi	r24, 0x00	; 0
    1f56:	9a e0       	ldi	r25, 0x0A	; 10
    1f58:	88 83       	st	Y, r24
    1f5a:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel-1));
    1f5c:	e0 e8       	ldi	r30, 0x80	; 128
    1f5e:	f6 e0       	ldi	r31, 0x06	; 6
    1f60:	30 81       	ld	r19, Z
    1f62:	81 e0       	ldi	r24, 0x01	; 1
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	2f ef       	ldi	r18, 0xFF	; 255
    1f68:	24 0f       	add	r18, r20
    1f6a:	02 c0       	rjmp	.+4      	; 0x1f70 <pwm_init+0xd8>
    1f6c:	88 0f       	add	r24, r24
    1f6e:	99 1f       	adc	r25, r25
    1f70:	2a 95       	dec	r18
    1f72:	e2 f7       	brpl	.-8      	; 0x1f6c <pwm_init+0xd4>
    1f74:	83 2b       	or	r24, r19
    1f76:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    1f78:	25 c0       	rjmp	.+74     	; 0x1fc4 <pwm_init+0x12c>
#endif
#if defined(TCE1)
	case PWM_TCE1:
		config->tc = &TCE1;
    1f7a:	80 e4       	ldi	r24, 0x40	; 64
    1f7c:	9a e0       	ldi	r25, 0x0A	; 10
    1f7e:	88 83       	st	Y, r24
    1f80:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel+3));
    1f82:	e0 e8       	ldi	r30, 0x80	; 128
    1f84:	f6 e0       	ldi	r31, 0x06	; 6
    1f86:	30 81       	ld	r19, Z
    1f88:	81 e0       	ldi	r24, 0x01	; 1
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	23 e0       	ldi	r18, 0x03	; 3
    1f8e:	24 0f       	add	r18, r20
    1f90:	02 c0       	rjmp	.+4      	; 0x1f96 <pwm_init+0xfe>
    1f92:	88 0f       	add	r24, r24
    1f94:	99 1f       	adc	r25, r25
    1f96:	2a 95       	dec	r18
    1f98:	e2 f7       	brpl	.-8      	; 0x1f92 <pwm_init+0xfa>
    1f9a:	83 2b       	or	r24, r19
    1f9c:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    1f9e:	12 c0       	rjmp	.+36     	; 0x1fc4 <pwm_init+0x12c>
#endif

#if defined(TCF0)
	case PWM_TCF0:
		config->tc = &TCF0;
    1fa0:	80 e0       	ldi	r24, 0x00	; 0
    1fa2:	9b e0       	ldi	r25, 0x0B	; 11
    1fa4:	88 83       	st	Y, r24
    1fa6:	99 83       	std	Y+1, r25	; 0x01
		PORTF.DIR |= (1 << (channel-1));
    1fa8:	e0 ea       	ldi	r30, 0xA0	; 160
    1faa:	f6 e0       	ldi	r31, 0x06	; 6
    1fac:	30 81       	ld	r19, Z
    1fae:	81 e0       	ldi	r24, 0x01	; 1
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	2f ef       	ldi	r18, 0xFF	; 255
    1fb4:	24 0f       	add	r18, r20
    1fb6:	02 c0       	rjmp	.+4      	; 0x1fbc <pwm_init+0x124>
    1fb8:	88 0f       	add	r24, r24
    1fba:	99 1f       	adc	r25, r25
    1fbc:	2a 95       	dec	r18
    1fbe:	e2 f7       	brpl	.-8      	; 0x1fb8 <pwm_init+0x120>
    1fc0:	83 2b       	or	r24, r19
    1fc2:	80 83       	st	Z, r24
	}

	/* Make sure we are not given a channel number larger
	   than this TC can handle */
	Assert(channel <= num_chan);
	config->channel = channel;
    1fc4:	4a 83       	std	Y+2, r20	; 0x02

	/* Set the correct cc_mask */
	switch (channel) {
    1fc6:	42 30       	cpi	r20, 0x02	; 2
    1fc8:	61 f0       	breq	.+24     	; 0x1fe2 <pwm_init+0x14a>
    1fca:	18 f4       	brcc	.+6      	; 0x1fd2 <pwm_init+0x13a>
    1fcc:	41 30       	cpi	r20, 0x01	; 1
    1fce:	31 f0       	breq	.+12     	; 0x1fdc <pwm_init+0x144>
    1fd0:	10 c0       	rjmp	.+32     	; 0x1ff2 <pwm_init+0x15a>
    1fd2:	43 30       	cpi	r20, 0x03	; 3
    1fd4:	49 f0       	breq	.+18     	; 0x1fe8 <pwm_init+0x150>
    1fd6:	44 30       	cpi	r20, 0x04	; 4
    1fd8:	51 f0       	breq	.+20     	; 0x1fee <pwm_init+0x156>
    1fda:	0b c0       	rjmp	.+22     	; 0x1ff2 <pwm_init+0x15a>
	case PWM_CH_A:
		config->cc_mask = TC_CCAEN;
    1fdc:	80 e1       	ldi	r24, 0x10	; 16
    1fde:	8b 83       	std	Y+3, r24	; 0x03
		break;
    1fe0:	08 c0       	rjmp	.+16     	; 0x1ff2 <pwm_init+0x15a>
	case PWM_CH_B:
		config->cc_mask = TC_CCBEN;
    1fe2:	80 e2       	ldi	r24, 0x20	; 32
    1fe4:	8b 83       	std	Y+3, r24	; 0x03
		break;
    1fe6:	05 c0       	rjmp	.+10     	; 0x1ff2 <pwm_init+0x15a>
	case PWM_CH_C:
		config->cc_mask = TC_CCCEN;
    1fe8:	80 e4       	ldi	r24, 0x40	; 64
    1fea:	8b 83       	std	Y+3, r24	; 0x03
		break;
    1fec:	02 c0       	rjmp	.+4      	; 0x1ff2 <pwm_init+0x15a>
	case PWM_CH_D:
		config->cc_mask = TC_CCDEN;
    1fee:	80 e8       	ldi	r24, 0x80	; 128
    1ff0:	8b 83       	std	Y+3, r24	; 0x03
		Assert(false);
		break;
	}

	/* Enable peripheral clock for this TC */
	tc_enable(config->tc);
    1ff2:	88 81       	ld	r24, Y
    1ff4:	99 81       	ldd	r25, Y+1	; 0x01
    1ff6:	66 d9       	rcall	.-3380   	; 0x12c4 <tc_enable>

	/* Set this TC's waveform generator in single slope mode */
	tc_set_wgm(config->tc, TC_WG_SS);
    1ff8:	e8 81       	ld	r30, Y
    1ffa:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    1ffc:	81 81       	ldd	r24, Z+1	; 0x01
    1ffe:	88 7f       	andi	r24, 0xF8	; 248
    2000:	83 60       	ori	r24, 0x03	; 3
    2002:	81 83       	std	Z+1, r24	; 0x01

	/* Default values (disable TC and set minimum period)*/
	config->period = 0;
    2004:	1d 82       	std	Y+5, r1	; 0x05
    2006:	1e 82       	std	Y+6, r1	; 0x06
	config->clk_sel = PWM_CLK_OFF;
    2008:	1c 82       	std	Y+4, r1	; 0x04
	tc_write_clock_source(config->tc, PWM_CLK_OFF);
    200a:	e8 81       	ld	r30, Y
    200c:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    200e:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    2010:	80 7f       	andi	r24, 0xF0	; 240

	/* Set the PWM frequency */
	pwm_set_frequency(config, freq_hz);
    2012:	80 83       	st	Z, r24
    2014:	b8 01       	movw	r22, r16
    2016:	ce 01       	movw	r24, r28
}
    2018:	d7 de       	rcall	.-594    	; 0x1dc8 <pwm_set_frequency>
    201a:	df 91       	pop	r29
    201c:	cf 91       	pop	r28
    201e:	1f 91       	pop	r17
    2020:	0f 91       	pop	r16
    2022:	08 95       	ret

00002024 <pwm_start>:
 *
 * \param *config           Pointer to the PWM configuration struct
 * \param duty_cycle_scale  Duty cycle as a value between 0 and 100.
 */
void pwm_start(struct pwm_config *config, uint8_t duty_cycle_scale)
{
    2024:	cf 93       	push	r28
    2026:	df 93       	push	r29
    2028:	ec 01       	movw	r28, r24
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, (enum tc_cc_channel_t)config->channel,
    202a:	2d 81       	ldd	r18, Y+5	; 0x05
    202c:	3e 81       	ldd	r19, Y+6	; 0x06
    202e:	a6 2f       	mov	r26, r22
    2030:	b0 e0       	ldi	r27, 0x00	; 0
    2032:	d2 d3       	rcall	.+1956   	; 0x27d8 <__umulhisi3>
    2034:	24 e6       	ldi	r18, 0x64	; 100
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	40 e0       	ldi	r20, 0x00	; 0
    203a:	50 e0       	ldi	r21, 0x00	; 0
    203c:	a3 d3       	rcall	.+1862   	; 0x2784 <__udivmodsi4>
    203e:	8a 81       	ldd	r24, Y+2	; 0x02
    2040:	e8 81       	ld	r30, Y
    2042:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
	if (tc_is_tc0(void *tc)) {
    2044:	e6 fd       	sbrc	r30, 6
    2046:	17 c0       	rjmp	.+46     	; 0x2076 <pwm_start+0x52>
		switch (channel_index) {
    2048:	82 30       	cpi	r24, 0x02	; 2
    204a:	61 f0       	breq	.+24     	; 0x2064 <pwm_start+0x40>
    204c:	18 f4       	brcc	.+6      	; 0x2054 <pwm_start+0x30>
    204e:	81 30       	cpi	r24, 0x01	; 1
    2050:	31 f0       	breq	.+12     	; 0x205e <pwm_start+0x3a>
    2052:	1b c0       	rjmp	.+54     	; 0x208a <pwm_start+0x66>
    2054:	83 30       	cpi	r24, 0x03	; 3
    2056:	49 f0       	breq	.+18     	; 0x206a <pwm_start+0x46>
    2058:	84 30       	cpi	r24, 0x04	; 4
    205a:	51 f0       	breq	.+20     	; 0x2070 <pwm_start+0x4c>
    205c:	16 c0       	rjmp	.+44     	; 0x208a <pwm_start+0x66>
		case TC_CCA:
			((TC0_t *)tc)->CCABUF = buffer_value;
    205e:	20 af       	std	Z+56, r18	; 0x38
    2060:	31 af       	std	Z+57, r19	; 0x39
    2062:	13 c0       	rjmp	.+38     	; 0x208a <pwm_start+0x66>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
    2064:	22 af       	std	Z+58, r18	; 0x3a
    2066:	33 af       	std	Z+59, r19	; 0x3b
    2068:	10 c0       	rjmp	.+32     	; 0x208a <pwm_start+0x66>
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    206a:	24 af       	std	Z+60, r18	; 0x3c
    206c:	35 af       	std	Z+61, r19	; 0x3d
    206e:	0d c0       	rjmp	.+26     	; 0x208a <pwm_start+0x66>
			break;
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    2070:	26 af       	std	Z+62, r18	; 0x3e
    2072:	37 af       	std	Z+63, r19	; 0x3f
    2074:	0a c0       	rjmp	.+20     	; 0x208a <pwm_start+0x66>
			break;
		}
	} else if (tc_is_tc1(void *tc)) {
			switch (channel_index) {
    2076:	81 30       	cpi	r24, 0x01	; 1
    2078:	19 f0       	breq	.+6      	; 0x2080 <pwm_start+0x5c>
    207a:	82 30       	cpi	r24, 0x02	; 2
    207c:	21 f0       	breq	.+8      	; 0x2086 <pwm_start+0x62>
    207e:	05 c0       	rjmp	.+10     	; 0x208a <pwm_start+0x66>
			case TC_CCA:
				((TC1_t *)tc)->CCABUF = buffer_value;
    2080:	20 af       	std	Z+56, r18	; 0x38
    2082:	31 af       	std	Z+57, r19	; 0x39
    2084:	02 c0       	rjmp	.+4      	; 0x208a <pwm_start+0x66>
				break;
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
    2086:	22 af       	std	Z+58, r18	; 0x3a
    2088:	33 af       	std	Z+59, r19	; 0x3b
	/* Set given duty cycle */
	pwm_set_duty_cycle_percent(config, duty_cycle_scale);
	/* Set correct TC period */
	tc_write_period(config->tc, config->period);
    208a:	8d 81       	ldd	r24, Y+5	; 0x05
    208c:	9e 81       	ldd	r25, Y+6	; 0x06
    208e:	e8 81       	ld	r30, Y
    2090:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    2092:	86 a3       	std	Z+38, r24	; 0x26
    2094:	97 a3       	std	Z+39, r25	; 0x27
	/* Enable CC channel for this TC */
	tc_enable_cc_channels(config->tc, config->cc_mask);
    2096:	8b 81       	ldd	r24, Y+3	; 0x03
    2098:	e8 81       	ld	r30, Y
    209a:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param enablemask CC channel
 */
static inline void tc_enable_cc_channels(volatile void *tc,
		enum tc_cc_channel_mask_enable_t enablemask)
{
	if (tc_is_tc0(void *tc)) {
    209c:	e6 fd       	sbrc	r30, 6
    209e:	04 c0       	rjmp	.+8      	; 0x20a8 <pwm_start+0x84>
		((TC0_t *)tc)->CTRLB |= enablemask;
    20a0:	91 81       	ldd	r25, Z+1	; 0x01
    20a2:	89 2b       	or	r24, r25
    20a4:	81 83       	std	Z+1, r24	; 0x01
    20a6:	04 c0       	rjmp	.+8      	; 0x20b0 <pwm_start+0x8c>
	} else if (tc_is_tc1(void *tc)) {
		((TC1_t *)tc)->CTRLB |=
    20a8:	91 81       	ldd	r25, Z+1	; 0x01
    20aa:	80 73       	andi	r24, 0x30	; 48
    20ac:	89 2b       	or	r24, r25
    20ae:	81 83       	std	Z+1, r24	; 0x01
	/* Enable TC by setting correct clock prescaler */
	tc_write_clock_source(config->tc, config->clk_sel);
    20b0:	e8 81       	ld	r30, Y
    20b2:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    20b4:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    20b6:	80 7f       	andi	r24, 0xF0	; 240
    20b8:	9c 81       	ldd	r25, Y+4	; 0x04
    20ba:	89 2b       	or	r24, r25
    20bc:	80 83       	st	Z, r24
}
    20be:	df 91       	pop	r29
    20c0:	cf 91       	pop	r28
    20c2:	08 95       	ret

000020c4 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    20c4:	cf 93       	push	r28
    20c6:	df 93       	push	r29
    20c8:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    20ca:	20 e0       	ldi	r18, 0x00	; 0
    20cc:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    20ce:	c6 2f       	mov	r28, r22
    20d0:	d0 e0       	ldi	r29, 0x00	; 0
    20d2:	de 01       	movw	r26, r28
    20d4:	02 2e       	mov	r0, r18
    20d6:	02 c0       	rjmp	.+4      	; 0x20dc <ioport_configure_port_pin+0x18>
    20d8:	b5 95       	asr	r27
    20da:	a7 95       	ror	r26
    20dc:	0a 94       	dec	r0
    20de:	e2 f7       	brpl	.-8      	; 0x20d8 <ioport_configure_port_pin+0x14>
    20e0:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    20e2:	50 8b       	std	Z+16, r21	; 0x10
    20e4:	2f 5f       	subi	r18, 0xFF	; 255
    20e6:	3f 4f       	sbci	r19, 0xFF	; 255
    20e8:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    20ea:	28 30       	cpi	r18, 0x08	; 8
    20ec:	31 05       	cpc	r19, r1
    20ee:	89 f7       	brne	.-30     	; 0x20d2 <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    20f0:	40 ff       	sbrs	r20, 0
    20f2:	0a c0       	rjmp	.+20     	; 0x2108 <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
    20f4:	41 ff       	sbrs	r20, 1
    20f6:	03 c0       	rjmp	.+6      	; 0x20fe <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    20f8:	fc 01       	movw	r30, r24
    20fa:	65 83       	std	Z+5, r22	; 0x05
    20fc:	02 c0       	rjmp	.+4      	; 0x2102 <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    20fe:	fc 01       	movw	r30, r24
    2100:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    2102:	fc 01       	movw	r30, r24
    2104:	61 83       	std	Z+1, r22	; 0x01
    2106:	02 c0       	rjmp	.+4      	; 0x210c <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    2108:	fc 01       	movw	r30, r24
    210a:	62 83       	std	Z+2, r22	; 0x02
	}
}
    210c:	df 91       	pop	r29
    210e:	cf 91       	pop	r28
    2110:	08 95       	ret

00002112 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    2112:	43 e0       	ldi	r20, 0x03	; 3
    2114:	50 e0       	ldi	r21, 0x00	; 0
    2116:	61 e0       	ldi	r22, 0x01	; 1
    2118:	80 ee       	ldi	r24, 0xE0	; 224
    211a:	97 e0       	ldi	r25, 0x07	; 7
    211c:	d3 df       	rcall	.-90     	; 0x20c4 <ioport_configure_port_pin>
    211e:	43 e0       	ldi	r20, 0x03	; 3
    2120:	50 e0       	ldi	r21, 0x00	; 0
    2122:	62 e0       	ldi	r22, 0x02	; 2
    2124:	80 ee       	ldi	r24, 0xE0	; 224
    2126:	97 e0       	ldi	r25, 0x07	; 7
    2128:	cd df       	rcall	.-102    	; 0x20c4 <ioport_configure_port_pin>
    212a:	43 e0       	ldi	r20, 0x03	; 3
    212c:	50 e0       	ldi	r21, 0x00	; 0
    212e:	60 e1       	ldi	r22, 0x10	; 16
    2130:	80 e6       	ldi	r24, 0x60	; 96
    2132:	96 e0       	ldi	r25, 0x06	; 6
    2134:	c7 df       	rcall	.-114    	; 0x20c4 <ioport_configure_port_pin>
    2136:	41 e0       	ldi	r20, 0x01	; 1
    2138:	50 e4       	ldi	r21, 0x40	; 64
    213a:	60 e2       	ldi	r22, 0x20	; 32
    213c:	80 e6       	ldi	r24, 0x60	; 96
    213e:	96 e0       	ldi	r25, 0x06	; 6
    2140:	c1 df       	rcall	.-126    	; 0x20c4 <ioport_configure_port_pin>
    2142:	40 e0       	ldi	r20, 0x00	; 0
    2144:	5b e1       	ldi	r21, 0x1B	; 27
    2146:	60 e2       	ldi	r22, 0x20	; 32
    2148:	80 e8       	ldi	r24, 0x80	; 128
    214a:	96 e0       	ldi	r25, 0x06	; 6
    214c:	bb df       	rcall	.-138    	; 0x20c4 <ioport_configure_port_pin>
    214e:	40 e0       	ldi	r20, 0x00	; 0
    2150:	5b e1       	ldi	r21, 0x1B	; 27
    2152:	62 e0       	ldi	r22, 0x02	; 2
    2154:	80 ea       	ldi	r24, 0xA0	; 160
    2156:	96 e0       	ldi	r25, 0x06	; 6
    2158:	b5 df       	rcall	.-150    	; 0x20c4 <ioport_configure_port_pin>
    215a:	40 e0       	ldi	r20, 0x00	; 0
    215c:	5b e1       	ldi	r21, 0x1B	; 27
    215e:	64 e0       	ldi	r22, 0x04	; 4
    2160:	80 ea       	ldi	r24, 0xA0	; 160
    2162:	96 e0       	ldi	r25, 0x06	; 6
    2164:	af df       	rcall	.-162    	; 0x20c4 <ioport_configure_port_pin>
    2166:	43 e0       	ldi	r20, 0x03	; 3
    2168:	50 e0       	ldi	r21, 0x00	; 0
    216a:	62 e0       	ldi	r22, 0x02	; 2
    216c:	80 e6       	ldi	r24, 0x60	; 96
    216e:	96 e0       	ldi	r25, 0x06	; 6
    2170:	a9 df       	rcall	.-174    	; 0x20c4 <ioport_configure_port_pin>
    2172:	43 e0       	ldi	r20, 0x03	; 3
    2174:	50 e0       	ldi	r21, 0x00	; 0
    2176:	68 e0       	ldi	r22, 0x08	; 8
    2178:	80 e6       	ldi	r24, 0x60	; 96
    217a:	96 e0       	ldi	r25, 0x06	; 6
    217c:	a3 df       	rcall	.-186    	; 0x20c4 <ioport_configure_port_pin>
    217e:	43 e0       	ldi	r20, 0x03	; 3
    2180:	50 e0       	ldi	r21, 0x00	; 0
    2182:	68 e0       	ldi	r22, 0x08	; 8
    2184:	80 ea       	ldi	r24, 0xA0	; 160
    2186:	96 e0       	ldi	r25, 0x06	; 6
    2188:	9d df       	rcall	.-198    	; 0x20c4 <ioport_configure_port_pin>
    218a:	43 e0       	ldi	r20, 0x03	; 3
    218c:	50 e0       	ldi	r21, 0x00	; 0
    218e:	61 e0       	ldi	r22, 0x01	; 1
    2190:	80 e6       	ldi	r24, 0x60	; 96
    2192:	96 e0       	ldi	r25, 0x06	; 6
    2194:	97 df       	rcall	.-210    	; 0x20c4 <ioport_configure_port_pin>
    2196:	43 e0       	ldi	r20, 0x03	; 3
    2198:	50 e0       	ldi	r21, 0x00	; 0
    219a:	68 e0       	ldi	r22, 0x08	; 8
    219c:	80 e0       	ldi	r24, 0x00	; 0
    219e:	96 e0       	ldi	r25, 0x06	; 6
    21a0:	91 df       	rcall	.-222    	; 0x20c4 <ioport_configure_port_pin>
    21a2:	41 e0       	ldi	r20, 0x01	; 1
    21a4:	50 e0       	ldi	r21, 0x00	; 0
    21a6:	60 e1       	ldi	r22, 0x10	; 16
    21a8:	80 e8       	ldi	r24, 0x80	; 128
    21aa:	96 e0       	ldi	r25, 0x06	; 6
    21ac:	8b df       	rcall	.-234    	; 0x20c4 <ioport_configure_port_pin>
    21ae:	43 e0       	ldi	r20, 0x03	; 3
    21b0:	50 e0       	ldi	r21, 0x00	; 0
    21b2:	62 e0       	ldi	r22, 0x02	; 2
    21b4:	80 e6       	ldi	r24, 0x60	; 96
    21b6:	96 e0       	ldi	r25, 0x06	; 6
    21b8:	85 df       	rcall	.-246    	; 0x20c4 <ioport_configure_port_pin>
    21ba:	43 e0       	ldi	r20, 0x03	; 3
    21bc:	50 e0       	ldi	r21, 0x00	; 0
    21be:	68 e0       	ldi	r22, 0x08	; 8
    21c0:	80 e6       	ldi	r24, 0x60	; 96
    21c2:	96 e0       	ldi	r25, 0x06	; 6
    21c4:	7f df       	rcall	.-258    	; 0x20c4 <ioport_configure_port_pin>
    21c6:	40 e0       	ldi	r20, 0x00	; 0
    21c8:	50 e0       	ldi	r21, 0x00	; 0
    21ca:	64 e0       	ldi	r22, 0x04	; 4
    21cc:	80 e6       	ldi	r24, 0x60	; 96
    21ce:	96 e0       	ldi	r25, 0x06	; 6
    21d0:	79 df       	rcall	.-270    	; 0x20c4 <ioport_configure_port_pin>
    21d2:	43 e0       	ldi	r20, 0x03	; 3
    21d4:	50 e0       	ldi	r21, 0x00	; 0
    21d6:	60 e1       	ldi	r22, 0x10	; 16
    21d8:	80 ea       	ldi	r24, 0xA0	; 160
    21da:	96 e0       	ldi	r25, 0x06	; 6
    21dc:	73 df       	rcall	.-282    	; 0x20c4 <ioport_configure_port_pin>
    21de:	40 e0       	ldi	r20, 0x00	; 0
    21e0:	50 e0       	ldi	r21, 0x00	; 0
    21e2:	61 e0       	ldi	r22, 0x01	; 1
    21e4:	80 e0       	ldi	r24, 0x00	; 0
    21e6:	96 e0       	ldi	r25, 0x06	; 6
    21e8:	6d df       	rcall	.-294    	; 0x20c4 <ioport_configure_port_pin>
    21ea:	40 e0       	ldi	r20, 0x00	; 0
    21ec:	50 e0       	ldi	r21, 0x00	; 0
    21ee:	64 e0       	ldi	r22, 0x04	; 4
    21f0:	80 e0       	ldi	r24, 0x00	; 0
    21f2:	96 e0       	ldi	r25, 0x06	; 6
    21f4:	67 df       	rcall	.-306    	; 0x20c4 <ioport_configure_port_pin>
    21f6:	40 e0       	ldi	r20, 0x00	; 0
    21f8:	50 e0       	ldi	r21, 0x00	; 0
    21fa:	62 e0       	ldi	r22, 0x02	; 2
    21fc:	80 e2       	ldi	r24, 0x20	; 32
    21fe:	96 e0       	ldi	r25, 0x06	; 6
    2200:	61 df       	rcall	.-318    	; 0x20c4 <ioport_configure_port_pin>
    2202:	43 e0       	ldi	r20, 0x03	; 3
    2204:	50 e0       	ldi	r21, 0x00	; 0
    2206:	68 e0       	ldi	r22, 0x08	; 8
    2208:	80 e4       	ldi	r24, 0x40	; 64
    220a:	96 e0       	ldi	r25, 0x06	; 6
    220c:	5b df       	rcall	.-330    	; 0x20c4 <ioport_configure_port_pin>
    220e:	40 e0       	ldi	r20, 0x00	; 0
    2210:	50 e0       	ldi	r21, 0x00	; 0
    2212:	64 e0       	ldi	r22, 0x04	; 4
    2214:	80 e4       	ldi	r24, 0x40	; 64
    2216:	96 e0       	ldi	r25, 0x06	; 6
    2218:	55 df       	rcall	.-342    	; 0x20c4 <ioport_configure_port_pin>
    221a:	43 e0       	ldi	r20, 0x03	; 3
    221c:	50 e0       	ldi	r21, 0x00	; 0
    221e:	68 e0       	ldi	r22, 0x08	; 8
    2220:	80 e6       	ldi	r24, 0x60	; 96
    2222:	96 e0       	ldi	r25, 0x06	; 6
    2224:	4f df       	rcall	.-354    	; 0x20c4 <ioport_configure_port_pin>
    2226:	40 e0       	ldi	r20, 0x00	; 0
    2228:	50 e0       	ldi	r21, 0x00	; 0
    222a:	64 e0       	ldi	r22, 0x04	; 4
    222c:	80 e6       	ldi	r24, 0x60	; 96
    222e:	96 e0       	ldi	r25, 0x06	; 6
    2230:	49 df       	rcall	.-366    	; 0x20c4 <ioport_configure_port_pin>
    2232:	43 e0       	ldi	r20, 0x03	; 3
    2234:	50 e0       	ldi	r21, 0x00	; 0
    2236:	68 e0       	ldi	r22, 0x08	; 8
    2238:	80 e8       	ldi	r24, 0x80	; 128
    223a:	96 e0       	ldi	r25, 0x06	; 6
    223c:	43 df       	rcall	.-378    	; 0x20c4 <ioport_configure_port_pin>
    223e:	40 e0       	ldi	r20, 0x00	; 0
    2240:	50 e0       	ldi	r21, 0x00	; 0
    2242:	64 e0       	ldi	r22, 0x04	; 4
    2244:	80 e8       	ldi	r24, 0x80	; 128
    2246:	96 e0       	ldi	r25, 0x06	; 6
    2248:	3d cf       	rjmp	.-390    	; 0x20c4 <ioport_configure_port_pin>
    224a:	08 95       	ret

0000224c <__portable_avr_delay_cycles>:
		break;
		default:
		break;
	}
	return x;
}
    224c:	04 c0       	rjmp	.+8      	; 0x2256 <__portable_avr_delay_cycles+0xa>
    224e:	61 50       	subi	r22, 0x01	; 1
    2250:	71 09       	sbc	r23, r1
    2252:	81 09       	sbc	r24, r1
    2254:	91 09       	sbc	r25, r1
    2256:	61 15       	cp	r22, r1
    2258:	71 05       	cpc	r23, r1
    225a:	81 05       	cpc	r24, r1
    225c:	91 05       	cpc	r25, r1
    225e:	b9 f7       	brne	.-18     	; 0x224e <__portable_avr_delay_cycles+0x2>
    2260:	08 95       	ret

00002262 <resetScreen>:
	delay_ms(100);
	gpio_set_pin_high(NHD_C12832A1Z_BACKLIGHT); //turns backlight on
}

void resetScreen()
{
    2262:	7f 92       	push	r7
    2264:	8f 92       	push	r8
    2266:	9f 92       	push	r9
    2268:	af 92       	push	r10
    226a:	bf 92       	push	r11
    226c:	cf 92       	push	r12
    226e:	df 92       	push	r13
    2270:	ef 92       	push	r14
    2272:	ff 92       	push	r15
    2274:	0f 93       	push	r16
    2276:	1f 93       	push	r17
    2278:	cf 93       	push	r28
    227a:	df 93       	push	r29
    227c:	1f 92       	push	r1
    227e:	cd b7       	in	r28, 0x3d	; 61
    2280:	de b7       	in	r29, 0x3e	; 62
	int counter = 0;
	// clear display
	for (page_address = 0; page_address <= 4; page_address++) {
    2282:	10 92 44 22 	sts	0x2244, r1	; 0x802244 <page_address>
    2286:	80 e0       	ldi	r24, 0x00	; 0
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    2288:	0f 2e       	mov	r0, r31
    228a:	fb e2       	ldi	r31, 0x2B	; 43
    228c:	8f 2e       	mov	r8, r31
    228e:	f0 2d       	mov	r31, r0
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    2290:	00 ea       	ldi	r16, 0xA0	; 160
    2292:	19 e0       	ldi	r17, 0x09	; 9
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2294:	0f 2e       	mov	r0, r31
    2296:	f0 e6       	ldi	r31, 0x60	; 96
    2298:	ef 2e       	mov	r14, r31
    229a:	f6 e0       	ldi	r31, 0x06	; 6
    229c:	ff 2e       	mov	r15, r31
    229e:	f0 2d       	mov	r31, r0
    22a0:	aa 24       	eor	r10, r10
    22a2:	a3 94       	inc	r10
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    22a4:	b0 2e       	mov	r11, r16
    22a6:	c1 2e       	mov	r12, r17
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    22a8:	68 94       	set
    22aa:	99 24       	eor	r9, r9
    22ac:	96 f8       	bld	r9, 6
 */
static inline void st7565r_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
    22ae:	8f 70       	andi	r24, 0x0F	; 15
    22b0:	80 6b       	ori	r24, 0xB0	; 176
    22b2:	d8 2e       	mov	r13, r24
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    22b4:	89 82       	std	Y+1, r8	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    22b6:	be 01       	movw	r22, r28
    22b8:	6f 5f       	subi	r22, 0xFF	; 255
    22ba:	7f 4f       	sbci	r23, 0xFF	; 255
    22bc:	c8 01       	movw	r24, r16
    22be:	03 dd       	rcall	.-1530   	; 0x1cc6 <usart_spi_select_device>
    22c0:	f7 01       	movw	r30, r14
    22c2:	a6 82       	std	Z+6, r10	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    22c4:	f8 01       	movw	r30, r16
    22c6:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    22c8:	85 ff       	sbrs	r24, 5
    22ca:	fc cf       	rjmp	.-8      	; 0x22c4 <resetScreen+0x62>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    22cc:	d0 82       	st	Z, r13
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    22ce:	f8 01       	movw	r30, r16
    22d0:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    22d2:	86 ff       	sbrs	r24, 6
    22d4:	fc cf       	rjmp	.-8      	; 0x22ce <resetScreen+0x6c>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    22d6:	91 82       	std	Z+1, r9	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    22d8:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    22da:	be 01       	movw	r22, r28
    22dc:	6f 5f       	subi	r22, 0xFF	; 255
    22de:	7f 4f       	sbci	r23, 0xFF	; 255
    22e0:	c8 01       	movw	r24, r16
    22e2:	07 dd       	rcall	.-1522   	; 0x1cf2 <usart_spi_deselect_device>
		st7565r_set_page_address(page_address);
		for (column_address = 0; column_address < 128; column_address++) {
    22e4:	10 92 43 22 	sts	0x2243, r1	; 0x802243 <column_address>
    22e8:	d1 2c       	mov	r13, r1
 */
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
    22ea:	8d 2d       	mov	r24, r13
    22ec:	8f 77       	andi	r24, 0x7F	; 127
    22ee:	82 95       	swap	r24
    22f0:	8f 70       	andi	r24, 0x0F	; 15
    22f2:	80 61       	ori	r24, 0x10	; 16
    22f4:	78 2e       	mov	r7, r24
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    22f6:	89 82       	std	Y+1, r8	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    22f8:	be 01       	movw	r22, r28
    22fa:	6f 5f       	subi	r22, 0xFF	; 255
    22fc:	7f 4f       	sbci	r23, 0xFF	; 255
    22fe:	8b 2d       	mov	r24, r11
    2300:	9c 2d       	mov	r25, r12
    2302:	e1 dc       	rcall	.-1598   	; 0x1cc6 <usart_spi_select_device>
    2304:	f7 01       	movw	r30, r14
    2306:	a6 82       	std	Z+6, r10	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    2308:	f8 01       	movw	r30, r16
    230a:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    230c:	85 ff       	sbrs	r24, 5
    230e:	fc cf       	rjmp	.-8      	; 0x2308 <resetScreen+0xa6>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    2310:	70 82       	st	Z, r7
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    2312:	f8 01       	movw	r30, r16
    2314:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    2316:	86 ff       	sbrs	r24, 6
    2318:	fc cf       	rjmp	.-8      	; 0x2312 <resetScreen+0xb0>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    231a:	91 82       	std	Z+1, r9	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    231c:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    231e:	be 01       	movw	r22, r28
    2320:	6f 5f       	subi	r22, 0xFF	; 255
    2322:	7f 4f       	sbci	r23, 0xFF	; 255
    2324:	8b 2d       	mov	r24, r11
    2326:	9c 2d       	mov	r25, r12
    2328:	e4 dc       	rcall	.-1592   	; 0x1cf2 <usart_spi_deselect_device>
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_LSB(address & 0x0F));
    232a:	fd 2d       	mov	r31, r13
    232c:	ff 70       	andi	r31, 0x0F	; 15
    232e:	df 2e       	mov	r13, r31
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    2330:	89 82       	std	Y+1, r8	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    2332:	be 01       	movw	r22, r28
    2334:	6f 5f       	subi	r22, 0xFF	; 255
    2336:	7f 4f       	sbci	r23, 0xFF	; 255
    2338:	8b 2d       	mov	r24, r11
    233a:	9c 2d       	mov	r25, r12
    233c:	c4 dc       	rcall	.-1656   	; 0x1cc6 <usart_spi_select_device>
    233e:	f7 01       	movw	r30, r14
    2340:	a6 82       	std	Z+6, r10	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    2342:	f8 01       	movw	r30, r16
    2344:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    2346:	85 ff       	sbrs	r24, 5
    2348:	fc cf       	rjmp	.-8      	; 0x2342 <resetScreen+0xe0>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    234a:	d0 82       	st	Z, r13
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    234c:	f8 01       	movw	r30, r16
    234e:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    2350:	86 ff       	sbrs	r24, 6
    2352:	fc cf       	rjmp	.-8      	; 0x234c <resetScreen+0xea>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    2354:	91 82       	std	Z+1, r9	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    2356:	80 81       	ld	r24, Z
    2358:	be 01       	movw	r22, r28
    235a:	6f 5f       	subi	r22, 0xFF	; 255
    235c:	7f 4f       	sbci	r23, 0xFF	; 255
    235e:	8b 2d       	mov	r24, r11
 */
static inline void st7565r_write_data(uint8_t data)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    2360:	9c 2d       	mov	r25, r12
    2362:	c7 dc       	rcall	.-1650   	; 0x1cf2 <usart_spi_deselect_device>
    2364:	89 82       	std	Y+1, r8	; 0x01
    2366:	be 01       	movw	r22, r28
    2368:	6f 5f       	subi	r22, 0xFF	; 255
    236a:	7f 4f       	sbci	r23, 0xFF	; 255
    236c:	8b 2d       	mov	r24, r11
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    236e:	9c 2d       	mov	r25, r12
    2370:	aa dc       	rcall	.-1708   	; 0x1cc6 <usart_spi_select_device>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    2372:	f7 01       	movw	r30, r14
    2374:	a5 82       	std	Z+5, r10	; 0x05
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    2376:	f8 01       	movw	r30, r16
    2378:	81 81       	ldd	r24, Z+1	; 0x01
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    237a:	85 ff       	sbrs	r24, 5
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    237c:	fc cf       	rjmp	.-8      	; 0x2376 <resetScreen+0x114>
    237e:	10 82       	st	Z, r1
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    2380:	f8 01       	movw	r30, r16
    2382:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    2384:	86 ff       	sbrs	r24, 6
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2386:	fc cf       	rjmp	.-8      	; 0x2380 <resetScreen+0x11e>
	ioport_set_pin_high(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, data);
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    2388:	91 82       	std	Z+1, r9	; 0x01
    238a:	80 81       	ld	r24, Z
    238c:	f7 01       	movw	r30, r14
    238e:	a6 82       	std	Z+6, r10	; 0x06
    2390:	be 01       	movw	r22, r28
    2392:	6f 5f       	subi	r22, 0xFF	; 255
    2394:	7f 4f       	sbci	r23, 0xFF	; 255
    2396:	8b 2d       	mov	r24, r11
    2398:	9c 2d       	mov	r25, r12
    239a:	ab dc       	rcall	.-1706   	; 0x1cf2 <usart_spi_deselect_device>
    239c:	d0 90 43 22 	lds	r13, 0x2243	; 0x802243 <column_address>
    23a0:	d3 94       	inc	r13
    23a2:	d0 92 43 22 	sts	0x2243, r13	; 0x802243 <column_address>

void resetScreen()
{
	int counter = 0;
	// clear display
	for (page_address = 0; page_address <= 4; page_address++) {
    23a6:	dd 20       	and	r13, r13
    23a8:	0c f0       	brlt	.+2      	; 0x23ac <resetScreen+0x14a>
    23aa:	9f cf       	rjmp	.-194    	; 0x22ea <resetScreen+0x88>
    23ac:	80 91 44 22 	lds	r24, 0x2244	; 0x802244 <page_address>
    23b0:	8f 5f       	subi	r24, 0xFF	; 255
    23b2:	80 93 44 22 	sts	0x2244, r24	; 0x802244 <page_address>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    23b6:	85 30       	cpi	r24, 0x05	; 5
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    23b8:	08 f4       	brcc	.+2      	; 0x23bc <resetScreen+0x15a>
    23ba:	79 cf       	rjmp	.-270    	; 0x22ae <resetScreen+0x4c>
    23bc:	8b e2       	ldi	r24, 0x2B	; 43
    23be:	89 83       	std	Y+1, r24	; 0x01
    23c0:	be 01       	movw	r22, r28
    23c2:	6f 5f       	subi	r22, 0xFF	; 255
    23c4:	7f 4f       	sbci	r23, 0xFF	; 255
    23c6:	80 ea       	ldi	r24, 0xA0	; 160
    23c8:	99 e0       	ldi	r25, 0x09	; 9
    23ca:	7d dc       	rcall	.-1798   	; 0x1cc6 <usart_spi_select_device>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    23cc:	81 e0       	ldi	r24, 0x01	; 1
    23ce:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    23d2:	e0 ea       	ldi	r30, 0xA0	; 160
    23d4:	f9 e0       	ldi	r31, 0x09	; 9
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    23d6:	81 81       	ldd	r24, Z+1	; 0x01
    23d8:	85 ff       	sbrs	r24, 5
    23da:	fd cf       	rjmp	.-6      	; 0x23d6 <resetScreen+0x174>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    23dc:	80 eb       	ldi	r24, 0xB0	; 176
    23de:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    23e2:	e0 ea       	ldi	r30, 0xA0	; 160
    23e4:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    23e6:	81 81       	ldd	r24, Z+1	; 0x01
    23e8:	86 ff       	sbrs	r24, 6
    23ea:	fd cf       	rjmp	.-6      	; 0x23e6 <resetScreen+0x184>
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    23ec:	e0 ea       	ldi	r30, 0xA0	; 160
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    23ee:	f9 e0       	ldi	r31, 0x09	; 9
    23f0:	80 e4       	ldi	r24, 0x40	; 64
    23f2:	81 83       	std	Z+1, r24	; 0x01
    23f4:	80 81       	ld	r24, Z
    23f6:	be 01       	movw	r22, r28
    23f8:	6f 5f       	subi	r22, 0xFF	; 255
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    23fa:	7f 4f       	sbci	r23, 0xFF	; 255
    23fc:	80 ea       	ldi	r24, 0xA0	; 160
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    23fe:	99 e0       	ldi	r25, 0x09	; 9
    2400:	78 dc       	rcall	.-1808   	; 0x1cf2 <usart_spi_deselect_device>
    2402:	8b e2       	ldi	r24, 0x2B	; 43
    2404:	89 83       	std	Y+1, r24	; 0x01
    2406:	be 01       	movw	r22, r28
    2408:	6f 5f       	subi	r22, 0xFF	; 255
    240a:	7f 4f       	sbci	r23, 0xFF	; 255
    240c:	80 ea       	ldi	r24, 0xA0	; 160
    240e:	99 e0       	ldi	r25, 0x09	; 9
    2410:	5a dc       	rcall	.-1868   	; 0x1cc6 <usart_spi_select_device>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    2418:	e0 ea       	ldi	r30, 0xA0	; 160
    241a:	f9 e0       	ldi	r31, 0x09	; 9
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    241c:	81 81       	ldd	r24, Z+1	; 0x01
    241e:	85 ff       	sbrs	r24, 5
    2420:	fd cf       	rjmp	.-6      	; 0x241c <resetScreen+0x1ba>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    2422:	80 e1       	ldi	r24, 0x10	; 16
    2424:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    2428:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    242a:	f9 e0       	ldi	r31, 0x09	; 9
    242c:	81 81       	ldd	r24, Z+1	; 0x01
    242e:	86 ff       	sbrs	r24, 6
    2430:	fd cf       	rjmp	.-6      	; 0x242c <resetScreen+0x1ca>
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    2432:	e0 ea       	ldi	r30, 0xA0	; 160
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    2434:	f9 e0       	ldi	r31, 0x09	; 9
    2436:	80 e4       	ldi	r24, 0x40	; 64
    2438:	81 83       	std	Z+1, r24	; 0x01
    243a:	80 81       	ld	r24, Z
    243c:	be 01       	movw	r22, r28
    243e:	6f 5f       	subi	r22, 0xFF	; 255
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    2440:	7f 4f       	sbci	r23, 0xFF	; 255
    2442:	80 ea       	ldi	r24, 0xA0	; 160
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    2444:	99 e0       	ldi	r25, 0x09	; 9
    2446:	55 dc       	rcall	.-1878   	; 0x1cf2 <usart_spi_deselect_device>
    2448:	8b e2       	ldi	r24, 0x2B	; 43
    244a:	89 83       	std	Y+1, r24	; 0x01
    244c:	be 01       	movw	r22, r28
    244e:	6f 5f       	subi	r22, 0xFF	; 255
    2450:	7f 4f       	sbci	r23, 0xFF	; 255
    2452:	80 ea       	ldi	r24, 0xA0	; 160
    2454:	99 e0       	ldi	r25, 0x09	; 9
    2456:	37 dc       	rcall	.-1938   	; 0x1cc6 <usart_spi_select_device>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    2458:	81 e0       	ldi	r24, 0x01	; 1
    245a:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    245e:	e0 ea       	ldi	r30, 0xA0	; 160
    2460:	f9 e0       	ldi	r31, 0x09	; 9
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    2462:	81 81       	ldd	r24, Z+1	; 0x01
    2464:	85 ff       	sbrs	r24, 5
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    2466:	fd cf       	rjmp	.-6      	; 0x2462 <resetScreen+0x200>
    2468:	10 92 a0 09 	sts	0x09A0, r1	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    246c:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    246e:	f9 e0       	ldi	r31, 0x09	; 9
    2470:	81 81       	ldd	r24, Z+1	; 0x01
    2472:	86 ff       	sbrs	r24, 6
    2474:	fd cf       	rjmp	.-6      	; 0x2470 <resetScreen+0x20e>
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    2476:	e0 ea       	ldi	r30, 0xA0	; 160
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    2478:	f9 e0       	ldi	r31, 0x09	; 9
    247a:	80 e4       	ldi	r24, 0x40	; 64
    247c:	81 83       	std	Z+1, r24	; 0x01
    247e:	80 81       	ld	r24, Z
    2480:	be 01       	movw	r22, r28
    2482:	6f 5f       	subi	r22, 0xFF	; 255
    2484:	7f 4f       	sbci	r23, 0xFF	; 255
		}
	}

	st7565r_set_page_address(0);
	st7565r_set_column_address(0);
    2486:	80 ea       	ldi	r24, 0xA0	; 160
    2488:	99 e0       	ldi	r25, 0x09	; 9
    248a:	33 dc       	rcall	.-1946   	; 0x1cf2 <usart_spi_deselect_device>
    248c:	0f 90       	pop	r0
    248e:	df 91       	pop	r29
    2490:	cf 91       	pop	r28
    2492:	1f 91       	pop	r17
    2494:	0f 91       	pop	r16
    2496:	ff 90       	pop	r15
    2498:	ef 90       	pop	r14
    249a:	df 90       	pop	r13
    249c:	cf 90       	pop	r12
    249e:	bf 90       	pop	r11
    24a0:	af 90       	pop	r10
    24a2:	9f 90       	pop	r9
    24a4:	8f 90       	pop	r8
    24a6:	7f 90       	pop	r7
    24a8:	08 95       	ret

000024aa <displayCharacter>:
	}
	return x;
}

void displayCharacter(uint8_t character)
{
    24aa:	6f 92       	push	r6
    24ac:	7f 92       	push	r7
    24ae:	8f 92       	push	r8
    24b0:	9f 92       	push	r9
    24b2:	af 92       	push	r10
    24b4:	bf 92       	push	r11
    24b6:	cf 92       	push	r12
    24b8:	df 92       	push	r13
    24ba:	ef 92       	push	r14
    24bc:	ff 92       	push	r15
    24be:	0f 93       	push	r16
    24c0:	1f 93       	push	r17
    24c2:	cf 93       	push	r28
    24c4:	df 93       	push	r29
    24c6:	1f 92       	push	r1
    24c8:	cd b7       	in	r28, 0x3d	; 61
    24ca:	de b7       	in	r29, 0x3e	; 62
    24cc:	18 2f       	mov	r17, r24
    24ce:	80 e1       	ldi	r24, 0x10	; 16
    24d0:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>
	// set addresses at beginning of display
	gpio_set_pin_low(NHD_C12832A1Z_BACKLIGHT); //turns backlight off

	if (character == 37) {
    24d4:	15 32       	cpi	r17, 0x25	; 37
    24d6:	09 f0       	breq	.+2      	; 0x24da <displayCharacter+0x30>
    24d8:	ed c0       	rjmp	.+474    	; 0x26b4 <displayCharacter+0x20a>
		start_line_address += 7;
    24da:	80 91 20 22 	lds	r24, 0x2220	; 0x802220 <start_line_address>
		st7565r_set_display_start_line_address(start_line_address++);
    24de:	98 e0       	ldi	r25, 0x08	; 8
    24e0:	98 0f       	add	r25, r24
    24e2:	90 93 20 22 	sts	0x2220, r25	; 0x802220 <start_line_address>
 */
static inline void st7565r_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	st7565r_write_command(ST7565R_CMD_START_LINE_SET(address));
    24e6:	07 e0       	ldi	r16, 0x07	; 7
    24e8:	08 0f       	add	r16, r24
    24ea:	0f 73       	andi	r16, 0x3F	; 63
    24ec:	00 64       	ori	r16, 0x40	; 64
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    24ee:	8b e2       	ldi	r24, 0x2B	; 43
    24f0:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    24f2:	be 01       	movw	r22, r28
    24f4:	6f 5f       	subi	r22, 0xFF	; 255
    24f6:	7f 4f       	sbci	r23, 0xFF	; 255
    24f8:	80 ea       	ldi	r24, 0xA0	; 160
    24fa:	99 e0       	ldi	r25, 0x09	; 9
    24fc:	e4 db       	rcall	.-2104   	; 0x1cc6 <usart_spi_select_device>
    24fe:	81 e0       	ldi	r24, 0x01	; 1
    2500:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    2504:	e0 ea       	ldi	r30, 0xA0	; 160
    2506:	f9 e0       	ldi	r31, 0x09	; 9
    2508:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    250a:	85 ff       	sbrs	r24, 5
    250c:	fd cf       	rjmp	.-6      	; 0x2508 <displayCharacter+0x5e>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    250e:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    2512:	e0 ea       	ldi	r30, 0xA0	; 160
    2514:	f9 e0       	ldi	r31, 0x09	; 9
    2516:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    2518:	86 ff       	sbrs	r24, 6
    251a:	fd cf       	rjmp	.-6      	; 0x2516 <displayCharacter+0x6c>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    251c:	e0 ea       	ldi	r30, 0xA0	; 160
    251e:	f9 e0       	ldi	r31, 0x09	; 9
    2520:	80 e4       	ldi	r24, 0x40	; 64
    2522:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    2524:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    2526:	be 01       	movw	r22, r28
    2528:	6f 5f       	subi	r22, 0xFF	; 255
    252a:	7f 4f       	sbci	r23, 0xFF	; 255
    252c:	80 ea       	ldi	r24, 0xA0	; 160
    252e:	99 e0       	ldi	r25, 0x09	; 9
    2530:	e0 db       	rcall	.-2112   	; 0x1cf2 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    2532:	8b e2       	ldi	r24, 0x2B	; 43
    2534:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    2536:	be 01       	movw	r22, r28
    2538:	6f 5f       	subi	r22, 0xFF	; 255
    253a:	7f 4f       	sbci	r23, 0xFF	; 255
    253c:	80 ea       	ldi	r24, 0xA0	; 160
    253e:	99 e0       	ldi	r25, 0x09	; 9
    2540:	c2 db       	rcall	.-2172   	; 0x1cc6 <usart_spi_select_device>
    2542:	81 e0       	ldi	r24, 0x01	; 1
    2544:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    2548:	e0 ea       	ldi	r30, 0xA0	; 160
    254a:	f9 e0       	ldi	r31, 0x09	; 9
    254c:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    254e:	85 ff       	sbrs	r24, 5
    2550:	fd cf       	rjmp	.-6      	; 0x254c <displayCharacter+0xa2>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    2552:	80 e1       	ldi	r24, 0x10	; 16
    2554:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    2558:	e0 ea       	ldi	r30, 0xA0	; 160
    255a:	f9 e0       	ldi	r31, 0x09	; 9
    255c:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    255e:	86 ff       	sbrs	r24, 6
    2560:	fd cf       	rjmp	.-6      	; 0x255c <displayCharacter+0xb2>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    2562:	e0 ea       	ldi	r30, 0xA0	; 160
    2564:	f9 e0       	ldi	r31, 0x09	; 9
    2566:	80 e4       	ldi	r24, 0x40	; 64
    2568:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    256a:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    256c:	be 01       	movw	r22, r28
    256e:	6f 5f       	subi	r22, 0xFF	; 255
    2570:	7f 4f       	sbci	r23, 0xFF	; 255
    2572:	80 ea       	ldi	r24, 0xA0	; 160
    2574:	99 e0       	ldi	r25, 0x09	; 9
    2576:	bd db       	rcall	.-2182   	; 0x1cf2 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    2578:	8b e2       	ldi	r24, 0x2B	; 43
    257a:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    257c:	be 01       	movw	r22, r28
    257e:	6f 5f       	subi	r22, 0xFF	; 255
    2580:	7f 4f       	sbci	r23, 0xFF	; 255
    2582:	80 ea       	ldi	r24, 0xA0	; 160
    2584:	99 e0       	ldi	r25, 0x09	; 9
    2586:	9f db       	rcall	.-2242   	; 0x1cc6 <usart_spi_select_device>
    2588:	81 e0       	ldi	r24, 0x01	; 1
    258a:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    258e:	e0 ea       	ldi	r30, 0xA0	; 160
    2590:	f9 e0       	ldi	r31, 0x09	; 9
    2592:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    2594:	85 ff       	sbrs	r24, 5
    2596:	fd cf       	rjmp	.-6      	; 0x2592 <displayCharacter+0xe8>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    2598:	10 92 a0 09 	sts	0x09A0, r1	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    259c:	e0 ea       	ldi	r30, 0xA0	; 160
    259e:	f9 e0       	ldi	r31, 0x09	; 9
    25a0:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    25a2:	86 ff       	sbrs	r24, 6
    25a4:	fd cf       	rjmp	.-6      	; 0x25a0 <displayCharacter+0xf6>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    25a6:	e0 ea       	ldi	r30, 0xA0	; 160
    25a8:	f9 e0       	ldi	r31, 0x09	; 9
    25aa:	80 e4       	ldi	r24, 0x40	; 64
    25ac:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    25ae:	80 81       	ld	r24, Z
    25b0:	be 01       	movw	r22, r28
    25b2:	6f 5f       	subi	r22, 0xFF	; 255
    25b4:	7f 4f       	sbci	r23, 0xFF	; 255
    25b6:	80 ea       	ldi	r24, 0xA0	; 160
    25b8:	99 e0       	ldi	r25, 0x09	; 9
		st7565r_set_column_address(0);
		st7565r_set_page_address(++page_address);
    25ba:	9b db       	rcall	.-2250   	; 0x1cf2 <usart_spi_deselect_device>
    25bc:	80 91 44 22 	lds	r24, 0x2244	; 0x802244 <page_address>
    25c0:	8f 5f       	subi	r24, 0xFF	; 255
    25c2:	80 93 44 22 	sts	0x2244, r24	; 0x802244 <page_address>
 */
static inline void st7565r_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
    25c6:	8f 70       	andi	r24, 0x0F	; 15
    25c8:	08 2f       	mov	r16, r24
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    25ca:	00 6b       	ori	r16, 0xB0	; 176
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    25cc:	8b e2       	ldi	r24, 0x2B	; 43
    25ce:	89 83       	std	Y+1, r24	; 0x01
    25d0:	be 01       	movw	r22, r28
    25d2:	6f 5f       	subi	r22, 0xFF	; 255
    25d4:	7f 4f       	sbci	r23, 0xFF	; 255
    25d6:	80 ea       	ldi	r24, 0xA0	; 160
    25d8:	99 e0       	ldi	r25, 0x09	; 9
    25da:	75 db       	rcall	.-2326   	; 0x1cc6 <usart_spi_select_device>
    25dc:	81 e0       	ldi	r24, 0x01	; 1
    25de:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    25e2:	e0 ea       	ldi	r30, 0xA0	; 160
    25e4:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    25e6:	81 81       	ldd	r24, Z+1	; 0x01
    25e8:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    25ea:	fd cf       	rjmp	.-6      	; 0x25e6 <displayCharacter+0x13c>
    25ec:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    25f0:	e0 ea       	ldi	r30, 0xA0	; 160
    25f2:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    25f4:	81 81       	ldd	r24, Z+1	; 0x01
    25f6:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    25f8:	fd cf       	rjmp	.-6      	; 0x25f4 <displayCharacter+0x14a>
    25fa:	e0 ea       	ldi	r30, 0xA0	; 160
    25fc:	f9 e0       	ldi	r31, 0x09	; 9
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    25fe:	80 e4       	ldi	r24, 0x40	; 64
    2600:	81 83       	std	Z+1, r24	; 0x01
    2602:	80 81       	ld	r24, Z
    2604:	be 01       	movw	r22, r28
    2606:	6f 5f       	subi	r22, 0xFF	; 255
    2608:	7f 4f       	sbci	r23, 0xFF	; 255
    260a:	80 ea       	ldi	r24, 0xA0	; 160
	}

	int i;
	if (character == 100) {
		resetScreen();
    260c:	99 e0       	ldi	r25, 0x09	; 9
    260e:	71 db       	rcall	.-2334   	; 0x1cf2 <usart_spi_deselect_device>
    2610:	02 c0       	rjmp	.+4      	; 0x2616 <displayCharacter+0x16c>
    2612:	27 de       	rcall	.-946    	; 0x2262 <resetScreen>
    2614:	46 c0       	rjmp	.+140    	; 0x26a2 <displayCharacter+0x1f8>
    2616:	81 2f       	mov	r24, r17
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	6c 01       	movw	r12, r24
    261c:	cc 0c       	add	r12, r12
    261e:	dd 1c       	adc	r13, r13
    2620:	8c 0d       	add	r24, r12
    2622:	9d 1d       	adc	r25, r13
    2624:	88 0f       	add	r24, r24
    2626:	99 1f       	adc	r25, r25
    2628:	88 0f       	add	r24, r24
    262a:	99 1f       	adc	r25, r25
    262c:	9c 01       	movw	r18, r24
    262e:	2d 5a       	subi	r18, 0xAD	; 173
    2630:	3e 4d       	sbci	r19, 0xDE	; 222
    2632:	79 01       	movw	r14, r18
    2634:	fc 01       	movw	r30, r24
    2636:	e1 5a       	subi	r30, 0xA1	; 161
 * \param data the data to write
 */
static inline void st7565r_write_data(uint8_t data)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    2638:	fe 4d       	sbci	r31, 0xDE	; 222
    263a:	6f 01       	movw	r12, r30
    263c:	0f 2e       	mov	r0, r31
    263e:	fb e2       	ldi	r31, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    2640:	6f 2e       	mov	r6, r31
    2642:	f0 2d       	mov	r31, r0
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2644:	00 ea       	ldi	r16, 0xA0	; 160
    2646:	19 e0       	ldi	r17, 0x09	; 9
    2648:	0f 2e       	mov	r0, r31
    264a:	f0 e6       	ldi	r31, 0x60	; 96
    264c:	af 2e       	mov	r10, r31
    264e:	f6 e0       	ldi	r31, 0x06	; 6
    2650:	bf 2e       	mov	r11, r31
    2652:	f0 2d       	mov	r31, r0
    2654:	99 24       	eor	r9, r9
    2656:	93 94       	inc	r9
    2658:	68 94       	set
	}
	else {
		for (i = 0; i < 6; i++)
		{
			st7565r_write_data(Characters[character+26][i]);
    265a:	77 24       	eor	r7, r7
    265c:	76 f8       	bld	r7, 6
    265e:	f7 01       	movw	r30, r14
    2660:	80 80       	ld	r8, Z
 * \param data the data to write
 */
static inline void st7565r_write_data(uint8_t data)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    2662:	f2 e0       	ldi	r31, 0x02	; 2
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    2664:	ef 0e       	add	r14, r31
    2666:	f1 1c       	adc	r15, r1
    2668:	69 82       	std	Y+1, r6	; 0x01
    266a:	be 01       	movw	r22, r28
    266c:	6f 5f       	subi	r22, 0xFF	; 255
    266e:	7f 4f       	sbci	r23, 0xFF	; 255
    2670:	c8 01       	movw	r24, r16
    2672:	29 db       	rcall	.-2478   	; 0x1cc6 <usart_spi_select_device>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    2674:	f5 01       	movw	r30, r10
    2676:	95 82       	std	Z+5, r9	; 0x05
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    2678:	f8 01       	movw	r30, r16
    267a:	81 81       	ldd	r24, Z+1	; 0x01
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    267c:	85 ff       	sbrs	r24, 5
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    267e:	fc cf       	rjmp	.-8      	; 0x2678 <displayCharacter+0x1ce>
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    2680:	80 82       	st	Z, r8
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    2682:	f8 01       	movw	r30, r16
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    2684:	81 81       	ldd	r24, Z+1	; 0x01
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2686:	86 ff       	sbrs	r24, 6
    2688:	fc cf       	rjmp	.-8      	; 0x2682 <displayCharacter+0x1d8>
	ioport_set_pin_high(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, data);
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    268a:	71 82       	std	Z+1, r7	; 0x01
    268c:	80 81       	ld	r24, Z
    268e:	f5 01       	movw	r30, r10
    2690:	96 82       	std	Z+6, r9	; 0x06
    2692:	be 01       	movw	r22, r28
	int i;
	if (character == 100) {
		resetScreen();
	}
	else {
		for (i = 0; i < 6; i++)
    2694:	6f 5f       	subi	r22, 0xFF	; 255
    2696:	7f 4f       	sbci	r23, 0xFF	; 255
    2698:	c8 01       	movw	r24, r16
		{
			st7565r_write_data(Characters[character+26][i]);
		}
	}
	delay_ms(100);
    269a:	2b db       	rcall	.-2474   	; 0x1cf2 <usart_spi_deselect_device>
    269c:	ec 14       	cp	r14, r12
    269e:	fd 04       	cpc	r15, r13
    26a0:	f1 f6       	brne	.-68     	; 0x265e <displayCharacter+0x1b4>
    26a2:	66 ed       	ldi	r22, 0xD6	; 214
    26a4:	78 e0       	ldi	r23, 0x08	; 8
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    26a6:	82 e0       	ldi	r24, 0x02	; 2
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	d0 dd       	rcall	.-1120   	; 0x224c <__portable_avr_delay_cycles>
	gpio_set_pin_high(NHD_C12832A1Z_BACKLIGHT); //turns backlight on
}
    26ac:	80 e1       	ldi	r24, 0x10	; 16
		st7565r_set_column_address(0);
		st7565r_set_page_address(++page_address);
	}

	int i;
	if (character == 100) {
    26ae:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    26b2:	04 c0       	rjmp	.+8      	; 0x26bc <displayCharacter+0x212>
    26b4:	14 36       	cpi	r17, 0x64	; 100
			st7565r_write_data(Characters[character+26][i]);
		}
	}
	delay_ms(100);
	gpio_set_pin_high(NHD_C12832A1Z_BACKLIGHT); //turns backlight on
}
    26b6:	09 f0       	breq	.+2      	; 0x26ba <displayCharacter+0x210>
    26b8:	ae cf       	rjmp	.-164    	; 0x2616 <displayCharacter+0x16c>
    26ba:	ab cf       	rjmp	.-170    	; 0x2612 <displayCharacter+0x168>
    26bc:	0f 90       	pop	r0
    26be:	df 91       	pop	r29
    26c0:	cf 91       	pop	r28
    26c2:	1f 91       	pop	r17
    26c4:	0f 91       	pop	r16
    26c6:	ff 90       	pop	r15
    26c8:	ef 90       	pop	r14
    26ca:	df 90       	pop	r13
    26cc:	cf 90       	pop	r12
    26ce:	bf 90       	pop	r11
    26d0:	af 90       	pop	r10
    26d2:	9f 90       	pop	r9
    26d4:	8f 90       	pop	r8
    26d6:	7f 90       	pop	r7
    26d8:	6f 90       	pop	r6
    26da:	08 95       	ret

000026dc <main>:

//pwm
struct pwm_config mypwm[4];

int main(void)
{
    26dc:	cf 93       	push	r28
    26de:	df 93       	push	r29
    26e0:	cd b7       	in	r28, 0x3d	; 61
    26e2:	de b7       	in	r29, 0x3e	; 62
    26e4:	64 97       	sbiw	r28, 0x14	; 20
    26e6:	cd bf       	out	0x3d, r28	; 61
	board_init();
	sysclk_init();
    26e8:	de bf       	out	0x3e, r29	; 62
    26ea:	13 dd       	rcall	.-1498   	; 0x2112 <board_init>
    26ec:	18 db       	rcall	.-2512   	; 0x1d1e <sysclk_init>
    26ee:	80 e1       	ldi	r24, 0x10	; 16
    26f0:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>

	gpio_set_pin_high(NHD_C12832A1Z_BACKLIGHT); //turns backlight on

	// initialize the interface (SPI), ST7565R LCD controller and LCD
	st7565r_init();
    26f4:	0e 94 32 01 	call	0x264	; 0x264 <st7565r_init>
	
	//pwm init
	pwm_init(&mypwm[0], PWM_TCE0, PWM_CH_A, 50);
    26f8:	22 e3       	ldi	r18, 0x32	; 50
    26fa:	30 e0       	ldi	r19, 0x00	; 0
    26fc:	41 e0       	ldi	r20, 0x01	; 1
    26fe:	64 e0       	ldi	r22, 0x04	; 4
    2700:	87 e2       	ldi	r24, 0x27	; 39

	// set addresses at beginning of display
	resetScreen();
    2702:	92 e2       	ldi	r25, 0x22	; 34
    2704:	c9 db       	rcall	.-2158   	; 0x1e98 <pwm_init>
		.paritytype = USART_SERIAL_PARITY,
		.stopbits = USART_SERIAL_STOP_BIT
	};
	
	// Initialize usart driver in RS232 mode
	usart_init_rs232(USART_SERIAL_EXAMPLE, &USART_SERIAL_OPTIONS);
    2706:	ad dd       	rcall	.-1190   	; 0x2262 <resetScreen>
    2708:	60 e0       	ldi	r22, 0x00	; 0
    270a:	70 e2       	ldi	r23, 0x20	; 32
    270c:	80 ea       	ldi	r24, 0xA0	; 160
    270e:	98 e0       	ldi	r25, 0x08	; 8
    2710:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <usart_init_rs232>

	uint8_t tx_buf[] = "\n\rEnter a message: ";
    2714:	84 e1       	ldi	r24, 0x14	; 20
    2716:	e7 e0       	ldi	r30, 0x07	; 7
    2718:	f0 e2       	ldi	r31, 0x20	; 32
    271a:	de 01       	movw	r26, r28
    271c:	11 96       	adiw	r26, 0x01	; 1
    271e:	01 90       	ld	r0, Z+
    2720:	0d 92       	st	X+, r0
    2722:	8a 95       	dec	r24
    2724:	e1 f7       	brne	.-8      	; 0x271e <main+0x42>
    2726:	8e 01       	movw	r16, r28
    2728:	0f 5f       	subi	r16, 0xFF	; 255
    272a:	1f 4f       	sbci	r17, 0xFF	; 255
    272c:	7e 01       	movw	r14, r28
    272e:	81 e8       	ldi	r24, 0x81	; 129
    2730:	e8 0e       	add	r14, r24
	int tx_length = 128;
	int i;
	for (i = 0; i < tx_length; i++) {
		usart_putchar(USART_SERIAL_EXAMPLE, tx_buf[i]);
    2732:	f1 1c       	adc	r15, r1
    2734:	f8 01       	movw	r30, r16
    2736:	61 91       	ld	r22, Z+
    2738:	8f 01       	movw	r16, r30
    273a:	80 ea       	ldi	r24, 0xA0	; 160
    273c:	98 e0       	ldi	r25, 0x08	; 8
    273e:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <usart_putchar>
	usart_init_rs232(USART_SERIAL_EXAMPLE, &USART_SERIAL_OPTIONS);

	uint8_t tx_buf[] = "\n\rEnter a message: ";
	int tx_length = 128;
	int i;
	for (i = 0; i < tx_length; i++) {
    2742:	0e 15       	cp	r16, r14
    2744:	1f 05       	cpc	r17, r15
		usart_putchar(USART_SERIAL_EXAMPLE, tx_buf[i]);
	}

	uint8_t input;
	while (true) {
		input = usart_getchar(USART_SERIAL_EXAMPLE);
    2746:	b1 f7       	brne	.-20     	; 0x2734 <main+0x58>
    2748:	80 ea       	ldi	r24, 0xA0	; 160
    274a:	98 e0       	ldi	r25, 0x08	; 8
		int userInput = getCharacter(input);
		if(input != 0){
    274c:	0e 94 db 09 	call	0x13b6	; 0x13b6 <usart_getchar>
			displayCharacter(input);
			pwm_start(&mypwm[0], 2);
    2750:	88 23       	and	r24, r24
    2752:	d1 f3       	breq	.-12     	; 0x2748 <main+0x6c>
    2754:	aa de       	rcall	.-684    	; 0x24aa <displayCharacter>
    2756:	62 e0       	ldi	r22, 0x02	; 2
			
			//pwm_start(&mypwm[0], 0);
			
			//While read switch is open - do nothing
			
			delay_s(5);
    2758:	87 e2       	ldi	r24, 0x27	; 39
    275a:	92 e2       	ldi	r25, 0x22	; 34
    275c:	63 dc       	rcall	.-1850   	; 0x2024 <pwm_start>
    275e:	6b ea       	ldi	r22, 0xAB	; 171
    2760:	79 eb       	ldi	r23, 0xB9	; 185
			pwm_start(&mypwm[0], 7.5);
    2762:	85 e6       	ldi	r24, 0x65	; 101
    2764:	90 e0       	ldi	r25, 0x00	; 0
    2766:	72 dd       	rcall	.-1308   	; 0x224c <__portable_avr_delay_cycles>
			
			delay_s(2);
    2768:	67 e0       	ldi	r22, 0x07	; 7
    276a:	87 e2       	ldi	r24, 0x27	; 39
    276c:	92 e2       	ldi	r25, 0x22	; 34
    276e:	5a dc       	rcall	.-1868   	; 0x2024 <pwm_start>
    2770:	6b ea       	ldi	r22, 0xAB	; 171
			
			pwm_start(&mypwm[0], 0);
    2772:	70 eb       	ldi	r23, 0xB0	; 176
    2774:	88 e2       	ldi	r24, 0x28	; 40
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	69 dd       	rcall	.-1326   	; 0x224c <__portable_avr_delay_cycles>
    277a:	60 e0       	ldi	r22, 0x00	; 0
    277c:	87 e2       	ldi	r24, 0x27	; 39
    277e:	92 e2       	ldi	r25, 0x22	; 34
    2780:	51 dc       	rcall	.-1886   	; 0x2024 <pwm_start>
    2782:	e2 cf       	rjmp	.-60     	; 0x2748 <main+0x6c>

00002784 <__udivmodsi4>:
    2784:	a1 e2       	ldi	r26, 0x21	; 33
    2786:	1a 2e       	mov	r1, r26
    2788:	aa 1b       	sub	r26, r26
    278a:	bb 1b       	sub	r27, r27
    278c:	fd 01       	movw	r30, r26
    278e:	0d c0       	rjmp	.+26     	; 0x27aa <__udivmodsi4_ep>

00002790 <__udivmodsi4_loop>:
    2790:	aa 1f       	adc	r26, r26
    2792:	bb 1f       	adc	r27, r27
    2794:	ee 1f       	adc	r30, r30
    2796:	ff 1f       	adc	r31, r31
    2798:	a2 17       	cp	r26, r18
    279a:	b3 07       	cpc	r27, r19
    279c:	e4 07       	cpc	r30, r20
    279e:	f5 07       	cpc	r31, r21
    27a0:	20 f0       	brcs	.+8      	; 0x27aa <__udivmodsi4_ep>
    27a2:	a2 1b       	sub	r26, r18
    27a4:	b3 0b       	sbc	r27, r19
    27a6:	e4 0b       	sbc	r30, r20
    27a8:	f5 0b       	sbc	r31, r21

000027aa <__udivmodsi4_ep>:
    27aa:	66 1f       	adc	r22, r22
    27ac:	77 1f       	adc	r23, r23
    27ae:	88 1f       	adc	r24, r24
    27b0:	99 1f       	adc	r25, r25
    27b2:	1a 94       	dec	r1
    27b4:	69 f7       	brne	.-38     	; 0x2790 <__udivmodsi4_loop>
    27b6:	60 95       	com	r22
    27b8:	70 95       	com	r23
    27ba:	80 95       	com	r24
    27bc:	90 95       	com	r25
    27be:	9b 01       	movw	r18, r22
    27c0:	ac 01       	movw	r20, r24
    27c2:	bd 01       	movw	r22, r26
    27c4:	cf 01       	movw	r24, r30
    27c6:	08 95       	ret

000027c8 <__tablejump2__>:
    27c8:	ee 0f       	add	r30, r30
    27ca:	ff 1f       	adc	r31, r31
    27cc:	88 1f       	adc	r24, r24
    27ce:	8b bf       	out	0x3b, r24	; 59
    27d0:	07 90       	elpm	r0, Z+
    27d2:	f6 91       	elpm	r31, Z
    27d4:	e0 2d       	mov	r30, r0
    27d6:	19 94       	eijmp

000027d8 <__umulhisi3>:
    27d8:	a2 9f       	mul	r26, r18
    27da:	b0 01       	movw	r22, r0
    27dc:	b3 9f       	mul	r27, r19
    27de:	c0 01       	movw	r24, r0
    27e0:	a3 9f       	mul	r26, r19
    27e2:	70 0d       	add	r23, r0
    27e4:	81 1d       	adc	r24, r1
    27e6:	11 24       	eor	r1, r1
    27e8:	91 1d       	adc	r25, r1
    27ea:	b2 9f       	mul	r27, r18
    27ec:	70 0d       	add	r23, r0
    27ee:	81 1d       	adc	r24, r1
    27f0:	11 24       	eor	r1, r1
    27f2:	91 1d       	adc	r25, r1
    27f4:	08 95       	ret

000027f6 <_exit>:
    27f6:	f8 94       	cli

000027f8 <__stop_program>:
    27f8:	ff cf       	rjmp	.-2      	; 0x27f8 <__stop_program>
